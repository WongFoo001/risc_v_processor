circuit Booth8Cycle :
  module Booth8Cycle :
    input clock : Clock
    input reset : UInt<1>
    input io_multiplicand : UInt<16>
    input io_multiplier : UInt<16>
    input io_start : UInt<1>
    output io_finished : UInt<1>
    output io_product : UInt<32>
  
    reg accUpper : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accUpper) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accLower) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with :
      reset => (UInt<1>("h0"), mcd) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with :
      reset => (UInt<1>("h0"), mpl) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<4>, clock with :
      reset => (UInt<1>("h0"), iter) @[Booth8Cycle.scala 21:32]
    node _T = add(iter, UInt<1>("h1")) @[Booth8Cycle.scala 32:21]
    node _T_1 = tail(_T, 1) @[Booth8Cycle.scala 32:21]
    node _T_2 = add(mcd, mcd) @[Booth8Cycle.scala 33:20]
    node _T_3 = tail(_T_2, 1) @[Booth8Cycle.scala 33:20]
    node _T_4 = bits(mpl, 2, 0) @[Booth8Cycle.scala 38:19]
    node operation = _T_4 @[Booth8Cycle.scala 28:23 Booth8Cycle.scala 38:13]
    node _T_5 = eq(UInt<1>("h0"), operation) @[Conditional.scala 37:30]
    node _T_6 = bits(reset, 0, 0) @[Booth8Cycle.scala 43:13]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[Booth8Cycle.scala 43:13]
    node _T_8 = eq(UInt<1>("h1"), operation) @[Conditional.scala 37:30]
    node _T_9 = add(accUpper, mcd) @[Booth8Cycle.scala 46:27]
    node _T_10 = tail(_T_9, 1) @[Booth8Cycle.scala 46:27]
    node _T_11 = bits(reset, 0, 0) @[Booth8Cycle.scala 47:13]
    node _T_12 = eq(_T_11, UInt<1>("h0")) @[Booth8Cycle.scala 47:13]
    node _T_13 = bits(reset, 0, 0) @[Booth8Cycle.scala 48:13]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[Booth8Cycle.scala 48:13]
    node _T_15 = eq(UInt<2>("h2"), operation) @[Conditional.scala 37:30]
    node _T_16 = add(accUpper, mcd) @[Booth8Cycle.scala 51:27]
    node _T_17 = tail(_T_16, 1) @[Booth8Cycle.scala 51:27]
    node _T_18 = bits(reset, 0, 0) @[Booth8Cycle.scala 52:13]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[Booth8Cycle.scala 52:13]
    node _T_20 = bits(reset, 0, 0) @[Booth8Cycle.scala 53:13]
    node _T_21 = eq(_T_20, UInt<1>("h0")) @[Booth8Cycle.scala 53:13]
    node _T_22 = eq(UInt<2>("h3"), operation) @[Conditional.scala 37:30]
    node doubleMCD = _T_3 @[Booth8Cycle.scala 29:23 Booth8Cycle.scala 33:13]
    node _T_23 = add(accUpper, doubleMCD) @[Booth8Cycle.scala 56:27]
    node _T_24 = tail(_T_23, 1) @[Booth8Cycle.scala 56:27]
    node _T_25 = bits(reset, 0, 0) @[Booth8Cycle.scala 57:13]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[Booth8Cycle.scala 57:13]
    node _T_27 = bits(reset, 0, 0) @[Booth8Cycle.scala 58:13]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[Booth8Cycle.scala 58:13]
    node _T_29 = eq(UInt<3>("h4"), operation) @[Conditional.scala 37:30]
    node _T_30 = sub(accUpper, doubleMCD) @[Booth8Cycle.scala 61:27]
    node _T_31 = tail(_T_30, 1) @[Booth8Cycle.scala 61:27]
    node _T_32 = bits(reset, 0, 0) @[Booth8Cycle.scala 62:13]
    node _T_33 = eq(_T_32, UInt<1>("h0")) @[Booth8Cycle.scala 62:13]
    node _T_34 = bits(reset, 0, 0) @[Booth8Cycle.scala 63:13]
    node _T_35 = eq(_T_34, UInt<1>("h0")) @[Booth8Cycle.scala 63:13]
    node _T_36 = eq(UInt<3>("h5"), operation) @[Conditional.scala 37:30]
    node _T_37 = sub(accUpper, mcd) @[Booth8Cycle.scala 66:27]
    node _T_38 = tail(_T_37, 1) @[Booth8Cycle.scala 66:27]
    node _T_39 = bits(reset, 0, 0) @[Booth8Cycle.scala 67:13]
    node _T_40 = eq(_T_39, UInt<1>("h0")) @[Booth8Cycle.scala 67:13]
    node _T_41 = bits(reset, 0, 0) @[Booth8Cycle.scala 68:13]
    node _T_42 = eq(_T_41, UInt<1>("h0")) @[Booth8Cycle.scala 68:13]
    node _T_43 = eq(UInt<3>("h6"), operation) @[Conditional.scala 37:30]
    node _T_44 = sub(accUpper, mcd) @[Booth8Cycle.scala 71:27]
    node _T_45 = tail(_T_44, 1) @[Booth8Cycle.scala 71:27]
    node _T_46 = bits(reset, 0, 0) @[Booth8Cycle.scala 72:13]
    node _T_47 = eq(_T_46, UInt<1>("h0")) @[Booth8Cycle.scala 72:13]
    node _T_48 = bits(reset, 0, 0) @[Booth8Cycle.scala 73:13]
    node _T_49 = eq(_T_48, UInt<1>("h0")) @[Booth8Cycle.scala 73:13]
    node _T_50 = eq(UInt<3>("h7"), operation) @[Conditional.scala 37:30]
    node _T_51 = bits(reset, 0, 0) @[Booth8Cycle.scala 77:13]
    node _T_52 = eq(_T_51, UInt<1>("h0")) @[Booth8Cycle.scala 77:13]
    node _GEN_0 = validif(_T_43, _T_45) @[Conditional.scala 39:67]
    node _GEN_1 = mux(_T_36, _T_38, _GEN_0) @[Conditional.scala 39:67]
    node _GEN_2 = mux(_T_29, _T_31, _GEN_1) @[Conditional.scala 39:67]
    node _GEN_3 = mux(_T_22, _T_24, _GEN_2) @[Conditional.scala 39:67]
    node _GEN_4 = mux(_T_15, _T_17, _GEN_3) @[Conditional.scala 39:67]
    node _GEN_5 = mux(_T_8, _T_10, _GEN_4) @[Conditional.scala 39:67]
    node _GEN_6 = validif(eq(_T_5, UInt<1>("h0")), _GEN_5) @[Conditional.scala 40:58]
    node accCalc = _GEN_6 @[Booth8Cycle.scala 26:23 Booth8Cycle.scala 46:15 Booth8Cycle.scala 51:15 Booth8Cycle.scala 56:15 Booth8Cycle.scala 61:15 Booth8Cycle.scala 66:15 Booth8Cycle.scala 71:15]
    node _T_53 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 81:26]
    node _T_54 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 81:39]
    node _T_55 = bits(accLower, 15, 2) @[Booth8Cycle.scala 81:62]
    node _T_56 = cat(accCalc, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_58 = cat(_T_57, _T_56) @[Cat.scala 29:58]
    node _T_59 = cat(accUpper, accLower) @[Cat.scala 29:58]
    node _T_60 = cat(io_multiplier, UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_61 = bits(reset, 0, 0) @[Booth8Cycle.scala 98:11]
    node _T_62 = eq(_T_61, UInt<1>("h0")) @[Booth8Cycle.scala 98:11]
    node _T_63 = lt(iter, UInt<4>("h8")) @[Booth8Cycle.scala 103:16]
    node _T_64 = bits(reset, 0, 0) @[Booth8Cycle.scala 105:13]
    node _T_65 = eq(_T_64, UInt<1>("h0")) @[Booth8Cycle.scala 105:13]
    node _T_66 = bits(reset, 0, 0) @[Booth8Cycle.scala 106:13]
    node _T_67 = eq(_T_66, UInt<1>("h0")) @[Booth8Cycle.scala 106:13]
    node _T_68 = bits(reset, 0, 0) @[Booth8Cycle.scala 107:13]
    node _T_69 = eq(_T_68, UInt<1>("h0")) @[Booth8Cycle.scala 107:13]
    node _T_70 = bits(reset, 0, 0) @[Booth8Cycle.scala 108:13]
    node _T_71 = eq(_T_70, UInt<1>("h0")) @[Booth8Cycle.scala 108:13]
    node _T_72 = dshr(mpl, UInt<2>("h2")) @[Booth8Cycle.scala 109:23]
    node accShift = _T_58 @[Booth8Cycle.scala 27:23 Booth8Cycle.scala 81:12]
    node _T_73 = bits(accShift, 31, 16) @[Booth8Cycle.scala 110:27]
    node _T_74 = bits(accShift, 15, 0) @[Booth8Cycle.scala 111:27]
    node _GEN_7 = mux(_T_63, _T_72, mpl) @[Booth8Cycle.scala 103:23]
    node _GEN_8 = mux(_T_63, _T_73, accUpper) @[Booth8Cycle.scala 103:23]
    node _GEN_9 = mux(_T_63, _T_74, accLower) @[Booth8Cycle.scala 103:23]
    node nextIter = _T_1 @[Booth8Cycle.scala 25:23 Booth8Cycle.scala 32:13]
    node _GEN_10 = mux(_T_63, nextIter, iter) @[Booth8Cycle.scala 103:23]
    node _GEN_11 = mux(_T_63, UInt<1>("h0"), UInt<1>("h1")) @[Booth8Cycle.scala 103:23]
    node _GEN_12 = mux(io_start, UInt<1>("h0"), _GEN_8) @[Booth8Cycle.scala 92:19]
    node _GEN_13 = mux(io_start, UInt<1>("h0"), _GEN_9) @[Booth8Cycle.scala 92:19]
    node _GEN_14 = mux(io_start, io_multiplicand, mcd) @[Booth8Cycle.scala 92:19]
    node _GEN_15 = mux(io_start, _T_60, _GEN_7) @[Booth8Cycle.scala 92:19]
    node _GEN_16 = mux(io_start, UInt<1>("h0"), _GEN_10) @[Booth8Cycle.scala 92:19]
    node _GEN_17 = mux(io_start, UInt<1>("h0"), _GEN_11) @[Booth8Cycle.scala 92:19]
    io_finished <= _GEN_17 @[Booth8Cycle.scala 90:15 Booth8Cycle.scala 116:19]
    io_product <= _T_59 @[Booth8Cycle.scala 89:15]
    accUpper <= mux(reset, UInt<16>("h0"), _GEN_12) @[Booth8Cycle.scala 93:18 Booth8Cycle.scala 110:16]
    accLower <= mux(reset, UInt<16>("h0"), _GEN_13) @[Booth8Cycle.scala 94:14 Booth8Cycle.scala 111:16]
    mcd <= mux(reset, UInt<16>("h0"), _GEN_14) @[Booth8Cycle.scala 95:14]
    mpl <= mux(reset, UInt<17>("h0"), _GEN_15) @[Booth8Cycle.scala 96:14 Booth8Cycle.scala 109:16]
    iter <= mux(reset, UInt<4>("h0"), _GEN_16) @[Booth8Cycle.scala 97:14 Booth8Cycle.scala 112:16 Booth8Cycle.scala 117:19]
    printf(clock, and(and(and(UInt<1>("h1"), _T_5), _T_7), UInt<1>("h1")), "000: Do Nothing\n") @[Booth8Cycle.scala 43:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), _T_8), _T_12), UInt<1>("h1")), "001: Add Multiplicand\n") @[Booth8Cycle.scala 47:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), _T_8), _T_14), UInt<1>("h1")), "Adding %b to %b\n", mcd, accUpper) @[Booth8Cycle.scala 48:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), _T_15), _T_19), UInt<1>("h1")), "010: Add Multiplicand\n") @[Booth8Cycle.scala 52:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), _T_15), _T_21), UInt<1>("h1")), "Adding %b to %b\n", mcd, accUpper) @[Booth8Cycle.scala 53:13]
    printf(clock, and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), _T_22), _T_26), UInt<1>("h1")), "011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 57:13]
    printf(clock, and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), _T_22), _T_28), UInt<1>("h1")), "Adding %b to %b\n", doubleMCD, accUpper) @[Booth8Cycle.scala 58:13]
    printf(clock, and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), eq(_T_22, UInt<1>("h0"))), _T_29), _T_33), UInt<1>("h1")), "100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 62:13]
    printf(clock, and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), eq(_T_22, UInt<1>("h0"))), _T_29), _T_35), UInt<1>("h1")), "Subtracting %b from %b\n", doubleMCD, accUpper) @[Booth8Cycle.scala 63:13]
    printf(clock, and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), eq(_T_22, UInt<1>("h0"))), eq(_T_29, UInt<1>("h0"))), _T_36), _T_40), UInt<1>("h1")), "110: Subtract Multiplicand\n") @[Booth8Cycle.scala 67:13]
    printf(clock, and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), eq(_T_22, UInt<1>("h0"))), eq(_T_29, UInt<1>("h0"))), _T_36), _T_42), UInt<1>("h1")), "Subtracting %b from %b\n", mcd, accUpper) @[Booth8Cycle.scala 68:13]
    printf(clock, and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), eq(_T_22, UInt<1>("h0"))), eq(_T_29, UInt<1>("h0"))), eq(_T_36, UInt<1>("h0"))), _T_43), _T_47), UInt<1>("h1")), "110: Subtract Multiplicand\n") @[Booth8Cycle.scala 72:13]
    printf(clock, and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), eq(_T_22, UInt<1>("h0"))), eq(_T_29, UInt<1>("h0"))), eq(_T_36, UInt<1>("h0"))), _T_43), _T_49), UInt<1>("h1")), "Subtracting %b from %b\n", mcd, accUpper) @[Booth8Cycle.scala 73:13]
    printf(clock, and(and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_5, UInt<1>("h0"))), eq(_T_8, UInt<1>("h0"))), eq(_T_15, UInt<1>("h0"))), eq(_T_22, UInt<1>("h0"))), eq(_T_29, UInt<1>("h0"))), eq(_T_36, UInt<1>("h0"))), eq(_T_43, UInt<1>("h0"))), _T_50), _T_52), UInt<1>("h1")), "111: Do Nothing\n") @[Booth8Cycle.scala 77:13]
    printf(clock, and(and(and(UInt<1>("h1"), io_start), _T_62), UInt<1>("h1")), "** Test Initialized: mpl (with last-bit): %b  ||  mcd: %b\n", mpl, mcd) @[Booth8Cycle.scala 98:11]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_65), UInt<1>("h1")), "Iteration: %d\n", iter) @[Booth8Cycle.scala 105:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_67), UInt<1>("h1")), "  Registered Values:\n") @[Booth8Cycle.scala 106:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_69), UInt<1>("h1")), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 107:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_71), UInt<1>("h1")), "     * AccUpper | AccLower: %b | %b\n", accUpper, accLower) @[Booth8Cycle.scala 108:13]
