;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, flip finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Booth8Cycle.scala 21:26]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 25:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 26:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 27:23]
    wire nextMPL : UInt<17> @[Booth8Cycle.scala 28:23]
    wire accumulatorUpper : UInt<16> @[Booth8Cycle.scala 30:31]
    wire calcMultiplicand : UInt<16> @[Booth8Cycle.scala 31:31]
    wire first_upAcc : UInt<16> @[Booth8Cycle.scala 32:31]
    wire first_mcd : UInt<16> @[Booth8Cycle.scala 33:31]
    wire first_op : UInt<3> @[Booth8Cycle.scala 34:31]
    accCalc is invalid @[Booth8Cycle.scala 37:13]
    accShift is invalid @[Booth8Cycle.scala 38:13]
    operation is invalid @[Booth8Cycle.scala 39:13]
    nextMPL is invalid @[Booth8Cycle.scala 40:13]
    first_upAcc <= UInt<1>("h00") @[Booth8Cycle.scala 44:16]
    first_mcd <= io.multiplicand @[Booth8Cycle.scala 45:16]
    node _T = bits(io.multiplier, 1, 0) @[Booth8Cycle.scala 46:36]
    node _T_1 = cat(_T, UInt<1>("h00")) @[Cat.scala 29:58]
    first_op <= _T_1 @[Booth8Cycle.scala 46:16]
    when io.start : @[Booth8Cycle.scala 49:19]
      node _T_2 = bits(reset, 0, 0) @[Booth8Cycle.scala 50:11]
      node _T_3 = eq(_T_2, UInt<1>("h00")) @[Booth8Cycle.scala 50:11]
      when _T_3 : @[Booth8Cycle.scala 50:11]
        printf(clock, UInt<1>(1), "  USING ITER 0 OPERANDS...\n") @[Booth8Cycle.scala 50:11]
        skip @[Booth8Cycle.scala 50:11]
      operation <= first_op @[Booth8Cycle.scala 51:22]
      accumulatorUpper <= first_upAcc @[Booth8Cycle.scala 52:22]
      calcMultiplicand <= first_mcd @[Booth8Cycle.scala 53:22]
      skip @[Booth8Cycle.scala 49:19]
    else : @[Booth8Cycle.scala 55:14]
      node _T_4 = bits(reset, 0, 0) @[Booth8Cycle.scala 56:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[Booth8Cycle.scala 56:11]
      when _T_5 : @[Booth8Cycle.scala 56:11]
        printf(clock, UInt<1>(1), "  USING NORM OPERANDS...\n") @[Booth8Cycle.scala 56:11]
        skip @[Booth8Cycle.scala 56:11]
      node _T_6 = bits(mpl, 2, 0) @[Booth8Cycle.scala 57:28]
      operation <= _T_6 @[Booth8Cycle.scala 57:22]
      accumulatorUpper <= accUpper @[Booth8Cycle.scala 58:22]
      calcMultiplicand <= mcd @[Booth8Cycle.scala 59:22]
      skip @[Booth8Cycle.scala 55:14]
    node _T_7 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_7 : @[Conditional.scala 40:58]
      accCalc <= accumulatorUpper @[Booth8Cycle.scala 65:15]
      node _T_8 = bits(reset, 0, 0) @[Booth8Cycle.scala 66:13]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[Booth8Cycle.scala 66:13]
      when _T_9 : @[Booth8Cycle.scala 66:13]
        printf(clock, UInt<1>(1), "    000: Do Nothing\n") @[Booth8Cycle.scala 66:13]
        skip @[Booth8Cycle.scala 66:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_10 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_10 : @[Conditional.scala 39:67]
        node _T_11 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 69:35]
        node _T_12 = tail(_T_11, 1) @[Booth8Cycle.scala 69:35]
        accCalc <= _T_12 @[Booth8Cycle.scala 69:15]
        node _T_13 = bits(reset, 0, 0) @[Booth8Cycle.scala 70:13]
        node _T_14 = eq(_T_13, UInt<1>("h00")) @[Booth8Cycle.scala 70:13]
        when _T_14 : @[Booth8Cycle.scala 70:13]
          printf(clock, UInt<1>(1), "    001: Add Multiplicand\n") @[Booth8Cycle.scala 70:13]
          skip @[Booth8Cycle.scala 70:13]
        node _T_15 = bits(reset, 0, 0) @[Booth8Cycle.scala 71:13]
        node _T_16 = eq(_T_15, UInt<1>("h00")) @[Booth8Cycle.scala 71:13]
        when _T_16 : @[Booth8Cycle.scala 71:13]
          printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 71:13]
          skip @[Booth8Cycle.scala 71:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_17 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_17 : @[Conditional.scala 39:67]
          node _T_18 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 74:35]
          node _T_19 = tail(_T_18, 1) @[Booth8Cycle.scala 74:35]
          accCalc <= _T_19 @[Booth8Cycle.scala 74:15]
          node _T_20 = bits(reset, 0, 0) @[Booth8Cycle.scala 75:13]
          node _T_21 = eq(_T_20, UInt<1>("h00")) @[Booth8Cycle.scala 75:13]
          when _T_21 : @[Booth8Cycle.scala 75:13]
            printf(clock, UInt<1>(1), "    010: Add Multiplicand\n") @[Booth8Cycle.scala 75:13]
            skip @[Booth8Cycle.scala 75:13]
          node _T_22 = bits(reset, 0, 0) @[Booth8Cycle.scala 76:13]
          node _T_23 = eq(_T_22, UInt<1>("h00")) @[Booth8Cycle.scala 76:13]
          when _T_23 : @[Booth8Cycle.scala 76:13]
            printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 76:13]
            skip @[Booth8Cycle.scala 76:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_24 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_24 : @[Conditional.scala 39:67]
            node _T_25 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 79:55]
            node _T_26 = add(accumulatorUpper, _T_25) @[Booth8Cycle.scala 79:35]
            node _T_27 = tail(_T_26, 1) @[Booth8Cycle.scala 79:35]
            accCalc <= _T_27 @[Booth8Cycle.scala 79:15]
            node _T_28 = bits(reset, 0, 0) @[Booth8Cycle.scala 80:13]
            node _T_29 = eq(_T_28, UInt<1>("h00")) @[Booth8Cycle.scala 80:13]
            when _T_29 : @[Booth8Cycle.scala 80:13]
              printf(clock, UInt<1>(1), "    011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 80:13]
              skip @[Booth8Cycle.scala 80:13]
            node _T_30 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 81:62]
            node _T_31 = bits(reset, 0, 0) @[Booth8Cycle.scala 81:13]
            node _T_32 = eq(_T_31, UInt<1>("h00")) @[Booth8Cycle.scala 81:13]
            when _T_32 : @[Booth8Cycle.scala 81:13]
              printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", _T_30, accumulatorUpper) @[Booth8Cycle.scala 81:13]
              skip @[Booth8Cycle.scala 81:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_33 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_33 : @[Conditional.scala 39:67]
              node _T_34 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 84:55]
              node _T_35 = sub(accumulatorUpper, _T_34) @[Booth8Cycle.scala 84:35]
              node _T_36 = tail(_T_35, 1) @[Booth8Cycle.scala 84:35]
              accCalc <= _T_36 @[Booth8Cycle.scala 84:15]
              node _T_37 = bits(reset, 0, 0) @[Booth8Cycle.scala 85:13]
              node _T_38 = eq(_T_37, UInt<1>("h00")) @[Booth8Cycle.scala 85:13]
              when _T_38 : @[Booth8Cycle.scala 85:13]
                printf(clock, UInt<1>(1), "    100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 85:13]
                skip @[Booth8Cycle.scala 85:13]
              node _T_39 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 86:69]
              node _T_40 = bits(reset, 0, 0) @[Booth8Cycle.scala 86:13]
              node _T_41 = eq(_T_40, UInt<1>("h00")) @[Booth8Cycle.scala 86:13]
              when _T_41 : @[Booth8Cycle.scala 86:13]
                printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", _T_39, accumulatorUpper) @[Booth8Cycle.scala 86:13]
                skip @[Booth8Cycle.scala 86:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_42 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_42 : @[Conditional.scala 39:67]
                node _T_43 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 89:35]
                node _T_44 = tail(_T_43, 1) @[Booth8Cycle.scala 89:35]
                accCalc <= _T_44 @[Booth8Cycle.scala 89:15]
                node _T_45 = bits(reset, 0, 0) @[Booth8Cycle.scala 90:13]
                node _T_46 = eq(_T_45, UInt<1>("h00")) @[Booth8Cycle.scala 90:13]
                when _T_46 : @[Booth8Cycle.scala 90:13]
                  printf(clock, UInt<1>(1), "    101: Subtract Multiplicand\n") @[Booth8Cycle.scala 90:13]
                  skip @[Booth8Cycle.scala 90:13]
                node _T_47 = bits(reset, 0, 0) @[Booth8Cycle.scala 91:13]
                node _T_48 = eq(_T_47, UInt<1>("h00")) @[Booth8Cycle.scala 91:13]
                when _T_48 : @[Booth8Cycle.scala 91:13]
                  printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 91:13]
                  skip @[Booth8Cycle.scala 91:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_49 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_49 : @[Conditional.scala 39:67]
                  node _T_50 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 94:35]
                  node _T_51 = tail(_T_50, 1) @[Booth8Cycle.scala 94:35]
                  accCalc <= _T_51 @[Booth8Cycle.scala 94:15]
                  node _T_52 = bits(reset, 0, 0) @[Booth8Cycle.scala 95:13]
                  node _T_53 = eq(_T_52, UInt<1>("h00")) @[Booth8Cycle.scala 95:13]
                  when _T_53 : @[Booth8Cycle.scala 95:13]
                    printf(clock, UInt<1>(1), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 95:13]
                    skip @[Booth8Cycle.scala 95:13]
                  node _T_54 = bits(reset, 0, 0) @[Booth8Cycle.scala 96:13]
                  node _T_55 = eq(_T_54, UInt<1>("h00")) @[Booth8Cycle.scala 96:13]
                  when _T_55 : @[Booth8Cycle.scala 96:13]
                    printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 96:13]
                    skip @[Booth8Cycle.scala 96:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_56 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_56 : @[Conditional.scala 39:67]
                    accCalc <= accumulatorUpper @[Booth8Cycle.scala 100:15]
                    node _T_57 = bits(reset, 0, 0) @[Booth8Cycle.scala 101:13]
                    node _T_58 = eq(_T_57, UInt<1>("h00")) @[Booth8Cycle.scala 101:13]
                    when _T_58 : @[Booth8Cycle.scala 101:13]
                      printf(clock, UInt<1>(1), "    111: Do Nothing\n") @[Booth8Cycle.scala 101:13]
                      skip @[Booth8Cycle.scala 101:13]
                    skip @[Conditional.scala 39:67]
    when io.start : @[Booth8Cycle.scala 105:19]
      node _T_59 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:28]
      node _T_60 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:41]
      node _T_61 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_62 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_63 = cat(_T_62, _T_61) @[Cat.scala 29:58]
      node _T_64 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_65 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_66 = cat(_T_65, _T_64) @[Cat.scala 29:58]
      node _T_67 = cat(_T_66, _T_63) @[Cat.scala 29:58]
      node _T_68 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_69 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_70 = cat(_T_69, _T_68) @[Cat.scala 29:58]
      node _T_71 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_72 = cat(_T_59, _T_60) @[Cat.scala 29:58]
      node _T_73 = cat(_T_72, accCalc) @[Cat.scala 29:58]
      node _T_74 = cat(_T_73, _T_71) @[Cat.scala 29:58]
      node _T_75 = cat(_T_74, _T_70) @[Cat.scala 29:58]
      node _T_76 = cat(_T_75, _T_67) @[Cat.scala 29:58]
      accShift <= _T_76 @[Booth8Cycle.scala 106:14]
      skip @[Booth8Cycle.scala 105:19]
    else : @[Booth8Cycle.scala 108:14]
      node _T_77 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:28]
      node _T_78 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:41]
      node _T_79 = bits(accLower, 15, 2) @[Booth8Cycle.scala 109:64]
      node _T_80 = cat(accCalc, _T_79) @[Cat.scala 29:58]
      node _T_81 = cat(_T_77, _T_78) @[Cat.scala 29:58]
      node _T_82 = cat(_T_81, _T_80) @[Cat.scala 29:58]
      accShift <= _T_82 @[Booth8Cycle.scala 109:14]
      skip @[Booth8Cycle.scala 108:14]
    node _T_83 = dshr(mpl, UInt<2>("h02")) @[Booth8Cycle.scala 113:19]
    nextMPL <= _T_83 @[Booth8Cycle.scala 113:12]
    io.product is invalid @[Booth8Cycle.scala 120:15]
    when io.start : @[Booth8Cycle.scala 122:19]
      node _T_84 = bits(accShift, 31, 16) @[Booth8Cycle.scala 123:79]
      node _T_85 = bits(accShift, 15, 0) @[Booth8Cycle.scala 123:97]
      node _T_86 = bits(reset, 0, 0) @[Booth8Cycle.scala 123:11]
      node _T_87 = eq(_T_86, UInt<1>("h00")) @[Booth8Cycle.scala 123:11]
      when _T_87 : @[Booth8Cycle.scala 123:11]
        printf(clock, UInt<1>(1), "REGISTERS INITIALIZED  -- %b %b  ||  mcd: %b  mpl: %b\n", _T_84, _T_85, io.multiplicand, io.multiplier) @[Booth8Cycle.scala 123:11]
        skip @[Booth8Cycle.scala 123:11]
      node _T_88 = bits(accShift, 31, 16) @[Booth8Cycle.scala 124:25]
      accUpper <= _T_88 @[Booth8Cycle.scala 124:14]
      node _T_89 = bits(accShift, 15, 0) @[Booth8Cycle.scala 125:25]
      accLower <= _T_89 @[Booth8Cycle.scala 125:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 126:14]
      node _T_90 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_91 = dshr(_T_90, UInt<2>("h02")) @[Booth8Cycle.scala 127:41]
      mpl <= _T_91 @[Booth8Cycle.scala 127:14]
      skip @[Booth8Cycle.scala 122:19]
    else : @[Booth8Cycle.scala 131:14]
      node _T_92 = bits(reset, 0, 0) @[Booth8Cycle.scala 132:11]
      node _T_93 = eq(_T_92, UInt<1>("h00")) @[Booth8Cycle.scala 132:11]
      when _T_93 : @[Booth8Cycle.scala 132:11]
        printf(clock, UInt<1>(1), "Operation Information: \n") @[Booth8Cycle.scala 132:11]
        skip @[Booth8Cycle.scala 132:11]
      node _T_94 = not(io.finished) @[Booth8Cycle.scala 133:11]
      when _T_94 : @[Booth8Cycle.scala 133:25]
        node _T_95 = bits(reset, 0, 0) @[Booth8Cycle.scala 135:13]
        node _T_96 = eq(_T_95, UInt<1>("h00")) @[Booth8Cycle.scala 135:13]
        when _T_96 : @[Booth8Cycle.scala 135:13]
          printf(clock, UInt<1>(1), "  Registered Values:\n") @[Booth8Cycle.scala 135:13]
          skip @[Booth8Cycle.scala 135:13]
        node _T_97 = bits(reset, 0, 0) @[Booth8Cycle.scala 136:13]
        node _T_98 = eq(_T_97, UInt<1>("h00")) @[Booth8Cycle.scala 136:13]
        when _T_98 : @[Booth8Cycle.scala 136:13]
          printf(clock, UInt<1>(1), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 136:13]
          skip @[Booth8Cycle.scala 136:13]
        node _T_99 = bits(reset, 0, 0) @[Booth8Cycle.scala 137:13]
        node _T_100 = eq(_T_99, UInt<1>("h00")) @[Booth8Cycle.scala 137:13]
        when _T_100 : @[Booth8Cycle.scala 137:13]
          printf(clock, UInt<1>(1), "     * AccUpper: %d | AccLower: %d \n", accUpper, accLower) @[Booth8Cycle.scala 137:13]
          skip @[Booth8Cycle.scala 137:13]
        mcd <= mcd @[Booth8Cycle.scala 139:16]
        mpl <= nextMPL @[Booth8Cycle.scala 140:16]
        node _T_101 = bits(accShift, 31, 16) @[Booth8Cycle.scala 141:27]
        accUpper <= _T_101 @[Booth8Cycle.scala 141:16]
        node _T_102 = bits(accShift, 15, 0) @[Booth8Cycle.scala 142:27]
        accLower <= _T_102 @[Booth8Cycle.scala 142:16]
        skip @[Booth8Cycle.scala 133:25]
      else : @[Booth8Cycle.scala 145:16]
        io.product <= accShift @[Booth8Cycle.scala 146:18]
        skip @[Booth8Cycle.scala 145:16]
      skip @[Booth8Cycle.scala 131:14]
    
