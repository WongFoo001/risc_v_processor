circuit Booth8Cycle :
  module Booth8Cycle :
    input clock : Clock
    input reset : UInt<1>
    input io_multiplicand : UInt<16>
    input io_multiplier : UInt<16>
    input io_start : UInt<1>
    input io_finished : UInt<1>
    output io_product : UInt<32>
  
    reg accUpper : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accUpper) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accLower) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with :
      reset => (UInt<1>("h0"), mcd) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with :
      reset => (UInt<1>("h0"), mpl) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<5>, clock with :
      reset => (UInt<1>("h0"), iter) @[Booth8Cycle.scala 21:26]
    node _T = bits(io_multiplier, 1, 0) @[Booth8Cycle.scala 46:36]
    node _T_1 = cat(_T, UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_2 = bits(reset, 0, 0) @[Booth8Cycle.scala 50:11]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[Booth8Cycle.scala 50:11]
    node _T_4 = bits(reset, 0, 0) @[Booth8Cycle.scala 56:11]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[Booth8Cycle.scala 56:11]
    node _T_6 = bits(mpl, 2, 0) @[Booth8Cycle.scala 57:28]
    node first_op = _T_1 @[Booth8Cycle.scala 34:31 Booth8Cycle.scala 46:16]
    node _GEN_0 = mux(io_start, first_op, _T_6) @[Booth8Cycle.scala 49:19]
    node first_upAcc = pad(UInt<1>("h0"), 16) @[Booth8Cycle.scala 32:31 Booth8Cycle.scala 44:16]
    node _GEN_1 = mux(io_start, first_upAcc, accUpper) @[Booth8Cycle.scala 49:19]
    node first_mcd = io_multiplicand @[Booth8Cycle.scala 33:31 Booth8Cycle.scala 45:16]
    node _GEN_2 = mux(io_start, first_mcd, mcd) @[Booth8Cycle.scala 49:19]
    node operation = _GEN_0 @[Booth8Cycle.scala 27:23 Booth8Cycle.scala 51:22 Booth8Cycle.scala 57:22]
    node _T_7 = eq(UInt<1>("h0"), operation) @[Conditional.scala 37:30]
    node _T_8 = bits(reset, 0, 0) @[Booth8Cycle.scala 66:13]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[Booth8Cycle.scala 66:13]
    node _T_10 = eq(UInt<1>("h1"), operation) @[Conditional.scala 37:30]
    node accumulatorUpper = _GEN_1 @[Booth8Cycle.scala 30:31 Booth8Cycle.scala 52:22 Booth8Cycle.scala 58:22]
    node calcMultiplicand = _GEN_2 @[Booth8Cycle.scala 31:31 Booth8Cycle.scala 53:22 Booth8Cycle.scala 59:22]
    node _T_11 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 69:35]
    node _T_12 = tail(_T_11, 1) @[Booth8Cycle.scala 69:35]
    node _T_13 = bits(reset, 0, 0) @[Booth8Cycle.scala 70:13]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[Booth8Cycle.scala 70:13]
    node _T_15 = bits(reset, 0, 0) @[Booth8Cycle.scala 71:13]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[Booth8Cycle.scala 71:13]
    node _T_17 = eq(UInt<2>("h2"), operation) @[Conditional.scala 37:30]
    node _T_18 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 74:35]
    node _T_19 = tail(_T_18, 1) @[Booth8Cycle.scala 74:35]
    node _T_20 = bits(reset, 0, 0) @[Booth8Cycle.scala 75:13]
    node _T_21 = eq(_T_20, UInt<1>("h0")) @[Booth8Cycle.scala 75:13]
    node _T_22 = bits(reset, 0, 0) @[Booth8Cycle.scala 76:13]
    node _T_23 = eq(_T_22, UInt<1>("h0")) @[Booth8Cycle.scala 76:13]
    node _T_24 = eq(UInt<2>("h3"), operation) @[Conditional.scala 37:30]
    node _T_25 = dshl(calcMultiplicand, UInt<1>("h1")) @[Booth8Cycle.scala 79:55]
    node _T_26 = add(accumulatorUpper, _T_25) @[Booth8Cycle.scala 79:35]
    node _T_27 = tail(_T_26, 1) @[Booth8Cycle.scala 79:35]
    node _T_28 = bits(reset, 0, 0) @[Booth8Cycle.scala 80:13]
    node _T_29 = eq(_T_28, UInt<1>("h0")) @[Booth8Cycle.scala 80:13]
    node _T_30 = dshl(calcMultiplicand, UInt<1>("h1")) @[Booth8Cycle.scala 81:62]
    node _T_31 = bits(reset, 0, 0) @[Booth8Cycle.scala 81:13]
    node _T_32 = eq(_T_31, UInt<1>("h0")) @[Booth8Cycle.scala 81:13]
    node _T_33 = eq(UInt<3>("h4"), operation) @[Conditional.scala 37:30]
    node _T_34 = dshl(calcMultiplicand, UInt<1>("h1")) @[Booth8Cycle.scala 84:55]
    node _T_35 = sub(accumulatorUpper, _T_34) @[Booth8Cycle.scala 84:35]
    node _T_36 = tail(_T_35, 1) @[Booth8Cycle.scala 84:35]
    node _T_37 = bits(reset, 0, 0) @[Booth8Cycle.scala 85:13]
    node _T_38 = eq(_T_37, UInt<1>("h0")) @[Booth8Cycle.scala 85:13]
    node _T_39 = dshl(calcMultiplicand, UInt<1>("h1")) @[Booth8Cycle.scala 86:69]
    node _T_40 = bits(reset, 0, 0) @[Booth8Cycle.scala 86:13]
    node _T_41 = eq(_T_40, UInt<1>("h0")) @[Booth8Cycle.scala 86:13]
    node _T_42 = eq(UInt<3>("h5"), operation) @[Conditional.scala 37:30]
    node _T_43 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 89:35]
    node _T_44 = tail(_T_43, 1) @[Booth8Cycle.scala 89:35]
    node _T_45 = bits(reset, 0, 0) @[Booth8Cycle.scala 90:13]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[Booth8Cycle.scala 90:13]
    node _T_47 = bits(reset, 0, 0) @[Booth8Cycle.scala 91:13]
    node _T_48 = eq(_T_47, UInt<1>("h0")) @[Booth8Cycle.scala 91:13]
    node _T_49 = eq(UInt<3>("h6"), operation) @[Conditional.scala 37:30]
    node _T_50 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 94:35]
    node _T_51 = tail(_T_50, 1) @[Booth8Cycle.scala 94:35]
    node _T_52 = bits(reset, 0, 0) @[Booth8Cycle.scala 95:13]
    node _T_53 = eq(_T_52, UInt<1>("h0")) @[Booth8Cycle.scala 95:13]
    node _T_54 = bits(reset, 0, 0) @[Booth8Cycle.scala 96:13]
    node _T_55 = eq(_T_54, UInt<1>("h0")) @[Booth8Cycle.scala 96:13]
    node _T_56 = eq(UInt<3>("h7"), operation) @[Conditional.scala 37:30]
    node _T_57 = bits(reset, 0, 0) @[Booth8Cycle.scala 101:13]
    node _T_58 = eq(_T_57, UInt<1>("h0")) @[Booth8Cycle.scala 101:13]
    node _GEN_3 = validif(_T_56, accumulatorUpper) @[Conditional.scala 39:67]
    node _GEN_4 = mux(_T_49, _T_51, _GEN_3) @[Conditional.scala 39:67]
    node _GEN_5 = mux(_T_42, _T_44, _GEN_4) @[Conditional.scala 39:67]
    node _GEN_6 = mux(_T_33, _T_36, _GEN_5) @[Conditional.scala 39:67]
    node _GEN_7 = mux(_T_24, _T_27, _GEN_6) @[Conditional.scala 39:67]
    node _GEN_8 = mux(_T_17, _T_19, _GEN_7) @[Conditional.scala 39:67]
    node _GEN_9 = mux(_T_10, _T_12, _GEN_8) @[Conditional.scala 39:67]
    node _GEN_10 = mux(_T_7, accumulatorUpper, _GEN_9) @[Conditional.scala 40:58]
    node accCalc = bits(_GEN_10, 15, 0) @[Booth8Cycle.scala 25:23 Booth8Cycle.scala 65:15 Booth8Cycle.scala 69:15 Booth8Cycle.scala 74:15 Booth8Cycle.scala 79:15 Booth8Cycle.scala 84:15 Booth8Cycle.scala 89:15 Booth8Cycle.scala 94:15 Booth8Cycle.scala 100:15]
    node _T_59 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:28]
    node _T_60 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:41]
    node _T_61 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_62 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_63 = cat(_T_62, _T_61) @[Cat.scala 29:58]
    node _T_64 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_65 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_66 = cat(_T_65, _T_64) @[Cat.scala 29:58]
    node _T_67 = cat(_T_66, _T_63) @[Cat.scala 29:58]
    node _T_68 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_69 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_70 = cat(_T_69, _T_68) @[Cat.scala 29:58]
    node _T_71 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_72 = cat(_T_59, _T_60) @[Cat.scala 29:58]
    node _T_73 = cat(_T_72, accCalc) @[Cat.scala 29:58]
    node _T_74 = cat(_T_73, _T_71) @[Cat.scala 29:58]
    node _T_75 = cat(_T_74, _T_70) @[Cat.scala 29:58]
    node _T_76 = cat(_T_75, _T_67) @[Cat.scala 29:58]
    node _T_77 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:28]
    node _T_78 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:41]
    node _T_79 = bits(accLower, 15, 2) @[Booth8Cycle.scala 109:64]
    node _T_80 = cat(accCalc, _T_79) @[Cat.scala 29:58]
    node _T_81 = cat(_T_77, _T_78) @[Cat.scala 29:58]
    node _T_82 = cat(_T_81, _T_80) @[Cat.scala 29:58]
    node _GEN_11 = mux(io_start, _T_76, _T_82) @[Booth8Cycle.scala 105:19]
    node _T_83 = dshr(mpl, UInt<2>("h2")) @[Booth8Cycle.scala 113:19]
    node accShift = _GEN_11 @[Booth8Cycle.scala 26:23 Booth8Cycle.scala 106:14 Booth8Cycle.scala 109:14]
    node _T_84 = bits(accShift, 31, 16) @[Booth8Cycle.scala 123:79]
    node _T_85 = bits(accShift, 15, 0) @[Booth8Cycle.scala 123:97]
    node _T_86 = bits(reset, 0, 0) @[Booth8Cycle.scala 123:11]
    node _T_87 = eq(_T_86, UInt<1>("h0")) @[Booth8Cycle.scala 123:11]
    node _T_88 = bits(accShift, 31, 16) @[Booth8Cycle.scala 124:25]
    node _T_89 = bits(accShift, 15, 0) @[Booth8Cycle.scala 125:25]
    node _T_90 = cat(io_multiplier, UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_91 = dshr(_T_90, UInt<2>("h2")) @[Booth8Cycle.scala 127:41]
    node _T_92 = bits(reset, 0, 0) @[Booth8Cycle.scala 132:11]
    node _T_93 = eq(_T_92, UInt<1>("h0")) @[Booth8Cycle.scala 132:11]
    node _T_94 = not(io_finished) @[Booth8Cycle.scala 133:11]
    node _T_95 = bits(reset, 0, 0) @[Booth8Cycle.scala 135:13]
    node _T_96 = eq(_T_95, UInt<1>("h0")) @[Booth8Cycle.scala 135:13]
    node _T_97 = bits(reset, 0, 0) @[Booth8Cycle.scala 136:13]
    node _T_98 = eq(_T_97, UInt<1>("h0")) @[Booth8Cycle.scala 136:13]
    node _T_99 = bits(reset, 0, 0) @[Booth8Cycle.scala 137:13]
    node _T_100 = eq(_T_99, UInt<1>("h0")) @[Booth8Cycle.scala 137:13]
    node _T_101 = bits(accShift, 31, 16) @[Booth8Cycle.scala 141:27]
    node _T_102 = bits(accShift, 15, 0) @[Booth8Cycle.scala 142:27]
    node _GEN_12 = mux(_T_94, mcd, mcd) @[Booth8Cycle.scala 133:25]
    node nextMPL = _T_83 @[Booth8Cycle.scala 28:23 Booth8Cycle.scala 113:12]
    node _GEN_13 = mux(_T_94, nextMPL, mpl) @[Booth8Cycle.scala 133:25]
    node _GEN_14 = mux(_T_94, _T_101, accUpper) @[Booth8Cycle.scala 133:25]
    node _GEN_15 = mux(_T_94, _T_102, accLower) @[Booth8Cycle.scala 133:25]
    node _GEN_16 = validif(eq(_T_94, UInt<1>("h0")), accShift) @[Booth8Cycle.scala 133:25]
    node _GEN_17 = mux(io_start, _T_88, _GEN_14) @[Booth8Cycle.scala 122:19]
    node _GEN_18 = mux(io_start, _T_89, _GEN_15) @[Booth8Cycle.scala 122:19]
    node _GEN_19 = mux(io_start, io_multiplicand, _GEN_12) @[Booth8Cycle.scala 122:19]
    node _GEN_20 = mux(io_start, _T_91, _GEN_13) @[Booth8Cycle.scala 122:19]
    node _GEN_21 = validif(eq(io_start, UInt<1>("h0")), _GEN_16) @[Booth8Cycle.scala 122:19]
    io_product <= _GEN_21 @[Booth8Cycle.scala 146:18]
    accUpper <= mux(reset, UInt<16>("h0"), _GEN_17) @[Booth8Cycle.scala 124:14 Booth8Cycle.scala 141:16]
    accLower <= mux(reset, UInt<16>("h0"), _GEN_18) @[Booth8Cycle.scala 125:14 Booth8Cycle.scala 142:16]
    mcd <= mux(reset, UInt<16>("h0"), _GEN_19) @[Booth8Cycle.scala 126:14 Booth8Cycle.scala 139:16]
    mpl <= mux(reset, UInt<17>("h0"), _GEN_20) @[Booth8Cycle.scala 127:14 Booth8Cycle.scala 140:16]
    iter <= mux(reset, UInt<5>("h0"), iter)
    printf(clock, and(and(and(UInt<1>("h1"), io_start), _T_3), UInt<1>("h1")), "  USING ITER 0 OPERANDS...\n") @[Booth8Cycle.scala 50:11]
    printf(clock, and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_5), UInt<1>("h1")), "  USING NORM OPERANDS...\n") @[Booth8Cycle.scala 56:11]
    printf(clock, and(and(and(UInt<1>("h1"), _T_7), _T_9), UInt<1>("h1")), "    000: Do Nothing\n") @[Booth8Cycle.scala 66:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), _T_10), _T_14), UInt<1>("h1")), "    001: Add Multiplicand\n") @[Booth8Cycle.scala 70:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), _T_10), _T_16), UInt<1>("h1")), "     --> Adding %d to %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 71:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), _T_17), _T_21), UInt<1>("h1")), "    010: Add Multiplicand\n") @[Booth8Cycle.scala 75:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), _T_17), _T_23), UInt<1>("h1")), "     --> Adding %d to %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 76:13]
    printf(clock, and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), _T_24), _T_29), UInt<1>("h1")), "    011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 80:13]
    printf(clock, and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), _T_24), _T_32), UInt<1>("h1")), "     --> Adding %d to %d\n", _T_30, accumulatorUpper) @[Booth8Cycle.scala 81:13]
    printf(clock, and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), _T_33), _T_38), UInt<1>("h1")), "    100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 85:13]
    printf(clock, and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), _T_33), _T_41), UInt<1>("h1")), "     --> Subtracting %d from %d\n", _T_39, accumulatorUpper) @[Booth8Cycle.scala 86:13]
    printf(clock, and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), eq(_T_33, UInt<1>("h0"))), _T_42), _T_46), UInt<1>("h1")), "    101: Subtract Multiplicand\n") @[Booth8Cycle.scala 90:13]
    printf(clock, and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), eq(_T_33, UInt<1>("h0"))), _T_42), _T_48), UInt<1>("h1")), "     --> Subtracting %d from %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 91:13]
    printf(clock, and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), eq(_T_33, UInt<1>("h0"))), eq(_T_42, UInt<1>("h0"))), _T_49), _T_53), UInt<1>("h1")), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 95:13]
    printf(clock, and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), eq(_T_33, UInt<1>("h0"))), eq(_T_42, UInt<1>("h0"))), _T_49), _T_55), UInt<1>("h1")), "     --> Subtracting %d from %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 96:13]
    printf(clock, and(and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_7, UInt<1>("h0"))), eq(_T_10, UInt<1>("h0"))), eq(_T_17, UInt<1>("h0"))), eq(_T_24, UInt<1>("h0"))), eq(_T_33, UInt<1>("h0"))), eq(_T_42, UInt<1>("h0"))), eq(_T_49, UInt<1>("h0"))), _T_56), _T_58), UInt<1>("h1")), "    111: Do Nothing\n") @[Booth8Cycle.scala 101:13]
    printf(clock, and(and(and(UInt<1>("h1"), io_start), _T_87), UInt<1>("h1")), "REGISTERS INITIALIZED  -- %b %b  ||  mcd: %b  mpl: %b\n", _T_84, _T_85, io_multiplicand, io_multiplier) @[Booth8Cycle.scala 123:11]
    printf(clock, and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_93), UInt<1>("h1")), "Operation Information: \n") @[Booth8Cycle.scala 132:11]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_94), _T_96), UInt<1>("h1")), "  Registered Values:\n") @[Booth8Cycle.scala 135:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_94), _T_98), UInt<1>("h1")), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 136:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_94), _T_100), UInt<1>("h1")), "     * AccUpper: %d | AccLower: %d \n", accUpper, accLower) @[Booth8Cycle.scala 137:13]
