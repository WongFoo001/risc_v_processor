;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Booth8Cycle.scala 21:32]
    wire nextIter : UInt<4> @[Booth8Cycle.scala 25:23]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 26:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 27:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 28:23]
    wire doubleMCD : UInt<16> @[Booth8Cycle.scala 29:23]
    node _T = add(iter, UInt<1>("h01")) @[Booth8Cycle.scala 32:21]
    node _T_1 = tail(_T, 1) @[Booth8Cycle.scala 32:21]
    nextIter <= _T_1 @[Booth8Cycle.scala 32:13]
    node _T_2 = add(mcd, mcd) @[Booth8Cycle.scala 33:20]
    node _T_3 = tail(_T_2, 1) @[Booth8Cycle.scala 33:20]
    doubleMCD <= _T_3 @[Booth8Cycle.scala 33:13]
    accCalc is invalid @[Booth8Cycle.scala 34:13]
    accShift is invalid @[Booth8Cycle.scala 35:13]
    node _T_4 = bits(mpl, 2, 0) @[Booth8Cycle.scala 38:19]
    operation <= _T_4 @[Booth8Cycle.scala 38:13]
    node _T_5 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_5 : @[Conditional.scala 40:58]
      node _T_6 = bits(reset, 0, 0) @[Booth8Cycle.scala 43:13]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[Booth8Cycle.scala 43:13]
      when _T_7 : @[Booth8Cycle.scala 43:13]
        printf(clock, UInt<1>(1), "    000: Do Nothing\n") @[Booth8Cycle.scala 43:13]
        skip @[Booth8Cycle.scala 43:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_8 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_8 : @[Conditional.scala 39:67]
        node _T_9 = add(accUpper, mcd) @[Booth8Cycle.scala 46:27]
        node _T_10 = tail(_T_9, 1) @[Booth8Cycle.scala 46:27]
        accCalc <= _T_10 @[Booth8Cycle.scala 46:15]
        node _T_11 = bits(reset, 0, 0) @[Booth8Cycle.scala 47:13]
        node _T_12 = eq(_T_11, UInt<1>("h00")) @[Booth8Cycle.scala 47:13]
        when _T_12 : @[Booth8Cycle.scala 47:13]
          printf(clock, UInt<1>(1), "    001: Add Multiplicand\n") @[Booth8Cycle.scala 47:13]
          skip @[Booth8Cycle.scala 47:13]
        node _T_13 = bits(reset, 0, 0) @[Booth8Cycle.scala 48:13]
        node _T_14 = eq(_T_13, UInt<1>("h00")) @[Booth8Cycle.scala 48:13]
        when _T_14 : @[Booth8Cycle.scala 48:13]
          printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 48:13]
          skip @[Booth8Cycle.scala 48:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          node _T_16 = add(accUpper, mcd) @[Booth8Cycle.scala 51:27]
          node _T_17 = tail(_T_16, 1) @[Booth8Cycle.scala 51:27]
          accCalc <= _T_17 @[Booth8Cycle.scala 51:15]
          node _T_18 = bits(reset, 0, 0) @[Booth8Cycle.scala 52:13]
          node _T_19 = eq(_T_18, UInt<1>("h00")) @[Booth8Cycle.scala 52:13]
          when _T_19 : @[Booth8Cycle.scala 52:13]
            printf(clock, UInt<1>(1), "    010: Add Multiplicand\n") @[Booth8Cycle.scala 52:13]
            skip @[Booth8Cycle.scala 52:13]
          node _T_20 = bits(reset, 0, 0) @[Booth8Cycle.scala 53:13]
          node _T_21 = eq(_T_20, UInt<1>("h00")) @[Booth8Cycle.scala 53:13]
          when _T_21 : @[Booth8Cycle.scala 53:13]
            printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 53:13]
            skip @[Booth8Cycle.scala 53:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_22 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_22 : @[Conditional.scala 39:67]
            node _T_23 = add(accUpper, doubleMCD) @[Booth8Cycle.scala 56:27]
            node _T_24 = tail(_T_23, 1) @[Booth8Cycle.scala 56:27]
            accCalc <= _T_24 @[Booth8Cycle.scala 56:15]
            node _T_25 = bits(reset, 0, 0) @[Booth8Cycle.scala 57:13]
            node _T_26 = eq(_T_25, UInt<1>("h00")) @[Booth8Cycle.scala 57:13]
            when _T_26 : @[Booth8Cycle.scala 57:13]
              printf(clock, UInt<1>(1), "    011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 57:13]
              skip @[Booth8Cycle.scala 57:13]
            node _T_27 = bits(reset, 0, 0) @[Booth8Cycle.scala 58:13]
            node _T_28 = eq(_T_27, UInt<1>("h00")) @[Booth8Cycle.scala 58:13]
            when _T_28 : @[Booth8Cycle.scala 58:13]
              printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 58:13]
              skip @[Booth8Cycle.scala 58:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_29 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_29 : @[Conditional.scala 39:67]
              node _T_30 = sub(accUpper, doubleMCD) @[Booth8Cycle.scala 61:27]
              node _T_31 = tail(_T_30, 1) @[Booth8Cycle.scala 61:27]
              accCalc <= _T_31 @[Booth8Cycle.scala 61:15]
              node _T_32 = bits(reset, 0, 0) @[Booth8Cycle.scala 62:13]
              node _T_33 = eq(_T_32, UInt<1>("h00")) @[Booth8Cycle.scala 62:13]
              when _T_33 : @[Booth8Cycle.scala 62:13]
                printf(clock, UInt<1>(1), "    100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 62:13]
                skip @[Booth8Cycle.scala 62:13]
              node _T_34 = bits(reset, 0, 0) @[Booth8Cycle.scala 63:13]
              node _T_35 = eq(_T_34, UInt<1>("h00")) @[Booth8Cycle.scala 63:13]
              when _T_35 : @[Booth8Cycle.scala 63:13]
                printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 63:13]
                skip @[Booth8Cycle.scala 63:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_36 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_36 : @[Conditional.scala 39:67]
                node _T_37 = sub(accUpper, mcd) @[Booth8Cycle.scala 66:27]
                node _T_38 = tail(_T_37, 1) @[Booth8Cycle.scala 66:27]
                accCalc <= _T_38 @[Booth8Cycle.scala 66:15]
                node _T_39 = bits(reset, 0, 0) @[Booth8Cycle.scala 67:13]
                node _T_40 = eq(_T_39, UInt<1>("h00")) @[Booth8Cycle.scala 67:13]
                when _T_40 : @[Booth8Cycle.scala 67:13]
                  printf(clock, UInt<1>(1), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 67:13]
                  skip @[Booth8Cycle.scala 67:13]
                node _T_41 = bits(reset, 0, 0) @[Booth8Cycle.scala 68:13]
                node _T_42 = eq(_T_41, UInt<1>("h00")) @[Booth8Cycle.scala 68:13]
                when _T_42 : @[Booth8Cycle.scala 68:13]
                  printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 68:13]
                  skip @[Booth8Cycle.scala 68:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_43 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_43 : @[Conditional.scala 39:67]
                  node _T_44 = sub(accUpper, mcd) @[Booth8Cycle.scala 71:27]
                  node _T_45 = tail(_T_44, 1) @[Booth8Cycle.scala 71:27]
                  accCalc <= _T_45 @[Booth8Cycle.scala 71:15]
                  node _T_46 = bits(reset, 0, 0) @[Booth8Cycle.scala 72:13]
                  node _T_47 = eq(_T_46, UInt<1>("h00")) @[Booth8Cycle.scala 72:13]
                  when _T_47 : @[Booth8Cycle.scala 72:13]
                    printf(clock, UInt<1>(1), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 72:13]
                    skip @[Booth8Cycle.scala 72:13]
                  node _T_48 = bits(reset, 0, 0) @[Booth8Cycle.scala 73:13]
                  node _T_49 = eq(_T_48, UInt<1>("h00")) @[Booth8Cycle.scala 73:13]
                  when _T_49 : @[Booth8Cycle.scala 73:13]
                    printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 73:13]
                    skip @[Booth8Cycle.scala 73:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_50 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_50 : @[Conditional.scala 39:67]
                    node _T_51 = bits(reset, 0, 0) @[Booth8Cycle.scala 77:13]
                    node _T_52 = eq(_T_51, UInt<1>("h00")) @[Booth8Cycle.scala 77:13]
                    when _T_52 : @[Booth8Cycle.scala 77:13]
                      printf(clock, UInt<1>(1), "    111: Do Nothing\n") @[Booth8Cycle.scala 77:13]
                      skip @[Booth8Cycle.scala 77:13]
                    skip @[Conditional.scala 39:67]
    node _T_53 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 81:26]
    node _T_54 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 81:39]
    node _T_55 = bits(accLower, 15, 2) @[Booth8Cycle.scala 81:62]
    node _T_56 = cat(accCalc, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_58 = cat(_T_57, _T_56) @[Cat.scala 29:58]
    accShift <= _T_58 @[Booth8Cycle.scala 81:12]
    node _T_59 = cat(accUpper, accLower) @[Cat.scala 29:58]
    io.product <= _T_59 @[Booth8Cycle.scala 89:15]
    io.finished <= UInt<1>("h00") @[Booth8Cycle.scala 90:15]
    when io.start : @[Booth8Cycle.scala 92:19]
      accUpper <= UInt<1>("h00") @[Booth8Cycle.scala 93:18]
      accLower <= UInt<1>("h00") @[Booth8Cycle.scala 94:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 95:14]
      node _T_60 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      mpl <= _T_60 @[Booth8Cycle.scala 96:14]
      iter <= UInt<1>("h00") @[Booth8Cycle.scala 97:14]
      node _T_61 = bits(reset, 0, 0) @[Booth8Cycle.scala 98:11]
      node _T_62 = eq(_T_61, UInt<1>("h00")) @[Booth8Cycle.scala 98:11]
      when _T_62 : @[Booth8Cycle.scala 98:11]
        printf(clock, UInt<1>(1), "** Test Initialized: mpl (with last-bit): %b  ||  mcd: %b\n", mpl, mcd) @[Booth8Cycle.scala 98:11]
        skip @[Booth8Cycle.scala 98:11]
      skip @[Booth8Cycle.scala 92:19]
    else : @[Booth8Cycle.scala 102:14]
      node _T_63 = lt(iter, UInt<4>("h08")) @[Booth8Cycle.scala 103:16]
      when _T_63 : @[Booth8Cycle.scala 103:23]
        node _T_64 = bits(reset, 0, 0) @[Booth8Cycle.scala 105:13]
        node _T_65 = eq(_T_64, UInt<1>("h00")) @[Booth8Cycle.scala 105:13]
        when _T_65 : @[Booth8Cycle.scala 105:13]
          printf(clock, UInt<1>(1), "Iteration: %d\n", iter) @[Booth8Cycle.scala 105:13]
          skip @[Booth8Cycle.scala 105:13]
        node _T_66 = bits(reset, 0, 0) @[Booth8Cycle.scala 106:13]
        node _T_67 = eq(_T_66, UInt<1>("h00")) @[Booth8Cycle.scala 106:13]
        when _T_67 : @[Booth8Cycle.scala 106:13]
          printf(clock, UInt<1>(1), "  Registered Values:\n") @[Booth8Cycle.scala 106:13]
          skip @[Booth8Cycle.scala 106:13]
        node _T_68 = bits(reset, 0, 0) @[Booth8Cycle.scala 107:13]
        node _T_69 = eq(_T_68, UInt<1>("h00")) @[Booth8Cycle.scala 107:13]
        when _T_69 : @[Booth8Cycle.scala 107:13]
          printf(clock, UInt<1>(1), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 107:13]
          skip @[Booth8Cycle.scala 107:13]
        node _T_70 = bits(reset, 0, 0) @[Booth8Cycle.scala 108:13]
        node _T_71 = eq(_T_70, UInt<1>("h00")) @[Booth8Cycle.scala 108:13]
        when _T_71 : @[Booth8Cycle.scala 108:13]
          printf(clock, UInt<1>(1), "     * AccUpper | AccLower: %b | %b\n", accUpper, accLower) @[Booth8Cycle.scala 108:13]
          skip @[Booth8Cycle.scala 108:13]
        node _T_72 = dshr(mpl, UInt<2>("h02")) @[Booth8Cycle.scala 109:23]
        mpl <= _T_72 @[Booth8Cycle.scala 109:16]
        node _T_73 = bits(accShift, 31, 16) @[Booth8Cycle.scala 110:27]
        accUpper <= _T_73 @[Booth8Cycle.scala 110:16]
        node _T_74 = bits(accShift, 15, 0) @[Booth8Cycle.scala 111:27]
        accLower <= _T_74 @[Booth8Cycle.scala 111:16]
        iter <= nextIter @[Booth8Cycle.scala 112:16]
        skip @[Booth8Cycle.scala 103:23]
      else : @[Booth8Cycle.scala 115:16]
        io.finished <= UInt<1>("h01") @[Booth8Cycle.scala 116:19]
        iter <= iter @[Booth8Cycle.scala 117:19]
        skip @[Booth8Cycle.scala 115:16]
      skip @[Booth8Cycle.scala 102:14]
    
