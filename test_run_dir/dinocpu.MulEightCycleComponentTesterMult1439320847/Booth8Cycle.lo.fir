circuit Booth8Cycle :
  module Booth8Cycle :
    input clock : Clock
    input reset : UInt<1>
    input io_multiplicand : UInt<16>
    input io_multiplier : UInt<16>
    input io_start : UInt<1>
    output io_finished : UInt<1>
    output io_product : UInt<32>
  
    reg accUpper : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accUpper) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accLower) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with :
      reset => (UInt<1>("h0"), mcd) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with :
      reset => (UInt<1>("h0"), mpl) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<4>, clock with :
      reset => (UInt<1>("h0"), iter) @[Booth8Cycle.scala 21:32]
    node _T = add(iter, UInt<1>("h1")) @[Booth8Cycle.scala 31:20]
    node _T_1 = tail(_T, 1) @[Booth8Cycle.scala 31:20]
    node _T_2 = bits(mpl, 2, 0) @[Booth8Cycle.scala 36:19]
    node operation = _T_2 @[Booth8Cycle.scala 28:23 Booth8Cycle.scala 36:13]
    node _T_3 = eq(UInt<1>("h0"), operation) @[Conditional.scala 37:30]
    node _T_4 = eq(UInt<1>("h1"), operation) @[Conditional.scala 37:30]
    node _T_5 = add(accUpper, mcd) @[Booth8Cycle.scala 44:27]
    node _T_6 = tail(_T_5, 1) @[Booth8Cycle.scala 44:27]
    node _T_7 = eq(UInt<2>("h2"), operation) @[Conditional.scala 37:30]
    node _T_8 = add(accUpper, mcd) @[Booth8Cycle.scala 48:27]
    node _T_9 = tail(_T_8, 1) @[Booth8Cycle.scala 48:27]
    node _T_10 = eq(UInt<2>("h3"), operation) @[Conditional.scala 37:30]
    node _T_11 = add(accUpper, mcd) @[Booth8Cycle.scala 52:27]
    node _T_12 = tail(_T_11, 1) @[Booth8Cycle.scala 52:27]
    node _T_13 = add(_T_12, mcd) @[Booth8Cycle.scala 52:33]
    node _T_14 = tail(_T_13, 1) @[Booth8Cycle.scala 52:33]
    node _T_15 = eq(UInt<3>("h4"), operation) @[Conditional.scala 37:30]
    node _T_16 = sub(accUpper, mcd) @[Booth8Cycle.scala 56:27]
    node _T_17 = tail(_T_16, 1) @[Booth8Cycle.scala 56:27]
    node _T_18 = sub(_T_17, mcd) @[Booth8Cycle.scala 56:33]
    node _T_19 = tail(_T_18, 1) @[Booth8Cycle.scala 56:33]
    node _T_20 = eq(UInt<3>("h5"), operation) @[Conditional.scala 37:30]
    node _T_21 = sub(accUpper, mcd) @[Booth8Cycle.scala 60:27]
    node _T_22 = tail(_T_21, 1) @[Booth8Cycle.scala 60:27]
    node _T_23 = eq(UInt<3>("h6"), operation) @[Conditional.scala 37:30]
    node _T_24 = sub(accUpper, mcd) @[Booth8Cycle.scala 64:27]
    node _T_25 = tail(_T_24, 1) @[Booth8Cycle.scala 64:27]
    node _T_26 = eq(UInt<3>("h7"), operation) @[Conditional.scala 37:30]
    node _GEN_0 = validif(_T_23, _T_25) @[Conditional.scala 39:67]
    node _GEN_1 = mux(_T_20, _T_22, _GEN_0) @[Conditional.scala 39:67]
    node _GEN_2 = mux(_T_15, _T_19, _GEN_1) @[Conditional.scala 39:67]
    node _GEN_3 = mux(_T_10, _T_14, _GEN_2) @[Conditional.scala 39:67]
    node _GEN_4 = mux(_T_7, _T_9, _GEN_3) @[Conditional.scala 39:67]
    node _GEN_5 = mux(_T_4, _T_6, _GEN_4) @[Conditional.scala 39:67]
    node _GEN_6 = validif(eq(_T_3, UInt<1>("h0")), _GEN_5) @[Conditional.scala 40:58]
    node accCalc = _GEN_6 @[Booth8Cycle.scala 26:23 Booth8Cycle.scala 44:15 Booth8Cycle.scala 48:15 Booth8Cycle.scala 52:15 Booth8Cycle.scala 56:15 Booth8Cycle.scala 60:15 Booth8Cycle.scala 64:15]
    node _T_27 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 73:26]
    node _T_28 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 73:39]
    node _T_29 = bits(accLower, 15, 2) @[Booth8Cycle.scala 73:62]
    node _T_30 = cat(accCalc, _T_29) @[Cat.scala 29:58]
    node _T_31 = cat(_T_27, _T_28) @[Cat.scala 29:58]
    node _T_32 = cat(_T_31, _T_30) @[Cat.scala 29:58]
    node _T_33 = cat(accUpper, accLower) @[Cat.scala 29:58]
    node _T_34 = cat(io_multiplier, UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_35 = bits(reset, 0, 0) @[Booth8Cycle.scala 90:11]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[Booth8Cycle.scala 90:11]
    node _T_37 = lt(iter, UInt<4>("h8")) @[Booth8Cycle.scala 95:16]
    node _T_38 = bits(reset, 0, 0) @[Booth8Cycle.scala 97:13]
    node _T_39 = eq(_T_38, UInt<1>("h0")) @[Booth8Cycle.scala 97:13]
    node _T_40 = bits(reset, 0, 0) @[Booth8Cycle.scala 98:13]
    node _T_41 = eq(_T_40, UInt<1>("h0")) @[Booth8Cycle.scala 98:13]
    node _T_42 = bits(reset, 0, 0) @[Booth8Cycle.scala 99:13]
    node _T_43 = eq(_T_42, UInt<1>("h0")) @[Booth8Cycle.scala 99:13]
    node _T_44 = bits(reset, 0, 0) @[Booth8Cycle.scala 100:13]
    node _T_45 = eq(_T_44, UInt<1>("h0")) @[Booth8Cycle.scala 100:13]
    node _T_46 = dshr(mpl, UInt<2>("h2")) @[Booth8Cycle.scala 101:23]
    node accShift = _T_32 @[Booth8Cycle.scala 27:23 Booth8Cycle.scala 73:12]
    node _T_47 = bits(accShift, 31, 16) @[Booth8Cycle.scala 102:27]
    node _T_48 = bits(accShift, 15, 0) @[Booth8Cycle.scala 103:27]
    node _GEN_7 = mux(_T_37, _T_46, mpl) @[Booth8Cycle.scala 95:23]
    node _GEN_8 = mux(_T_37, _T_47, accUpper) @[Booth8Cycle.scala 95:23]
    node _GEN_9 = mux(_T_37, _T_48, accLower) @[Booth8Cycle.scala 95:23]
    node nextIter = _T_1 @[Booth8Cycle.scala 25:23 Booth8Cycle.scala 31:12]
    node _GEN_10 = mux(_T_37, nextIter, iter) @[Booth8Cycle.scala 95:23]
    node _GEN_11 = mux(_T_37, UInt<1>("h0"), UInt<1>("h1")) @[Booth8Cycle.scala 95:23]
    node _GEN_12 = mux(io_start, UInt<1>("h0"), _GEN_8) @[Booth8Cycle.scala 84:19]
    node _GEN_13 = mux(io_start, UInt<1>("h0"), _GEN_9) @[Booth8Cycle.scala 84:19]
    node _GEN_14 = mux(io_start, io_multiplicand, mcd) @[Booth8Cycle.scala 84:19]
    node _GEN_15 = mux(io_start, _T_34, _GEN_7) @[Booth8Cycle.scala 84:19]
    node _GEN_16 = mux(io_start, UInt<1>("h0"), _GEN_10) @[Booth8Cycle.scala 84:19]
    node _GEN_17 = mux(io_start, UInt<1>("h0"), _GEN_11) @[Booth8Cycle.scala 84:19]
    io_finished <= _GEN_17 @[Booth8Cycle.scala 82:15 Booth8Cycle.scala 108:19]
    io_product <= _T_33 @[Booth8Cycle.scala 81:15]
    accUpper <= mux(reset, UInt<16>("h0"), _GEN_12) @[Booth8Cycle.scala 85:18 Booth8Cycle.scala 102:16]
    accLower <= mux(reset, UInt<16>("h0"), _GEN_13) @[Booth8Cycle.scala 86:14 Booth8Cycle.scala 103:16]
    mcd <= mux(reset, UInt<16>("h0"), _GEN_14) @[Booth8Cycle.scala 87:14]
    mpl <= mux(reset, UInt<17>("h0"), _GEN_15) @[Booth8Cycle.scala 88:14 Booth8Cycle.scala 101:16]
    iter <= mux(reset, UInt<4>("h0"), _GEN_16) @[Booth8Cycle.scala 89:14 Booth8Cycle.scala 104:16 Booth8Cycle.scala 109:19]
    printf(clock, and(and(and(UInt<1>("h1"), io_start), _T_36), UInt<1>("h1")), "** Test Initialized: mpl: %b  ||  mcd: %b\n", mpl, mcd) @[Booth8Cycle.scala 90:11]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_37), _T_39), UInt<1>("h1")), "Iteration: %d\n", iter) @[Booth8Cycle.scala 97:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_37), _T_41), UInt<1>("h1")), "  Registered Values:\n") @[Booth8Cycle.scala 98:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_37), _T_43), UInt<1>("h1")), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 99:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_37), _T_45), UInt<1>("h1")), "     * AccUpper | AccLower: %b | %b\n", accUpper, accLower) @[Booth8Cycle.scala 100:13]
