;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit PipelinedCPU : 
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, branch : UInt<1>, memread : UInt<1>, toreg : UInt<2>, add : UInt<1>, memwrite : UInt<1>, regwrite : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, jump : UInt<2>}
    
    node _T = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h033"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<2>("h03"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h023"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<7>("h063"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<6>("h037"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<5>("h017"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<7>("h06f"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<7>("h067"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h00"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h00"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h01"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h00"), _T_24) @[Lookup.scala 33:37]
    node signals_0 = mux(_T_1, UInt<1>("h00"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<1>("h00"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h00"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h01"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h00"), _T_32) @[Lookup.scala 33:37]
    node signals_1 = mux(_T_1, UInt<1>("h00"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<2>("h02"), UInt<2>("h03")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<2>("h02"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h00"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h00"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h00"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h01"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h00"), _T_40) @[Lookup.scala 33:37]
    node signals_2 = mux(_T_1, UInt<1>("h00"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h00"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h01"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h01"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h00"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h01"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h00"), _T_48) @[Lookup.scala 33:37]
    node signals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h00"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h00"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h00"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h01"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h00"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h00"), _T_56) @[Lookup.scala 33:37]
    node signals_4 = mux(_T_1, UInt<1>("h00"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h00"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h01"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<1>("h01"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h00"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<1>("h01"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<1>("h01"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h01"), _T_64) @[Lookup.scala 33:37]
    node signals_5 = mux(_T_1, UInt<1>("h00"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h01"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h01"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h01"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h01"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h01"), _T_72) @[Lookup.scala 33:37]
    node signals_6 = mux(_T_1, UInt<1>("h01"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<1>("h01"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<2>("h02"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h01"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h00"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h00"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h00"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<1>("h00"), _T_80) @[Lookup.scala 33:37]
    node signals_7 = mux(_T_1, UInt<1>("h00"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = mux(_T_17, UInt<2>("h03"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_83 = mux(_T_15, UInt<2>("h02"), _T_82) @[Lookup.scala 33:37]
    node _T_84 = mux(_T_13, UInt<1>("h00"), _T_83) @[Lookup.scala 33:37]
    node _T_85 = mux(_T_11, UInt<1>("h00"), _T_84) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_9, UInt<1>("h00"), _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_7, UInt<1>("h00"), _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_5, UInt<1>("h00"), _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_3, UInt<1>("h00"), _T_88) @[Lookup.scala 33:37]
    node signals_8 = mux(_T_1, UInt<1>("h00"), _T_89) @[Lookup.scala 33:37]
    io.branch <= signals_0 @[control.scala 65:13]
    io.memread <= signals_1 @[control.scala 66:14]
    io.toreg <= signals_2 @[control.scala 67:12]
    io.add <= signals_3 @[control.scala 68:10]
    io.memwrite <= signals_4 @[control.scala 69:15]
    io.immediate <= signals_5 @[control.scala 70:16]
    io.regwrite <= signals_6 @[control.scala 71:15]
    io.alusrc1 <= signals_7 @[control.scala 72:14]
    io.jump <= signals_8 @[control.scala 73:11]
    
  module BranchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip branch : UInt<1>, flip funct3 : UInt<3>, flip inputx : UInt<32>, flip inputy : UInt<32>, taken : UInt<1>}
    
    io.taken is invalid @[branch-control.scala 27:12]
    wire check : UInt<1> @[branch-control.scala 29:19]
    check is invalid @[branch-control.scala 30:9]
    node _T = eq(UInt<1>("h00"), io.funct3) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.inputx, io.inputy) @[branch-control.scala 33:40]
      check <= _T_1 @[branch-control.scala 33:26]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.funct3) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = neq(io.inputx, io.inputy) @[branch-control.scala 34:40]
        check <= _T_3 @[branch-control.scala 34:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<3>("h04"), io.funct3) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = asSInt(io.inputx) @[branch-control.scala 35:40]
          node _T_6 = asSInt(io.inputy) @[branch-control.scala 35:59]
          node _T_7 = lt(_T_5, _T_6) @[branch-control.scala 35:47]
          check <= _T_7 @[branch-control.scala 35:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<3>("h05"), io.funct3) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = asSInt(io.inputx) @[branch-control.scala 36:40]
            node _T_10 = asSInt(io.inputy) @[branch-control.scala 36:60]
            node _T_11 = geq(_T_9, _T_10) @[branch-control.scala 36:47]
            check <= _T_11 @[branch-control.scala 36:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h06"), io.funct3) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              node _T_13 = lt(io.inputx, io.inputy) @[branch-control.scala 37:40]
              check <= _T_13 @[branch-control.scala 37:26]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h07"), io.funct3) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = geq(io.inputx, io.inputy) @[branch-control.scala 38:40]
                check <= _T_15 @[branch-control.scala 38:26]
                skip @[Conditional.scala 39:67]
    node _T_16 = and(check, io.branch) @[branch-control.scala 41:21]
    io.taken <= _T_16 @[branch-control.scala 41:12]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip readreg1 : UInt<5>, flip readreg2 : UInt<5>, flip writereg : UInt<5>, flip writedata : UInt<32>, flip wen : UInt<1>, readdata1 : UInt<32>, readdata2 : UInt<32>}
    
    wire _T : UInt<32>[32] @[register-file.scala 50:29]
    _T[0] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[1] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[2] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[3] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[4] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[5] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[6] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[7] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[8] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[9] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[10] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[11] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[12] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[13] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[14] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[15] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[16] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[17] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[18] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[19] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[20] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[21] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[22] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[23] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[24] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[25] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[26] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[27] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[28] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[29] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[30] <= UInt<32>("h00") @[register-file.scala 50:29]
    _T[31] <= UInt<32>("h00") @[register-file.scala 50:29]
    reg regs : UInt<32>[32], clock with : (reset => (reset, _T)) @[register-file.scala 50:21]
    when io.wen : @[register-file.scala 53:17]
      regs[io.writereg] <= io.writedata @[register-file.scala 54:23]
      skip @[register-file.scala 53:17]
    io.readdata1 <= regs[io.readreg1] @[register-file.scala 59:16]
    io.readdata2 <= regs[io.readreg2] @[register-file.scala 60:16]
    node _T_1 = eq(io.readreg1, io.writereg) @[register-file.scala 64:23]
    node _T_2 = and(_T_1, io.wen) @[register-file.scala 64:39]
    when _T_2 : @[register-file.scala 64:50]
      io.readdata1 <= io.writedata @[register-file.scala 65:20]
      skip @[register-file.scala 64:50]
    else : @[register-file.scala 66:57]
      node _T_3 = eq(io.readreg2, io.writereg) @[register-file.scala 66:30]
      node _T_4 = and(_T_3, io.wen) @[register-file.scala 66:46]
      when _T_4 : @[register-file.scala 66:57]
        io.readdata2 <= io.writedata @[register-file.scala 67:20]
        skip @[register-file.scala 66:57]
    
  module ALUControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip add : UInt<1>, flip immediate : UInt<1>, flip funct7 : UInt<7>, flip funct3 : UInt<3>, startMult : UInt<1>, multHold : UInt<1>, multFinished : UInt<1>, operation : UInt<4>}
    
    reg mCount : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[alucontrol.scala 33:23]
    io.operation <= UInt<4>("h0f") @[alucontrol.scala 36:19]
    io.startMult <= UInt<1>("h00") @[alucontrol.scala 37:19]
    io.multFinished <= UInt<1>("h00") @[alucontrol.scala 38:19]
    io.multHold <= UInt<1>("h00") @[alucontrol.scala 39:19]
    when io.add : @[alucontrol.scala 41:17]
      io.operation <= UInt<2>("h02") @[alucontrol.scala 42:18]
      skip @[alucontrol.scala 41:17]
    else : @[alucontrol.scala 43:16]
      node _T = eq(UInt<1>("h00"), io.funct3) @[Conditional.scala 37:30]
      when _T : @[Conditional.scala 40:58]
        node _T_1 = eq(io.funct7, UInt<1>("h00")) @[alucontrol.scala 46:41]
        node _T_2 = or(io.immediate, _T_1) @[alucontrol.scala 46:28]
        when _T_2 : @[alucontrol.scala 46:59]
          io.operation <= UInt<2>("h02") @[alucontrol.scala 47:24]
          skip @[alucontrol.scala 46:59]
        else : @[alucontrol.scala 48:50]
          node _T_3 = eq(io.funct7, UInt<1>("h01")) @[alucontrol.scala 48:32]
          when _T_3 : @[alucontrol.scala 48:50]
            io.operation <= UInt<4>("h0f") @[alucontrol.scala 50:24]
            io.multHold <= UInt<1>("h01") @[alucontrol.scala 51:24]
            io.startMult <= UInt<1>("h00") @[alucontrol.scala 52:24]
            node _T_4 = eq(mCount, UInt<1>("h00")) @[alucontrol.scala 53:24]
            when _T_4 : @[alucontrol.scala 53:33]
              io.startMult <= UInt<1>("h01") @[alucontrol.scala 54:26]
              node _T_5 = add(mCount, UInt<1>("h01")) @[alucontrol.scala 55:36]
              node _T_6 = tail(_T_5, 1) @[alucontrol.scala 55:36]
              mCount <= _T_6 @[alucontrol.scala 55:26]
              skip @[alucontrol.scala 53:33]
            else : @[alucontrol.scala 58:38]
              node _T_7 = eq(mCount, UInt<3>("h07")) @[alucontrol.scala 58:29]
              when _T_7 : @[alucontrol.scala 58:38]
                io.multHold <= UInt<1>("h00") @[alucontrol.scala 59:29]
                io.multFinished <= UInt<1>("h01") @[alucontrol.scala 60:29]
                mCount <= UInt<1>("h00") @[alucontrol.scala 61:29]
                skip @[alucontrol.scala 58:38]
              else : @[alucontrol.scala 64:22]
                node _T_8 = add(mCount, UInt<1>("h01")) @[alucontrol.scala 65:30]
                node _T_9 = tail(_T_8, 1) @[alucontrol.scala 65:30]
                mCount <= _T_9 @[alucontrol.scala 65:20]
                skip @[alucontrol.scala 64:22]
            skip @[alucontrol.scala 48:50]
          else : @[alucontrol.scala 68:22]
            io.operation <= UInt<2>("h03") @[alucontrol.scala 69:24]
            skip @[alucontrol.scala 68:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_10 = eq(UInt<1>("h01"), io.funct3) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 39:67]
          io.operation <= UInt<3>("h06") @[alucontrol.scala 72:36]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<2>("h02"), io.funct3) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            io.operation <= UInt<3>("h04") @[alucontrol.scala 73:36]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<2>("h03"), io.funct3) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              io.operation <= UInt<3>("h05") @[alucontrol.scala 74:36]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<3>("h04"), io.funct3) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.operation <= UInt<4>("h09") @[alucontrol.scala 75:36]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_14 = eq(UInt<3>("h05"), io.funct3) @[Conditional.scala 37:30]
                when _T_14 : @[Conditional.scala 39:67]
                  node _T_15 = eq(io.funct7, UInt<1>("h00")) @[alucontrol.scala 77:25]
                  when _T_15 : @[alucontrol.scala 77:43]
                    io.operation <= UInt<3>("h07") @[alucontrol.scala 78:24]
                    skip @[alucontrol.scala 77:43]
                  else : @[alucontrol.scala 79:22]
                    io.operation <= UInt<4>("h08") @[alucontrol.scala 80:24]
                    skip @[alucontrol.scala 79:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_16 = eq(UInt<3>("h06"), io.funct3) @[Conditional.scala 37:30]
                  when _T_16 : @[Conditional.scala 39:67]
                    io.operation <= UInt<1>("h01") @[alucontrol.scala 83:36]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_17 = eq(UInt<3>("h07"), io.funct3) @[Conditional.scala 37:30]
                    when _T_17 : @[Conditional.scala 39:67]
                      io.operation <= UInt<1>("h00") @[alucontrol.scala 84:36]
                      skip @[Conditional.scala 39:67]
      skip @[alucontrol.scala 43:16]
    
  module Booth8Cycle : 
    input clock : Clock
    input reset : Reset
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, flip finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Booth8Cycle.scala 21:26]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 25:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 26:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 27:23]
    wire nextMPL : UInt<17> @[Booth8Cycle.scala 28:23]
    wire accumulatorUpper : UInt<16> @[Booth8Cycle.scala 30:31]
    wire calcMultiplicand : UInt<16> @[Booth8Cycle.scala 31:31]
    wire first_upAcc : UInt<16> @[Booth8Cycle.scala 32:31]
    wire first_mcd : UInt<16> @[Booth8Cycle.scala 33:31]
    wire first_op : UInt<3> @[Booth8Cycle.scala 34:31]
    accCalc is invalid @[Booth8Cycle.scala 37:13]
    accShift is invalid @[Booth8Cycle.scala 38:13]
    operation is invalid @[Booth8Cycle.scala 39:13]
    nextMPL is invalid @[Booth8Cycle.scala 40:13]
    first_upAcc <= UInt<1>("h00") @[Booth8Cycle.scala 44:16]
    first_mcd <= io.multiplicand @[Booth8Cycle.scala 45:16]
    node _T = bits(io.multiplier, 1, 0) @[Booth8Cycle.scala 46:36]
    node _T_1 = cat(_T, UInt<1>("h00")) @[Cat.scala 29:58]
    first_op <= _T_1 @[Booth8Cycle.scala 46:16]
    when io.start : @[Booth8Cycle.scala 49:19]
      node _T_2 = asUInt(reset) @[Booth8Cycle.scala 50:11]
      node _T_3 = eq(_T_2, UInt<1>("h00")) @[Booth8Cycle.scala 50:11]
      when _T_3 : @[Booth8Cycle.scala 50:11]
        printf(clock, UInt<1>(1), "  USING ITER 0 OPERANDS...\n") @[Booth8Cycle.scala 50:11]
        skip @[Booth8Cycle.scala 50:11]
      operation <= first_op @[Booth8Cycle.scala 51:22]
      accumulatorUpper <= first_upAcc @[Booth8Cycle.scala 52:22]
      calcMultiplicand <= first_mcd @[Booth8Cycle.scala 53:22]
      skip @[Booth8Cycle.scala 49:19]
    else : @[Booth8Cycle.scala 55:14]
      node _T_4 = asUInt(reset) @[Booth8Cycle.scala 56:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[Booth8Cycle.scala 56:11]
      when _T_5 : @[Booth8Cycle.scala 56:11]
        printf(clock, UInt<1>(1), "  USING NORM OPERANDS...\n") @[Booth8Cycle.scala 56:11]
        skip @[Booth8Cycle.scala 56:11]
      node _T_6 = bits(mpl, 2, 0) @[Booth8Cycle.scala 57:28]
      operation <= _T_6 @[Booth8Cycle.scala 57:22]
      accumulatorUpper <= accUpper @[Booth8Cycle.scala 58:22]
      calcMultiplicand <= mcd @[Booth8Cycle.scala 59:22]
      skip @[Booth8Cycle.scala 55:14]
    node _T_7 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_7 : @[Conditional.scala 40:58]
      accCalc <= accumulatorUpper @[Booth8Cycle.scala 65:15]
      node _T_8 = asUInt(reset) @[Booth8Cycle.scala 66:13]
      node _T_9 = eq(_T_8, UInt<1>("h00")) @[Booth8Cycle.scala 66:13]
      when _T_9 : @[Booth8Cycle.scala 66:13]
        printf(clock, UInt<1>(1), "    000: Do Nothing\n") @[Booth8Cycle.scala 66:13]
        skip @[Booth8Cycle.scala 66:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_10 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_10 : @[Conditional.scala 39:67]
        node _T_11 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 69:35]
        node _T_12 = tail(_T_11, 1) @[Booth8Cycle.scala 69:35]
        accCalc <= _T_12 @[Booth8Cycle.scala 69:15]
        node _T_13 = asUInt(reset) @[Booth8Cycle.scala 70:13]
        node _T_14 = eq(_T_13, UInt<1>("h00")) @[Booth8Cycle.scala 70:13]
        when _T_14 : @[Booth8Cycle.scala 70:13]
          printf(clock, UInt<1>(1), "    001: Add Multiplicand\n") @[Booth8Cycle.scala 70:13]
          skip @[Booth8Cycle.scala 70:13]
        node _T_15 = asUInt(reset) @[Booth8Cycle.scala 71:13]
        node _T_16 = eq(_T_15, UInt<1>("h00")) @[Booth8Cycle.scala 71:13]
        when _T_16 : @[Booth8Cycle.scala 71:13]
          printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 71:13]
          skip @[Booth8Cycle.scala 71:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_17 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_17 : @[Conditional.scala 39:67]
          node _T_18 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 74:35]
          node _T_19 = tail(_T_18, 1) @[Booth8Cycle.scala 74:35]
          accCalc <= _T_19 @[Booth8Cycle.scala 74:15]
          node _T_20 = asUInt(reset) @[Booth8Cycle.scala 75:13]
          node _T_21 = eq(_T_20, UInt<1>("h00")) @[Booth8Cycle.scala 75:13]
          when _T_21 : @[Booth8Cycle.scala 75:13]
            printf(clock, UInt<1>(1), "    010: Add Multiplicand\n") @[Booth8Cycle.scala 75:13]
            skip @[Booth8Cycle.scala 75:13]
          node _T_22 = asUInt(reset) @[Booth8Cycle.scala 76:13]
          node _T_23 = eq(_T_22, UInt<1>("h00")) @[Booth8Cycle.scala 76:13]
          when _T_23 : @[Booth8Cycle.scala 76:13]
            printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 76:13]
            skip @[Booth8Cycle.scala 76:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_24 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_24 : @[Conditional.scala 39:67]
            node _T_25 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 79:55]
            node _T_26 = add(accumulatorUpper, _T_25) @[Booth8Cycle.scala 79:35]
            node _T_27 = tail(_T_26, 1) @[Booth8Cycle.scala 79:35]
            accCalc <= _T_27 @[Booth8Cycle.scala 79:15]
            node _T_28 = asUInt(reset) @[Booth8Cycle.scala 80:13]
            node _T_29 = eq(_T_28, UInt<1>("h00")) @[Booth8Cycle.scala 80:13]
            when _T_29 : @[Booth8Cycle.scala 80:13]
              printf(clock, UInt<1>(1), "    011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 80:13]
              skip @[Booth8Cycle.scala 80:13]
            node _T_30 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 81:62]
            node _T_31 = asUInt(reset) @[Booth8Cycle.scala 81:13]
            node _T_32 = eq(_T_31, UInt<1>("h00")) @[Booth8Cycle.scala 81:13]
            when _T_32 : @[Booth8Cycle.scala 81:13]
              printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", _T_30, accumulatorUpper) @[Booth8Cycle.scala 81:13]
              skip @[Booth8Cycle.scala 81:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_33 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_33 : @[Conditional.scala 39:67]
              node _T_34 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 84:55]
              node _T_35 = sub(accumulatorUpper, _T_34) @[Booth8Cycle.scala 84:35]
              node _T_36 = tail(_T_35, 1) @[Booth8Cycle.scala 84:35]
              accCalc <= _T_36 @[Booth8Cycle.scala 84:15]
              node _T_37 = asUInt(reset) @[Booth8Cycle.scala 85:13]
              node _T_38 = eq(_T_37, UInt<1>("h00")) @[Booth8Cycle.scala 85:13]
              when _T_38 : @[Booth8Cycle.scala 85:13]
                printf(clock, UInt<1>(1), "    100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 85:13]
                skip @[Booth8Cycle.scala 85:13]
              node _T_39 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 86:69]
              node _T_40 = asUInt(reset) @[Booth8Cycle.scala 86:13]
              node _T_41 = eq(_T_40, UInt<1>("h00")) @[Booth8Cycle.scala 86:13]
              when _T_41 : @[Booth8Cycle.scala 86:13]
                printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", _T_39, accumulatorUpper) @[Booth8Cycle.scala 86:13]
                skip @[Booth8Cycle.scala 86:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_42 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_42 : @[Conditional.scala 39:67]
                node _T_43 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 89:35]
                node _T_44 = tail(_T_43, 1) @[Booth8Cycle.scala 89:35]
                accCalc <= _T_44 @[Booth8Cycle.scala 89:15]
                node _T_45 = asUInt(reset) @[Booth8Cycle.scala 90:13]
                node _T_46 = eq(_T_45, UInt<1>("h00")) @[Booth8Cycle.scala 90:13]
                when _T_46 : @[Booth8Cycle.scala 90:13]
                  printf(clock, UInt<1>(1), "    101: Subtract Multiplicand\n") @[Booth8Cycle.scala 90:13]
                  skip @[Booth8Cycle.scala 90:13]
                node _T_47 = asUInt(reset) @[Booth8Cycle.scala 91:13]
                node _T_48 = eq(_T_47, UInt<1>("h00")) @[Booth8Cycle.scala 91:13]
                when _T_48 : @[Booth8Cycle.scala 91:13]
                  printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 91:13]
                  skip @[Booth8Cycle.scala 91:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_49 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_49 : @[Conditional.scala 39:67]
                  node _T_50 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 94:35]
                  node _T_51 = tail(_T_50, 1) @[Booth8Cycle.scala 94:35]
                  accCalc <= _T_51 @[Booth8Cycle.scala 94:15]
                  node _T_52 = asUInt(reset) @[Booth8Cycle.scala 95:13]
                  node _T_53 = eq(_T_52, UInt<1>("h00")) @[Booth8Cycle.scala 95:13]
                  when _T_53 : @[Booth8Cycle.scala 95:13]
                    printf(clock, UInt<1>(1), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 95:13]
                    skip @[Booth8Cycle.scala 95:13]
                  node _T_54 = asUInt(reset) @[Booth8Cycle.scala 96:13]
                  node _T_55 = eq(_T_54, UInt<1>("h00")) @[Booth8Cycle.scala 96:13]
                  when _T_55 : @[Booth8Cycle.scala 96:13]
                    printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", calcMultiplicand, accumulatorUpper) @[Booth8Cycle.scala 96:13]
                    skip @[Booth8Cycle.scala 96:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_56 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_56 : @[Conditional.scala 39:67]
                    accCalc <= accumulatorUpper @[Booth8Cycle.scala 100:15]
                    node _T_57 = asUInt(reset) @[Booth8Cycle.scala 101:13]
                    node _T_58 = eq(_T_57, UInt<1>("h00")) @[Booth8Cycle.scala 101:13]
                    when _T_58 : @[Booth8Cycle.scala 101:13]
                      printf(clock, UInt<1>(1), "    111: Do Nothing\n") @[Booth8Cycle.scala 101:13]
                      skip @[Booth8Cycle.scala 101:13]
                    skip @[Conditional.scala 39:67]
    when io.start : @[Booth8Cycle.scala 105:19]
      node _T_59 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:28]
      node _T_60 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:41]
      node _T_61 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_62 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_63 = cat(_T_62, _T_61) @[Cat.scala 29:58]
      node _T_64 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_65 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_66 = cat(_T_65, _T_64) @[Cat.scala 29:58]
      node _T_67 = cat(_T_66, _T_63) @[Cat.scala 29:58]
      node _T_68 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_69 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_70 = cat(_T_69, _T_68) @[Cat.scala 29:58]
      node _T_71 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_72 = cat(_T_59, _T_60) @[Cat.scala 29:58]
      node _T_73 = cat(_T_72, accCalc) @[Cat.scala 29:58]
      node _T_74 = cat(_T_73, _T_71) @[Cat.scala 29:58]
      node _T_75 = cat(_T_74, _T_70) @[Cat.scala 29:58]
      node _T_76 = cat(_T_75, _T_67) @[Cat.scala 29:58]
      accShift <= _T_76 @[Booth8Cycle.scala 106:14]
      skip @[Booth8Cycle.scala 105:19]
    else : @[Booth8Cycle.scala 108:14]
      node _T_77 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:28]
      node _T_78 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:41]
      node _T_79 = bits(accLower, 15, 2) @[Booth8Cycle.scala 109:64]
      node _T_80 = cat(accCalc, _T_79) @[Cat.scala 29:58]
      node _T_81 = cat(_T_77, _T_78) @[Cat.scala 29:58]
      node _T_82 = cat(_T_81, _T_80) @[Cat.scala 29:58]
      accShift <= _T_82 @[Booth8Cycle.scala 109:14]
      skip @[Booth8Cycle.scala 108:14]
    node _T_83 = dshr(mpl, UInt<2>("h02")) @[Booth8Cycle.scala 113:19]
    nextMPL <= _T_83 @[Booth8Cycle.scala 113:12]
    io.product is invalid @[Booth8Cycle.scala 120:15]
    when io.start : @[Booth8Cycle.scala 122:19]
      node _T_84 = bits(accShift, 31, 16) @[Booth8Cycle.scala 123:79]
      node _T_85 = bits(accShift, 15, 0) @[Booth8Cycle.scala 123:97]
      node _T_86 = asUInt(reset) @[Booth8Cycle.scala 123:11]
      node _T_87 = eq(_T_86, UInt<1>("h00")) @[Booth8Cycle.scala 123:11]
      when _T_87 : @[Booth8Cycle.scala 123:11]
        printf(clock, UInt<1>(1), "REGISTERS INITIALIZED  -- %b %b  ||  mcd: %b  mpl: %b\n", _T_84, _T_85, io.multiplicand, io.multiplier) @[Booth8Cycle.scala 123:11]
        skip @[Booth8Cycle.scala 123:11]
      node _T_88 = bits(accShift, 31, 16) @[Booth8Cycle.scala 124:25]
      accUpper <= _T_88 @[Booth8Cycle.scala 124:14]
      node _T_89 = bits(accShift, 15, 0) @[Booth8Cycle.scala 125:25]
      accLower <= _T_89 @[Booth8Cycle.scala 125:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 126:14]
      node _T_90 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_91 = dshr(_T_90, UInt<2>("h02")) @[Booth8Cycle.scala 127:41]
      mpl <= _T_91 @[Booth8Cycle.scala 127:14]
      skip @[Booth8Cycle.scala 122:19]
    else : @[Booth8Cycle.scala 131:14]
      node _T_92 = asUInt(reset) @[Booth8Cycle.scala 132:11]
      node _T_93 = eq(_T_92, UInt<1>("h00")) @[Booth8Cycle.scala 132:11]
      when _T_93 : @[Booth8Cycle.scala 132:11]
        printf(clock, UInt<1>(1), "Operation Information: \n") @[Booth8Cycle.scala 132:11]
        skip @[Booth8Cycle.scala 132:11]
      node _T_94 = not(io.finished) @[Booth8Cycle.scala 133:11]
      when _T_94 : @[Booth8Cycle.scala 133:25]
        node _T_95 = asUInt(reset) @[Booth8Cycle.scala 135:13]
        node _T_96 = eq(_T_95, UInt<1>("h00")) @[Booth8Cycle.scala 135:13]
        when _T_96 : @[Booth8Cycle.scala 135:13]
          printf(clock, UInt<1>(1), "  Registered Values:\n") @[Booth8Cycle.scala 135:13]
          skip @[Booth8Cycle.scala 135:13]
        node _T_97 = asUInt(reset) @[Booth8Cycle.scala 136:13]
        node _T_98 = eq(_T_97, UInt<1>("h00")) @[Booth8Cycle.scala 136:13]
        when _T_98 : @[Booth8Cycle.scala 136:13]
          printf(clock, UInt<1>(1), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 136:13]
          skip @[Booth8Cycle.scala 136:13]
        node _T_99 = asUInt(reset) @[Booth8Cycle.scala 137:13]
        node _T_100 = eq(_T_99, UInt<1>("h00")) @[Booth8Cycle.scala 137:13]
        when _T_100 : @[Booth8Cycle.scala 137:13]
          printf(clock, UInt<1>(1), "     * AccUpper: %d | AccLower: %d \n", accUpper, accLower) @[Booth8Cycle.scala 137:13]
          skip @[Booth8Cycle.scala 137:13]
        mcd <= mcd @[Booth8Cycle.scala 139:16]
        mpl <= nextMPL @[Booth8Cycle.scala 140:16]
        node _T_101 = bits(accShift, 31, 16) @[Booth8Cycle.scala 141:27]
        accUpper <= _T_101 @[Booth8Cycle.scala 141:16]
        node _T_102 = bits(accShift, 15, 0) @[Booth8Cycle.scala 142:27]
        accLower <= _T_102 @[Booth8Cycle.scala 142:16]
        skip @[Booth8Cycle.scala 133:25]
      else : @[Booth8Cycle.scala 145:16]
        io.product <= accShift @[Booth8Cycle.scala 146:18]
        skip @[Booth8Cycle.scala 145:16]
      skip @[Booth8Cycle.scala 131:14]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip operation : UInt<4>, flip inputx : UInt<32>, flip inputy : UInt<32>, flip multStart : UInt<1>, flip multFinished : UInt<1>, result : UInt<32>}
    
    inst multUnit of Booth8Cycle @[alu.scala 27:24]
    multUnit.clock <= clock
    multUnit.reset <= reset
    multUnit.io.multiplicand <= io.inputx @[alu.scala 29:28]
    multUnit.io.multiplier <= io.inputy @[alu.scala 30:28]
    multUnit.io.start <= io.multStart @[alu.scala 31:28]
    multUnit.io.finished <= io.multFinished @[alu.scala 32:24]
    reg mstallReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[alu.scala 34:26]
    io.result <= UInt<1>("h00") @[alu.scala 37:16]
    node _T = eq(UInt<1>("h00"), io.operation) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = and(io.inputx, io.inputy) @[alu.scala 41:30]
      io.result <= _T_1 @[alu.scala 41:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.operation) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = or(io.inputx, io.inputy) @[alu.scala 44:30]
        io.result <= _T_3 @[alu.scala 44:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<2>("h02"), io.operation) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = add(io.inputx, io.inputy) @[alu.scala 47:30]
          node _T_6 = tail(_T_5, 1) @[alu.scala 47:30]
          io.result <= _T_6 @[alu.scala 47:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_7 = eq(UInt<2>("h03"), io.operation) @[Conditional.scala 37:30]
          when _T_7 : @[Conditional.scala 39:67]
            node _T_8 = sub(io.inputx, io.inputy) @[alu.scala 50:30]
            node _T_9 = tail(_T_8, 1) @[alu.scala 50:30]
            io.result <= _T_9 @[alu.scala 50:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<3>("h04"), io.operation) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              node _T_11 = asSInt(io.inputx) @[alu.scala 53:31]
              node _T_12 = asSInt(io.inputy) @[alu.scala 53:50]
              node _T_13 = lt(_T_11, _T_12) @[alu.scala 53:38]
              io.result <= _T_13 @[alu.scala 53:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h05"), io.operation) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = lt(io.inputx, io.inputy) @[alu.scala 56:31]
                io.result <= _T_15 @[alu.scala 56:17]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_16 = eq(UInt<3>("h06"), io.operation) @[Conditional.scala 37:30]
                when _T_16 : @[Conditional.scala 39:67]
                  node _T_17 = bits(io.inputy, 4, 0) @[alu.scala 59:42]
                  node _T_18 = dshl(io.inputx, _T_17) @[alu.scala 59:30]
                  io.result <= _T_18 @[alu.scala 59:17]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_19 = eq(UInt<3>("h07"), io.operation) @[Conditional.scala 37:30]
                  when _T_19 : @[Conditional.scala 39:67]
                    node _T_20 = bits(io.inputy, 4, 0) @[alu.scala 62:42]
                    node _T_21 = dshr(io.inputx, _T_20) @[alu.scala 62:30]
                    io.result <= _T_21 @[alu.scala 62:17]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_22 = eq(UInt<4>("h08"), io.operation) @[Conditional.scala 37:30]
                    when _T_22 : @[Conditional.scala 39:67]
                      node _T_23 = asSInt(io.inputx) @[alu.scala 65:31]
                      node _T_24 = bits(io.inputy, 4, 0) @[alu.scala 65:50]
                      node _T_25 = dshr(_T_23, _T_24) @[alu.scala 65:38]
                      node _T_26 = asUInt(_T_25) @[alu.scala 65:57]
                      io.result <= _T_26 @[alu.scala 65:17]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_27 = eq(UInt<4>("h09"), io.operation) @[Conditional.scala 37:30]
                      when _T_27 : @[Conditional.scala 39:67]
                        node _T_28 = xor(io.inputx, io.inputy) @[alu.scala 68:30]
                        io.result <= _T_28 @[alu.scala 68:17]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_29 = eq(UInt<4>("h0a"), io.operation) @[Conditional.scala 37:30]
                        when _T_29 : @[Conditional.scala 39:67]
                          node _T_30 = or(io.inputx, io.inputy) @[alu.scala 71:32]
                          node _T_31 = not(_T_30) @[alu.scala 71:20]
                          io.result <= _T_31 @[alu.scala 71:17]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_32 = eq(UInt<4>("h0f"), io.operation) @[Conditional.scala 37:30]
                          when _T_32 : @[Conditional.scala 39:67]
                            io.result <= multUnit.io.product @[alu.scala 74:17]
                            skip @[Conditional.scala 39:67]
    
  module ImmediateGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, sextImm : UInt<32>}
    
    io.sextImm <= UInt<1>("h00") @[helpers.scala 42:14]
    node opcode = bits(io.instruction, 6, 0) @[helpers.scala 44:30]
    node _T = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = bits(io.instruction, 31, 12) @[helpers.scala 47:31]
      node _T_2 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
      node _T_3 = cat(_T_1, _T_2) @[Cat.scala 29:58]
      io.sextImm <= _T_3 @[helpers.scala 48:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<5>("h017"), opcode) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = bits(io.instruction, 31, 12) @[helpers.scala 51:31]
        node _T_6 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _T_7 = cat(_T_5, _T_6) @[Cat.scala 29:58]
        io.sextImm <= _T_7 @[helpers.scala 52:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<7>("h06f"), opcode) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = bits(io.instruction, 31, 31) @[helpers.scala 55:35]
          node _T_10 = bits(io.instruction, 19, 12) @[helpers.scala 55:55]
          node _T_11 = bits(io.instruction, 20, 20) @[helpers.scala 56:35]
          node _T_12 = bits(io.instruction, 30, 21) @[helpers.scala 56:55]
          node _T_13 = cat(_T_11, _T_12) @[Cat.scala 29:58]
          node _T_14 = cat(_T_9, _T_10) @[Cat.scala 29:58]
          node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
          node _T_16 = bits(_T_15, 19, 19) @[helpers.scala 57:36]
          node _T_17 = bits(_T_16, 0, 0) @[Bitwise.scala 72:15]
          node _T_18 = mux(_T_17, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
          node _T_19 = cat(_T_18, _T_15) @[Cat.scala 29:58]
          node _T_20 = cat(_T_19, UInt<1>("h00")) @[Cat.scala 29:58]
          io.sextImm <= _T_20 @[helpers.scala 57:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_21 = eq(UInt<7>("h067"), opcode) @[Conditional.scala 37:30]
          when _T_21 : @[Conditional.scala 39:67]
            node _T_22 = bits(io.instruction, 31, 20) @[helpers.scala 60:31]
            node _T_23 = bits(_T_22, 11, 11) @[helpers.scala 61:36]
            node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
            node _T_25 = mux(_T_24, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node _T_26 = cat(_T_25, _T_22) @[Cat.scala 29:58]
            io.sextImm <= _T_26 @[helpers.scala 61:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_27 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
            when _T_27 : @[Conditional.scala 39:67]
              node _T_28 = bits(io.instruction, 31, 31) @[helpers.scala 64:35]
              node _T_29 = bits(io.instruction, 7, 7) @[helpers.scala 64:55]
              node _T_30 = bits(io.instruction, 30, 25) @[helpers.scala 65:35]
              node _T_31 = bits(io.instruction, 11, 8) @[helpers.scala 65:58]
              node _T_32 = cat(_T_30, _T_31) @[Cat.scala 29:58]
              node _T_33 = cat(_T_28, _T_29) @[Cat.scala 29:58]
              node _T_34 = cat(_T_33, _T_32) @[Cat.scala 29:58]
              node _T_35 = bits(_T_34, 11, 11) @[helpers.scala 66:37]
              node _T_36 = bits(_T_35, 0, 0) @[Bitwise.scala 72:15]
              node _T_37 = mux(_T_36, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node _T_38 = cat(_T_37, _T_34) @[Cat.scala 29:58]
              node _T_39 = cat(_T_38, UInt<1>("h00")) @[Cat.scala 29:58]
              io.sextImm <= _T_39 @[helpers.scala 66:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_40 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
              when _T_40 : @[Conditional.scala 39:67]
                node _T_41 = bits(io.instruction, 31, 20) @[helpers.scala 69:31]
                node _T_42 = bits(_T_41, 11, 11) @[helpers.scala 70:36]
                node _T_43 = bits(_T_42, 0, 0) @[Bitwise.scala 72:15]
                node _T_44 = mux(_T_43, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                node _T_45 = cat(_T_44, _T_41) @[Cat.scala 29:58]
                io.sextImm <= _T_45 @[helpers.scala 70:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_46 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
                when _T_46 : @[Conditional.scala 39:67]
                  node _T_47 = bits(io.instruction, 31, 25) @[helpers.scala 73:35]
                  node _T_48 = bits(io.instruction, 11, 7) @[helpers.scala 73:59]
                  node _T_49 = cat(_T_47, _T_48) @[Cat.scala 29:58]
                  node _T_50 = bits(_T_49, 11, 11) @[helpers.scala 74:36]
                  node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
                  node _T_52 = mux(_T_51, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                  node _T_53 = cat(_T_52, _T_49) @[Cat.scala 29:58]
                  io.sextImm <= _T_53 @[helpers.scala 74:18]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_54 = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
                  when _T_54 : @[Conditional.scala 39:67]
                    node _T_55 = bits(io.instruction, 31, 20) @[helpers.scala 77:31]
                    node _T_56 = bits(_T_55, 11, 11) @[helpers.scala 78:36]
                    node _T_57 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
                    node _T_58 = mux(_T_57, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node _T_59 = cat(_T_58, _T_55) @[Cat.scala 29:58]
                    io.sextImm <= _T_59 @[helpers.scala 78:18]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_60 = eq(UInt<7>("h073"), opcode) @[Conditional.scala 37:30]
                    when _T_60 : @[Conditional.scala 39:67]
                      node _T_61 = mux(UInt<1>("h00"), UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 72:12]
                      node _T_62 = bits(io.instruction, 19, 15) @[helpers.scala 81:53]
                      node _T_63 = cat(_T_61, _T_62) @[Cat.scala 29:58]
                      io.sextImm <= _T_63 @[helpers.scala 81:18]
                      skip @[Conditional.scala 39:67]
    
  module Adder : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module Adder_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module ForwardingUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip exmemrd : UInt<5>, flip exmemrw : UInt<1>, flip memwbrd : UInt<5>, flip memwbrw : UInt<1>, forwardA : UInt<2>, forwardB : UInt<2>}
    
    node _T = eq(io.rs1, io.exmemrd) @[forwarding.scala 39:16]
    node _T_1 = neq(io.exmemrd, UInt<1>("h00")) @[forwarding.scala 39:45]
    node _T_2 = and(_T, _T_1) @[forwarding.scala 39:31]
    node _T_3 = and(_T_2, io.exmemrw) @[forwarding.scala 39:53]
    when _T_3 : @[forwarding.scala 39:68]
      io.forwardA <= UInt<1>("h01") @[forwarding.scala 40:17]
      skip @[forwarding.scala 39:68]
    else : @[forwarding.scala 41:75]
      node _T_4 = eq(io.rs1, io.memwbrd) @[forwarding.scala 41:23]
      node _T_5 = neq(io.memwbrd, UInt<1>("h00")) @[forwarding.scala 41:52]
      node _T_6 = and(_T_4, _T_5) @[forwarding.scala 41:38]
      node _T_7 = and(_T_6, io.memwbrw) @[forwarding.scala 41:60]
      when _T_7 : @[forwarding.scala 41:75]
        io.forwardA <= UInt<2>("h02") @[forwarding.scala 42:17]
        skip @[forwarding.scala 41:75]
      else : @[forwarding.scala 43:16]
        io.forwardA <= UInt<1>("h00") @[forwarding.scala 44:17]
        skip @[forwarding.scala 43:16]
    node _T_8 = eq(io.rs2, io.exmemrd) @[forwarding.scala 47:16]
    node _T_9 = neq(io.exmemrd, UInt<1>("h00")) @[forwarding.scala 47:45]
    node _T_10 = and(_T_8, _T_9) @[forwarding.scala 47:31]
    node _T_11 = and(_T_10, io.exmemrw) @[forwarding.scala 47:53]
    when _T_11 : @[forwarding.scala 47:68]
      io.forwardB <= UInt<1>("h01") @[forwarding.scala 48:17]
      skip @[forwarding.scala 47:68]
    else : @[forwarding.scala 49:75]
      node _T_12 = eq(io.rs2, io.memwbrd) @[forwarding.scala 49:23]
      node _T_13 = neq(io.memwbrd, UInt<1>("h00")) @[forwarding.scala 49:52]
      node _T_14 = and(_T_12, _T_13) @[forwarding.scala 49:38]
      node _T_15 = and(_T_14, io.memwbrw) @[forwarding.scala 49:60]
      when _T_15 : @[forwarding.scala 49:75]
        io.forwardB <= UInt<2>("h02") @[forwarding.scala 50:17]
        skip @[forwarding.scala 49:75]
      else : @[forwarding.scala 51:16]
        io.forwardB <= UInt<1>("h00") @[forwarding.scala 52:17]
        skip @[forwarding.scala 51:16]
    
  module HazardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip id_branch : UInt<1>, flip idex_memread : UInt<1>, flip idex_rd : UInt<5>, flip exmem_taken : UInt<1>, flip mstall : UInt<1>, pcwrite : UInt<2>, ifid_bubble : UInt<1>, idex_bubble : UInt<1>, exmem_bubble : UInt<1>, ifid_flush : UInt<1>, stage_mhold : UInt<1>}
    
    io.pcwrite <= UInt<1>("h00") @[hazard.scala 48:19]
    io.ifid_bubble <= UInt<1>("h00") @[hazard.scala 49:19]
    io.idex_bubble <= UInt<1>("h00") @[hazard.scala 50:19]
    io.exmem_bubble <= UInt<1>("h00") @[hazard.scala 51:19]
    io.ifid_flush <= UInt<1>("h00") @[hazard.scala 52:19]
    io.stage_mhold <= UInt<1>("h00") @[hazard.scala 53:19]
    when io.mstall : @[hazard.scala 56:20]
      io.stage_mhold <= UInt<1>("h01") @[hazard.scala 57:21]
      io.pcwrite <= UInt<2>("h02") @[hazard.scala 58:21]
      skip @[hazard.scala 56:20]
    else : @[hazard.scala 61:30]
      when io.exmem_taken : @[hazard.scala 61:30]
        io.pcwrite <= UInt<1>("h01") @[hazard.scala 63:16]
        io.ifid_flush <= UInt<1>("h01") @[hazard.scala 64:20]
        io.idex_bubble <= UInt<1>("h01") @[hazard.scala 65:21]
        io.exmem_bubble <= UInt<1>("h01") @[hazard.scala 66:21]
        skip @[hazard.scala 61:30]
      else : @[hazard.scala 70:59]
        node _T = eq(io.idex_rd, io.rs1) @[hazard.scala 70:21]
        node _T_1 = eq(io.idex_rd, io.rs2) @[hazard.scala 70:46]
        node _T_2 = or(_T, _T_1) @[hazard.scala 70:32]
        node _T_3 = and(io.idex_memread, _T_2) @[hazard.scala 69:30]
        when _T_3 : @[hazard.scala 70:59]
          io.pcwrite <= UInt<2>("h02") @[hazard.scala 72:20]
          io.ifid_bubble <= UInt<1>("h01") @[hazard.scala 73:20]
          io.idex_bubble <= UInt<1>("h01") @[hazard.scala 74:20]
          skip @[hazard.scala 70:59]
        else : @[hazard.scala 77:28]
          when io.id_branch : @[hazard.scala 77:28]
            io.pcwrite <= UInt<2>("h03") @[hazard.scala 79:16]
            io.ifid_flush <= UInt<1>("h01") @[hazard.scala 80:19]
            skip @[hazard.scala 77:28]
          else : @[hazard.scala 81:16]
            io.pcwrite <= UInt<1>("h00") @[hazard.scala 82:21]
            io.ifid_bubble <= UInt<1>("h00") @[hazard.scala 83:21]
            io.idex_bubble <= UInt<1>("h00") @[hazard.scala 84:21]
            io.exmem_bubble <= UInt<1>("h00") @[hazard.scala 85:21]
            io.ifid_flush <= UInt<1>("h00") @[hazard.scala 86:21]
            skip @[hazard.scala 81:16]
    
  module AlwaysNotTakenPredictor : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, flip update : UInt<1>, flip taken : UInt<1>, prediction : UInt<1>}
    
    wire _T : UInt<2>[32] @[branchpred.scala 36:40]
    _T[0] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[1] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[2] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[3] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[4] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[5] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[6] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[7] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[8] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[9] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[10] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[11] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[12] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[13] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[14] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[15] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[16] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[17] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[18] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[19] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[20] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[21] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[22] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[23] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[24] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[25] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[26] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[27] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[28] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[29] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[30] <= UInt<2>("h02") @[branchpred.scala 36:40]
    _T[31] <= UInt<2>("h02") @[branchpred.scala 36:40]
    reg predictionTable : UInt<2>[32], clock with : (reset => (reset, _T)) @[branchpred.scala 36:32]
    io.prediction <= UInt<1>("h00") @[branchpred.scala 62:17]
    
  module PipelinedCPU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip imem : {flip address : UInt<32>, instruction : UInt<32>}, flip dmem : {flip address : UInt<32>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}}
    
    reg pc : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[cpu.scala 90:27]
    inst control of Control @[cpu.scala 91:26]
    control.clock <= clock
    control.reset <= reset
    inst branchCtrl of BranchControl @[cpu.scala 92:26]
    branchCtrl.clock <= clock
    branchCtrl.reset <= reset
    inst registers of RegisterFile @[cpu.scala 93:26]
    registers.clock <= clock
    registers.reset <= reset
    inst aluControl of ALUControl @[cpu.scala 94:26]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst alu of ALU @[cpu.scala 95:26]
    alu.clock <= clock
    alu.reset <= reset
    inst immGen of ImmediateGenerator @[cpu.scala 96:26]
    immGen.clock <= clock
    immGen.reset <= reset
    inst pcPlusFour of Adder @[cpu.scala 97:26]
    pcPlusFour.clock <= clock
    pcPlusFour.reset <= reset
    inst branchAdd of Adder_1 @[cpu.scala 98:26]
    branchAdd.clock <= clock
    branchAdd.reset <= reset
    inst forwarding of ForwardingUnit @[cpu.scala 99:26]
    forwarding.clock <= clock
    forwarding.reset <= reset
    inst hazard of HazardUnit @[cpu.scala 100:26]
    hazard.clock <= clock
    hazard.reset <= reset
    inst predictor of AlwaysNotTakenPredictor @[cpu.scala 101:26]
    predictor.clock <= clock
    predictor.reset <= reset
    reg value : UInt<30>, clock with : (reset => (reset, UInt<30>("h00"))) @[Counter.scala 29:33]
    wire _T : UInt<1>
    _T <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 67:17]
      node _T_1 = eq(value, UInt<30>("h03fffffff")) @[Counter.scala 38:24]
      node _T_2 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      value <= _T_3 @[Counter.scala 39:13]
      _T <= _T_1 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    wire _T_4 : {instruction : UInt<32>, pc : UInt<32>, pcplusfour : UInt<32>} @[cpu.scala 105:40]
    _T_4.pcplusfour <= UInt<32>("h00") @[cpu.scala 105:40]
    _T_4.pc <= UInt<32>("h00") @[cpu.scala 105:40]
    _T_4.instruction <= UInt<32>("h00") @[cpu.scala 105:40]
    reg if_id : {instruction : UInt<32>, pc : UInt<32>, pcplusfour : UInt<32>}, clock with : (reset => (reset, _T_4)) @[cpu.scala 105:27]
    wire _T_5 : {writereg : UInt<5>, funct7 : UInt<7>, funct3 : UInt<3>, imm : UInt<32>, readdata2 : UInt<32>, readdata1 : UInt<32>, pc : UInt<32>, pcplusfour : UInt<32>, excontrol : {add : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, branch : UInt<1>, jump : UInt<2>, prediction : UInt<1>}, mcontrol : {memread : UInt<1>, memwrite : UInt<1>, taken : UInt<1>, maskmode : UInt<2>, sext : UInt<1>}, wbcontrol : {toreg : UInt<2>, regwrite : UInt<1>}, rs1 : UInt<5>, rs2 : UInt<5>, branchpc : UInt<32>} @[cpu.scala 106:40]
    _T_5.branchpc <= UInt<32>("h00") @[cpu.scala 106:40]
    _T_5.rs2 <= UInt<5>("h00") @[cpu.scala 106:40]
    _T_5.rs1 <= UInt<5>("h00") @[cpu.scala 106:40]
    _T_5.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.wbcontrol.toreg <= UInt<2>("h00") @[cpu.scala 106:40]
    _T_5.mcontrol.sext <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.mcontrol.maskmode <= UInt<2>("h00") @[cpu.scala 106:40]
    _T_5.mcontrol.taken <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.mcontrol.memwrite <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.mcontrol.memread <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.excontrol.prediction <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.excontrol.jump <= UInt<2>("h00") @[cpu.scala 106:40]
    _T_5.excontrol.branch <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.excontrol.alusrc1 <= UInt<2>("h00") @[cpu.scala 106:40]
    _T_5.excontrol.immediate <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.excontrol.add <= UInt<1>("h00") @[cpu.scala 106:40]
    _T_5.pcplusfour <= UInt<32>("h00") @[cpu.scala 106:40]
    _T_5.pc <= UInt<32>("h00") @[cpu.scala 106:40]
    _T_5.readdata1 <= UInt<32>("h00") @[cpu.scala 106:40]
    _T_5.readdata2 <= UInt<32>("h00") @[cpu.scala 106:40]
    _T_5.imm <= UInt<32>("h00") @[cpu.scala 106:40]
    _T_5.funct3 <= UInt<3>("h00") @[cpu.scala 106:40]
    _T_5.funct7 <= UInt<7>("h00") @[cpu.scala 106:40]
    _T_5.writereg <= UInt<5>("h00") @[cpu.scala 106:40]
    reg id_ex : {writereg : UInt<5>, funct7 : UInt<7>, funct3 : UInt<3>, imm : UInt<32>, readdata2 : UInt<32>, readdata1 : UInt<32>, pc : UInt<32>, pcplusfour : UInt<32>, excontrol : {add : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, branch : UInt<1>, jump : UInt<2>, prediction : UInt<1>}, mcontrol : {memread : UInt<1>, memwrite : UInt<1>, taken : UInt<1>, maskmode : UInt<2>, sext : UInt<1>}, wbcontrol : {toreg : UInt<2>, regwrite : UInt<1>}, rs1 : UInt<5>, rs2 : UInt<5>, branchpc : UInt<32>}, clock with : (reset => (reset, _T_5)) @[cpu.scala 106:27]
    wire _T_6 : {writereg : UInt<5>, readdata2 : UInt<32>, aluresult : UInt<32>, nextpc : UInt<32>, pcplusfour : UInt<32>, mcontrol : {memread : UInt<1>, memwrite : UInt<1>, taken : UInt<1>, maskmode : UInt<2>, sext : UInt<1>}, wbcontrol : {toreg : UInt<2>, regwrite : UInt<1>}} @[cpu.scala 107:40]
    _T_6.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 107:40]
    _T_6.wbcontrol.toreg <= UInt<2>("h00") @[cpu.scala 107:40]
    _T_6.mcontrol.sext <= UInt<1>("h00") @[cpu.scala 107:40]
    _T_6.mcontrol.maskmode <= UInt<2>("h00") @[cpu.scala 107:40]
    _T_6.mcontrol.taken <= UInt<1>("h00") @[cpu.scala 107:40]
    _T_6.mcontrol.memwrite <= UInt<1>("h00") @[cpu.scala 107:40]
    _T_6.mcontrol.memread <= UInt<1>("h00") @[cpu.scala 107:40]
    _T_6.pcplusfour <= UInt<32>("h00") @[cpu.scala 107:40]
    _T_6.nextpc <= UInt<32>("h00") @[cpu.scala 107:40]
    _T_6.aluresult <= UInt<32>("h00") @[cpu.scala 107:40]
    _T_6.readdata2 <= UInt<32>("h00") @[cpu.scala 107:40]
    _T_6.writereg <= UInt<5>("h00") @[cpu.scala 107:40]
    reg ex_mem : {writereg : UInt<5>, readdata2 : UInt<32>, aluresult : UInt<32>, nextpc : UInt<32>, pcplusfour : UInt<32>, mcontrol : {memread : UInt<1>, memwrite : UInt<1>, taken : UInt<1>, maskmode : UInt<2>, sext : UInt<1>}, wbcontrol : {toreg : UInt<2>, regwrite : UInt<1>}}, clock with : (reset => (reset, _T_6)) @[cpu.scala 107:27]
    wire _T_7 : {writereg : UInt<5>, aluresult : UInt<32>, readdata : UInt<32>, pcplusfour : UInt<32>, wbcontrol : {toreg : UInt<2>, regwrite : UInt<1>}} @[cpu.scala 108:40]
    _T_7.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 108:40]
    _T_7.wbcontrol.toreg <= UInt<2>("h00") @[cpu.scala 108:40]
    _T_7.pcplusfour <= UInt<32>("h00") @[cpu.scala 108:40]
    _T_7.readdata <= UInt<32>("h00") @[cpu.scala 108:40]
    _T_7.aluresult <= UInt<32>("h00") @[cpu.scala 108:40]
    _T_7.writereg <= UInt<5>("h00") @[cpu.scala 108:40]
    reg mem_wb : {writereg : UInt<5>, aluresult : UInt<32>, readdata : UInt<32>, pcplusfour : UInt<32>, wbcontrol : {toreg : UInt<2>, regwrite : UInt<1>}}, clock with : (reset => (reset, _T_7)) @[cpu.scala 108:27]
    node _T_8 = bits(reset, 0, 0) @[cpu.scala 110:27]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[cpu.scala 110:27]
    when _T_9 : @[cpu.scala 110:27]
      printf(clock, UInt<1>(1), "Cycle=%d ", value) @[cpu.scala 110:27]
      skip @[cpu.scala 110:27]
    reg bpCorrect : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[cpu.scala 113:28]
    reg bpIncorrect : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[cpu.scala 114:28]
    node _T_10 = shl(UInt<1>("h01"), 20) @[cpu.scala 115:26]
    node _T_11 = gt(bpCorrect, _T_10) @[cpu.scala 115:19]
    when _T_11 : @[cpu.scala 115:34]
      node _T_12 = bits(reset, 0, 0) @[cpu.scala 117:11]
      node _T_13 = eq(_T_12, UInt<1>("h00")) @[cpu.scala 117:11]
      when _T_13 : @[cpu.scala 117:11]
        printf(clock, UInt<1>(1), "BP correct: %d; incorrect: %d\n", bpCorrect, bpIncorrect) @[cpu.scala 117:11]
        skip @[cpu.scala 117:11]
      skip @[cpu.scala 115:34]
    wire mem_next_pc : UInt @[cpu.scala 123:25]
    wire id_next_pc : UInt @[cpu.scala 126:24]
    wire write_data : UInt @[cpu.scala 129:24]
    node _T_14 = eq(hazard.io.pcwrite, UInt<1>("h00")) @[cpu.scala 138:36]
    node _T_15 = eq(hazard.io.pcwrite, UInt<1>("h01")) @[cpu.scala 139:36]
    node _T_16 = eq(hazard.io.pcwrite, UInt<2>("h02")) @[cpu.scala 140:36]
    node _T_17 = eq(hazard.io.pcwrite, UInt<2>("h03")) @[cpu.scala 141:36]
    node _T_18 = mux(_T_17, id_next_pc, UInt<1>("h00")) @[Mux.scala 87:16]
    node _T_19 = mux(_T_16, pc, _T_18) @[Mux.scala 87:16]
    node _T_20 = mux(_T_15, mem_next_pc, _T_19) @[Mux.scala 87:16]
    node _T_21 = mux(_T_14, pcPlusFour.io.result, _T_20) @[Mux.scala 87:16]
    pc <= _T_21 @[cpu.scala 137:6]
    node _T_22 = bits(reset, 0, 0) @[cpu.scala 143:27]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[cpu.scala 143:27]
    when _T_23 : @[cpu.scala 143:27]
      printf(clock, UInt<1>(1), "PC: %d\n", pc) @[cpu.scala 143:27]
      skip @[cpu.scala 143:27]
    io.imem.address <= pc @[cpu.scala 146:19]
    pcPlusFour.io.inputx <= pc @[cpu.scala 149:24]
    pcPlusFour.io.inputy <= UInt<3>("h04") @[cpu.scala 150:24]
    node _T_24 = not(hazard.io.ifid_bubble) @[cpu.scala 154:9]
    when _T_24 : @[cpu.scala 154:33]
      if_id.instruction <= io.imem.instruction @[cpu.scala 155:23]
      if_id.pc <= pc @[cpu.scala 156:23]
      if_id.pcplusfour <= pcPlusFour.io.result @[cpu.scala 157:23]
      skip @[cpu.scala 154:33]
    when hazard.io.ifid_flush : @[cpu.scala 161:31]
      if_id.instruction <= UInt<1>("h00") @[cpu.scala 162:23]
      if_id.pc <= UInt<1>("h00") @[cpu.scala 163:23]
      if_id.pcplusfour <= UInt<1>("h00") @[cpu.scala 164:23]
      skip @[cpu.scala 161:31]
    when hazard.io.stage_mhold : @[cpu.scala 167:32]
      if_id.instruction <= if_id.instruction @[cpu.scala 168:23]
      if_id.pc <= if_id.pc @[cpu.scala 169:23]
      if_id.pcplusfour <= if_id.pcplusfour @[cpu.scala 170:23]
      skip @[cpu.scala 167:32]
    node _T_25 = bits(reset, 0, 0) @[cpu.scala 173:27]
    node _T_26 = eq(_T_25, UInt<1>("h00")) @[cpu.scala 173:27]
    when _T_26 : @[cpu.scala 173:27]
      printf(clock, UInt<1>(1), "IF/ID: IFIDBundle(instruction -> %d, pc -> %d, pcplusfour -> %d)\n", if_id.instruction, if_id.pc, if_id.pcplusfour) @[cpu.scala 173:27]
      skip @[cpu.scala 173:27]
    node rs1 = bits(if_id.instruction, 19, 15) @[cpu.scala 179:30]
    node rs2 = bits(if_id.instruction, 24, 20) @[cpu.scala 180:30]
    hazard.io.rs1 <= rs1 @[cpu.scala 183:17]
    hazard.io.rs2 <= rs2 @[cpu.scala 184:17]
    predictor.io.pc <= if_id.pc @[cpu.scala 187:19]
    node _T_27 = and(control.io.branch, predictor.io.prediction) @[cpu.scala 191:44]
    hazard.io.id_branch <= _T_27 @[cpu.scala 191:23]
    node _T_28 = bits(if_id.instruction, 6, 0) @[cpu.scala 194:41]
    control.io.opcode <= _T_28 @[cpu.scala 194:21]
    registers.io.readreg1 <= rs1 @[cpu.scala 197:25]
    registers.io.readreg2 <= rs2 @[cpu.scala 198:25]
    immGen.io.instruction <= if_id.instruction @[cpu.scala 201:25]
    branchAdd.io.inputx <= if_id.pc @[cpu.scala 204:23]
    branchAdd.io.inputy <= immGen.io.sextImm @[cpu.scala 205:23]
    id_next_pc <= branchAdd.io.result @[cpu.scala 208:14]
    node _T_29 = bits(if_id.instruction, 11, 7) @[cpu.scala 211:40]
    id_ex.writereg <= _T_29 @[cpu.scala 211:20]
    id_ex.rs1 <= rs1 @[cpu.scala 212:20]
    id_ex.rs2 <= rs2 @[cpu.scala 213:20]
    node _T_30 = bits(if_id.instruction, 31, 25) @[cpu.scala 214:40]
    id_ex.funct7 <= _T_30 @[cpu.scala 214:20]
    node _T_31 = bits(if_id.instruction, 14, 12) @[cpu.scala 215:40]
    id_ex.funct3 <= _T_31 @[cpu.scala 215:20]
    id_ex.imm <= immGen.io.sextImm @[cpu.scala 216:20]
    id_ex.readdata2 <= registers.io.readdata2 @[cpu.scala 217:20]
    id_ex.readdata1 <= registers.io.readdata1 @[cpu.scala 218:20]
    id_ex.pc <= if_id.pc @[cpu.scala 219:20]
    id_ex.pcplusfour <= if_id.pcplusfour @[cpu.scala 220:20]
    id_ex.branchpc <= branchAdd.io.result @[cpu.scala 221:20]
    id_ex.excontrol.add <= control.io.add @[cpu.scala 224:29]
    id_ex.excontrol.immediate <= control.io.immediate @[cpu.scala 225:29]
    id_ex.excontrol.alusrc1 <= control.io.alusrc1 @[cpu.scala 226:29]
    id_ex.excontrol.branch <= control.io.branch @[cpu.scala 227:29]
    id_ex.excontrol.jump <= control.io.jump @[cpu.scala 228:29]
    id_ex.excontrol.prediction <= predictor.io.prediction @[cpu.scala 229:29]
    id_ex.mcontrol.memread <= control.io.memread @[cpu.scala 232:27]
    id_ex.mcontrol.memwrite <= control.io.memwrite @[cpu.scala 233:27]
    node _T_32 = bits(if_id.instruction, 13, 12) @[cpu.scala 234:47]
    id_ex.mcontrol.maskmode <= _T_32 @[cpu.scala 234:27]
    node _T_33 = bits(if_id.instruction, 14, 14) @[cpu.scala 235:48]
    node _T_34 = not(_T_33) @[cpu.scala 235:30]
    id_ex.mcontrol.sext <= _T_34 @[cpu.scala 235:27]
    id_ex.wbcontrol.toreg <= control.io.toreg @[cpu.scala 238:28]
    id_ex.wbcontrol.regwrite <= control.io.regwrite @[cpu.scala 239:28]
    when hazard.io.idex_bubble : @[cpu.scala 241:32]
      wire _T_35 : {add : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, branch : UInt<1>, jump : UInt<2>, prediction : UInt<1>} @[cpu.scala 243:36]
      _T_35.prediction <= UInt<1>("h00") @[cpu.scala 243:36]
      _T_35.jump <= UInt<2>("h00") @[cpu.scala 243:36]
      _T_35.branch <= UInt<1>("h00") @[cpu.scala 243:36]
      _T_35.alusrc1 <= UInt<2>("h00") @[cpu.scala 243:36]
      _T_35.immediate <= UInt<1>("h00") @[cpu.scala 243:36]
      _T_35.add <= UInt<1>("h00") @[cpu.scala 243:36]
      id_ex.excontrol.prediction <= _T_35.prediction @[cpu.scala 243:21]
      id_ex.excontrol.jump <= _T_35.jump @[cpu.scala 243:21]
      id_ex.excontrol.branch <= _T_35.branch @[cpu.scala 243:21]
      id_ex.excontrol.alusrc1 <= _T_35.alusrc1 @[cpu.scala 243:21]
      id_ex.excontrol.immediate <= _T_35.immediate @[cpu.scala 243:21]
      id_ex.excontrol.add <= _T_35.add @[cpu.scala 243:21]
      wire _T_36 : {memread : UInt<1>, memwrite : UInt<1>, taken : UInt<1>, maskmode : UInt<2>, sext : UInt<1>} @[cpu.scala 244:36]
      _T_36.sext <= UInt<1>("h00") @[cpu.scala 244:36]
      _T_36.maskmode <= UInt<2>("h00") @[cpu.scala 244:36]
      _T_36.taken <= UInt<1>("h00") @[cpu.scala 244:36]
      _T_36.memwrite <= UInt<1>("h00") @[cpu.scala 244:36]
      _T_36.memread <= UInt<1>("h00") @[cpu.scala 244:36]
      id_ex.mcontrol.sext <= _T_36.sext @[cpu.scala 244:21]
      id_ex.mcontrol.maskmode <= _T_36.maskmode @[cpu.scala 244:21]
      id_ex.mcontrol.taken <= _T_36.taken @[cpu.scala 244:21]
      id_ex.mcontrol.memwrite <= _T_36.memwrite @[cpu.scala 244:21]
      id_ex.mcontrol.memread <= _T_36.memread @[cpu.scala 244:21]
      wire _T_37 : {toreg : UInt<2>, regwrite : UInt<1>} @[cpu.scala 245:36]
      _T_37.regwrite <= UInt<1>("h00") @[cpu.scala 245:36]
      _T_37.toreg <= UInt<2>("h00") @[cpu.scala 245:36]
      id_ex.wbcontrol.regwrite <= _T_37.regwrite @[cpu.scala 245:21]
      id_ex.wbcontrol.toreg <= _T_37.toreg @[cpu.scala 245:21]
      skip @[cpu.scala 241:32]
    when hazard.io.stage_mhold : @[cpu.scala 248:32]
      id_ex.writereg <= id_ex.writereg @[cpu.scala 250:22]
      id_ex.rs1 <= id_ex.rs1 @[cpu.scala 251:22]
      id_ex.rs2 <= id_ex.rs2 @[cpu.scala 252:22]
      id_ex.funct7 <= id_ex.funct7 @[cpu.scala 253:22]
      id_ex.funct3 <= id_ex.funct3 @[cpu.scala 254:22]
      id_ex.imm <= id_ex.imm @[cpu.scala 255:22]
      id_ex.readdata2 <= id_ex.readdata2 @[cpu.scala 256:22]
      id_ex.readdata1 <= id_ex.readdata1 @[cpu.scala 257:22]
      id_ex.pc <= id_ex.pc @[cpu.scala 258:22]
      id_ex.pcplusfour <= id_ex.pcplusfour @[cpu.scala 259:22]
      id_ex.branchpc <= id_ex.branchpc @[cpu.scala 260:22]
      id_ex.excontrol.add <= id_ex.excontrol.add @[cpu.scala 263:32]
      id_ex.excontrol.immediate <= id_ex.excontrol.immediate @[cpu.scala 264:32]
      id_ex.excontrol.alusrc1 <= id_ex.excontrol.alusrc1 @[cpu.scala 265:32]
      id_ex.excontrol.branch <= id_ex.excontrol.branch @[cpu.scala 266:32]
      id_ex.excontrol.jump <= id_ex.excontrol.jump @[cpu.scala 267:32]
      id_ex.excontrol.prediction <= id_ex.excontrol.prediction @[cpu.scala 268:32]
      id_ex.mcontrol.memread <= id_ex.mcontrol.memread @[cpu.scala 271:29]
      id_ex.mcontrol.memwrite <= id_ex.mcontrol.memwrite @[cpu.scala 272:29]
      id_ex.mcontrol.maskmode <= id_ex.mcontrol.maskmode @[cpu.scala 273:29]
      id_ex.mcontrol.sext <= id_ex.mcontrol.sext @[cpu.scala 274:29]
      id_ex.wbcontrol.toreg <= id_ex.wbcontrol.toreg @[cpu.scala 277:30]
      id_ex.wbcontrol.regwrite <= id_ex.wbcontrol.regwrite @[cpu.scala 278:30]
      skip @[cpu.scala 248:32]
    node _T_38 = bits(reset, 0, 0) @[cpu.scala 281:27]
    node _T_39 = eq(_T_38, UInt<1>("h00")) @[cpu.scala 281:27]
    when _T_39 : @[cpu.scala 281:27]
      printf(clock, UInt<1>(1), "DASM(%x)\n", if_id.instruction) @[cpu.scala 281:27]
      skip @[cpu.scala 281:27]
    node _T_40 = bits(reset, 0, 0) @[cpu.scala 282:27]
    node _T_41 = eq(_T_40, UInt<1>("h00")) @[cpu.scala 282:27]
    when _T_41 : @[cpu.scala 282:27]
      printf(clock, UInt<1>(1), "ID/EX: IDEXBundle(writereg -> %d, funct7 -> %d, funct3 -> %d, imm -> %d, readdata2 -> %d, readdata1 -> %d, pc -> %d, pcplusfour -> %d, excontrol -> EXControl(add -> %d, immediate -> %d, alusrc1 -> %d, branch -> %d, jump -> %d, prediction -> %d), mcontrol -> MControl(memread -> %d, memwrite -> %d, taken -> %d, maskmode -> %d, sext -> %d), wbcontrol -> WBControl(toreg -> %d, regwrite -> %d), rs1 -> %d, rs2 -> %d, branchpc -> %d)\n", id_ex.writereg, id_ex.funct7, id_ex.funct3, id_ex.imm, id_ex.readdata2, id_ex.readdata1, id_ex.pc, id_ex.pcplusfour, id_ex.excontrol.add, id_ex.excontrol.immediate, id_ex.excontrol.alusrc1, id_ex.excontrol.branch, id_ex.excontrol.jump, id_ex.excontrol.prediction, id_ex.mcontrol.memread, id_ex.mcontrol.memwrite, id_ex.mcontrol.taken, id_ex.mcontrol.maskmode, id_ex.mcontrol.sext, id_ex.wbcontrol.toreg, id_ex.wbcontrol.regwrite, id_ex.rs1, id_ex.rs2, id_ex.branchpc) @[cpu.scala 282:27]
      skip @[cpu.scala 282:27]
    hazard.io.idex_memread <= id_ex.mcontrol.memread @[cpu.scala 289:26]
    hazard.io.idex_rd <= id_ex.writereg @[cpu.scala 290:26]
    forwarding.io.rs1 <= id_ex.rs1 @[cpu.scala 293:21]
    forwarding.io.rs2 <= id_ex.rs2 @[cpu.scala 294:21]
    aluControl.io.add <= id_ex.excontrol.add @[cpu.scala 297:27]
    aluControl.io.immediate <= id_ex.excontrol.immediate @[cpu.scala 298:27]
    aluControl.io.funct7 <= id_ex.funct7 @[cpu.scala 299:27]
    aluControl.io.funct3 <= id_ex.funct3 @[cpu.scala 300:27]
    alu.io.multStart <= aluControl.io.startMult @[cpu.scala 303:20]
    wire forward_inputx : UInt<32> @[cpu.scala 306:28]
    node _T_42 = eq(forwarding.io.forwardA, UInt<1>("h00")) @[cpu.scala 308:52]
    node _T_43 = eq(forwarding.io.forwardA, UInt<1>("h01")) @[cpu.scala 309:52]
    node _T_44 = eq(forwarding.io.forwardA, UInt<2>("h02")) @[cpu.scala 310:52]
    node _T_45 = mux(_T_44, write_data, UInt<1>("h00")) @[Mux.scala 87:16]
    node _T_46 = mux(_T_43, ex_mem.aluresult, _T_45) @[Mux.scala 87:16]
    node _T_47 = mux(_T_42, id_ex.readdata1, _T_46) @[Mux.scala 87:16]
    forward_inputx <= _T_47 @[cpu.scala 307:19]
    wire alu_inputx : UInt<32> @[cpu.scala 313:24]
    alu_inputx is invalid @[cpu.scala 314:14]
    node _T_48 = eq(UInt<1>("h00"), id_ex.excontrol.alusrc1) @[Conditional.scala 37:30]
    when _T_48 : @[Conditional.scala 40:58]
      alu_inputx <= forward_inputx @[cpu.scala 317:26]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_49 = eq(UInt<1>("h01"), id_ex.excontrol.alusrc1) @[Conditional.scala 37:30]
      when _T_49 : @[Conditional.scala 39:67]
        alu_inputx <= UInt<1>("h00") @[cpu.scala 318:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_50 = eq(UInt<2>("h02"), id_ex.excontrol.alusrc1) @[Conditional.scala 37:30]
        when _T_50 : @[Conditional.scala 39:67]
          alu_inputx <= id_ex.pc @[cpu.scala 319:26]
          skip @[Conditional.scala 39:67]
    alu.io.inputx <= alu_inputx @[cpu.scala 321:17]
    node _T_51 = eq(forwarding.io.forwardB, UInt<1>("h00")) @[cpu.scala 325:52]
    node _T_52 = eq(forwarding.io.forwardB, UInt<1>("h01")) @[cpu.scala 326:52]
    node _T_53 = eq(forwarding.io.forwardB, UInt<2>("h02")) @[cpu.scala 327:52]
    node _T_54 = mux(_T_53, write_data, UInt<1>("h00")) @[Mux.scala 87:16]
    node _T_55 = mux(_T_52, ex_mem.aluresult, _T_54) @[Mux.scala 87:16]
    node forward_inputy = mux(_T_51, id_ex.readdata2, _T_55) @[Mux.scala 87:16]
    wire alu_inputy : UInt<32> @[cpu.scala 329:24]
    alu_inputy <= forward_inputy @[cpu.scala 330:14]
    node _T_56 = mux(id_ex.excontrol.immediate, id_ex.imm, alu_inputy) @[cpu.scala 333:23]
    alu.io.inputy <= _T_56 @[cpu.scala 333:17]
    branchCtrl.io.branch <= id_ex.excontrol.branch @[cpu.scala 336:24]
    branchCtrl.io.funct3 <= id_ex.funct3 @[cpu.scala 337:24]
    branchCtrl.io.inputx <= forward_inputx @[cpu.scala 338:24]
    branchCtrl.io.inputy <= forward_inputy @[cpu.scala 339:24]
    alu.io.operation <= aluControl.io.operation @[cpu.scala 342:23]
    alu.io.multStart <= aluControl.io.startMult @[cpu.scala 343:23]
    alu.io.multFinished <= aluControl.io.multFinished @[cpu.scala 344:23]
    hazard.io.mstall <= aluControl.io.multHold @[cpu.scala 347:20]
    ex_mem.readdata2 <= alu_inputy @[cpu.scala 350:21]
    ex_mem.aluresult <= alu.io.result @[cpu.scala 351:21]
    ex_mem.writereg <= id_ex.writereg @[cpu.scala 352:21]
    ex_mem.pcplusfour <= id_ex.pcplusfour @[cpu.scala 353:21]
    ex_mem.mcontrol.sext <= id_ex.mcontrol.sext @[cpu.scala 354:21]
    ex_mem.mcontrol.maskmode <= id_ex.mcontrol.maskmode @[cpu.scala 354:21]
    ex_mem.mcontrol.taken <= id_ex.mcontrol.taken @[cpu.scala 354:21]
    ex_mem.mcontrol.memwrite <= id_ex.mcontrol.memwrite @[cpu.scala 354:21]
    ex_mem.mcontrol.memread <= id_ex.mcontrol.memread @[cpu.scala 354:21]
    ex_mem.wbcontrol.regwrite <= id_ex.wbcontrol.regwrite @[cpu.scala 355:21]
    ex_mem.wbcontrol.toreg <= id_ex.wbcontrol.toreg @[cpu.scala 355:21]
    when hazard.io.stage_mhold : @[cpu.scala 357:32]
      ex_mem.readdata2 <= ex_mem.readdata2 @[cpu.scala 359:23]
      ex_mem.aluresult <= ex_mem.aluresult @[cpu.scala 360:23]
      ex_mem.writereg <= ex_mem.writereg @[cpu.scala 361:23]
      ex_mem.pcplusfour <= ex_mem.pcplusfour @[cpu.scala 362:23]
      ex_mem.mcontrol.sext <= ex_mem.mcontrol.sext @[cpu.scala 363:23]
      ex_mem.mcontrol.maskmode <= ex_mem.mcontrol.maskmode @[cpu.scala 363:23]
      ex_mem.mcontrol.taken <= ex_mem.mcontrol.taken @[cpu.scala 363:23]
      ex_mem.mcontrol.memwrite <= ex_mem.mcontrol.memwrite @[cpu.scala 363:23]
      ex_mem.mcontrol.memread <= ex_mem.mcontrol.memread @[cpu.scala 363:23]
      ex_mem.wbcontrol.regwrite <= ex_mem.wbcontrol.regwrite @[cpu.scala 364:23]
      ex_mem.wbcontrol.toreg <= ex_mem.wbcontrol.toreg @[cpu.scala 364:23]
      skip @[cpu.scala 357:32]
    node _T_57 = not(hazard.io.exmem_bubble) @[cpu.scala 368:35]
    node _T_58 = and(id_ex.excontrol.branch, _T_57) @[cpu.scala 368:32]
    when _T_58 : @[cpu.scala 368:60]
      predictor.io.update <= UInt<1>("h01") @[cpu.scala 370:25]
      predictor.io.taken <= branchCtrl.io.taken @[cpu.scala 371:25]
      node _T_59 = eq(id_ex.excontrol.prediction, branchCtrl.io.taken) @[cpu.scala 374:38]
      when _T_59 : @[cpu.scala 374:63]
        node _T_60 = add(bpCorrect, UInt<1>("h01")) @[cpu.scala 375:32]
        node _T_61 = tail(_T_60, 1) @[cpu.scala 375:32]
        bpCorrect <= _T_61 @[cpu.scala 375:19]
        skip @[cpu.scala 374:63]
      else : @[cpu.scala 376:18]
        node _T_62 = add(bpIncorrect, UInt<1>("h01")) @[cpu.scala 377:34]
        node _T_63 = tail(_T_62, 1) @[cpu.scala 377:34]
        bpIncorrect <= _T_63 @[cpu.scala 377:19]
        skip @[cpu.scala 376:18]
      skip @[cpu.scala 368:60]
    else : @[cpu.scala 380:16]
      predictor.io.update <= UInt<1>("h00") @[cpu.scala 382:25]
      predictor.io.taken is invalid @[cpu.scala 383:25]
      skip @[cpu.scala 380:16]
    node _T_64 = bits(id_ex.excontrol.jump, 1, 1) @[cpu.scala 387:29]
    when _T_64 : @[cpu.scala 387:34]
      node _T_65 = bits(id_ex.excontrol.jump, 0, 0) @[cpu.scala 389:31]
      node _T_66 = eq(_T_65, UInt<1>("h00")) @[cpu.scala 389:35]
      when _T_66 : @[cpu.scala 389:44]
        ex_mem.nextpc <= id_ex.branchpc @[cpu.scala 391:21]
        ex_mem.mcontrol.taken <= UInt<1>("h01") @[cpu.scala 392:29]
        skip @[cpu.scala 389:44]
      else : @[cpu.scala 393:18]
        node _T_67 = mux(UInt<1>("h01"), UInt<31>("h07fffffff"), UInt<31>("h00")) @[Bitwise.scala 72:12]
        node _T_68 = cat(_T_67, UInt<1>("h00")) @[Cat.scala 29:58]
        node _T_69 = and(alu.io.result, _T_68) @[cpu.scala 395:38]
        ex_mem.nextpc <= _T_69 @[cpu.scala 395:21]
        ex_mem.mcontrol.taken <= UInt<1>("h01") @[cpu.scala 396:29]
        skip @[cpu.scala 393:18]
      skip @[cpu.scala 387:34]
    else : @[cpu.scala 398:16]
      node _T_70 = neq(branchCtrl.io.taken, id_ex.excontrol.prediction) @[cpu.scala 400:31]
      node _T_71 = and(_T_70, id_ex.excontrol.branch) @[cpu.scala 400:62]
      when _T_71 : @[cpu.scala 400:89]
        when branchCtrl.io.taken : @[cpu.scala 401:34]
          ex_mem.nextpc <= id_ex.branchpc @[cpu.scala 401:50]
          skip @[cpu.scala 401:34]
        else : @[cpu.scala 402:18]
          ex_mem.nextpc <= id_ex.pcplusfour @[cpu.scala 402:34]
          skip @[cpu.scala 402:18]
        ex_mem.mcontrol.taken <= UInt<1>("h01") @[cpu.scala 403:29]
        skip @[cpu.scala 400:89]
      else : @[cpu.scala 404:18]
        ex_mem.mcontrol.taken <= UInt<1>("h00") @[cpu.scala 405:30]
        ex_mem.nextpc is invalid @[cpu.scala 406:21]
        skip @[cpu.scala 404:18]
      skip @[cpu.scala 398:16]
    when hazard.io.exmem_bubble : @[cpu.scala 411:33]
      wire _T_72 : {memread : UInt<1>, memwrite : UInt<1>, taken : UInt<1>, maskmode : UInt<2>, sext : UInt<1>} @[cpu.scala 413:37]
      _T_72.sext <= UInt<1>("h00") @[cpu.scala 413:37]
      _T_72.maskmode <= UInt<2>("h00") @[cpu.scala 413:37]
      _T_72.taken <= UInt<1>("h00") @[cpu.scala 413:37]
      _T_72.memwrite <= UInt<1>("h00") @[cpu.scala 413:37]
      _T_72.memread <= UInt<1>("h00") @[cpu.scala 413:37]
      ex_mem.mcontrol.sext <= _T_72.sext @[cpu.scala 413:22]
      ex_mem.mcontrol.maskmode <= _T_72.maskmode @[cpu.scala 413:22]
      ex_mem.mcontrol.taken <= _T_72.taken @[cpu.scala 413:22]
      ex_mem.mcontrol.memwrite <= _T_72.memwrite @[cpu.scala 413:22]
      ex_mem.mcontrol.memread <= _T_72.memread @[cpu.scala 413:22]
      wire _T_73 : {toreg : UInt<2>, regwrite : UInt<1>} @[cpu.scala 414:37]
      _T_73.regwrite <= UInt<1>("h00") @[cpu.scala 414:37]
      _T_73.toreg <= UInt<2>("h00") @[cpu.scala 414:37]
      ex_mem.wbcontrol.regwrite <= _T_73.regwrite @[cpu.scala 414:22]
      ex_mem.wbcontrol.toreg <= _T_73.toreg @[cpu.scala 414:22]
      skip @[cpu.scala 411:33]
    node _T_74 = bits(reset, 0, 0) @[cpu.scala 417:27]
    node _T_75 = eq(_T_74, UInt<1>("h00")) @[cpu.scala 417:27]
    when _T_75 : @[cpu.scala 417:27]
      printf(clock, UInt<1>(1), "EX/MEM: EXMEMBundle(writereg -> %d, readdata2 -> %d, aluresult -> %d, nextpc -> %d, pcplusfour -> %d, mcontrol -> MControl(memread -> %d, memwrite -> %d, taken -> %d, maskmode -> %d, sext -> %d), wbcontrol -> WBControl(toreg -> %d, regwrite -> %d))\n", ex_mem.writereg, ex_mem.readdata2, ex_mem.aluresult, ex_mem.nextpc, ex_mem.pcplusfour, ex_mem.mcontrol.memread, ex_mem.mcontrol.memwrite, ex_mem.mcontrol.taken, ex_mem.mcontrol.maskmode, ex_mem.mcontrol.sext, ex_mem.wbcontrol.toreg, ex_mem.wbcontrol.regwrite) @[cpu.scala 417:27]
      skip @[cpu.scala 417:27]
    io.dmem.address <= ex_mem.aluresult @[cpu.scala 424:21]
    io.dmem.writedata <= ex_mem.readdata2 @[cpu.scala 425:21]
    io.dmem.memread <= ex_mem.mcontrol.memread @[cpu.scala 426:21]
    io.dmem.memwrite <= ex_mem.mcontrol.memwrite @[cpu.scala 427:21]
    io.dmem.maskmode <= ex_mem.mcontrol.maskmode @[cpu.scala 428:21]
    io.dmem.sext <= ex_mem.mcontrol.sext @[cpu.scala 429:21]
    mem_next_pc <= ex_mem.nextpc @[cpu.scala 432:15]
    hazard.io.exmem_taken <= ex_mem.mcontrol.taken @[cpu.scala 435:25]
    forwarding.io.exmemrd <= ex_mem.writereg @[cpu.scala 438:25]
    forwarding.io.exmemrw <= ex_mem.wbcontrol.regwrite @[cpu.scala 439:25]
    mem_wb.writereg <= ex_mem.writereg @[cpu.scala 442:21]
    mem_wb.aluresult <= ex_mem.aluresult @[cpu.scala 443:21]
    mem_wb.pcplusfour <= ex_mem.pcplusfour @[cpu.scala 444:21]
    mem_wb.readdata <= io.dmem.readdata @[cpu.scala 445:21]
    mem_wb.wbcontrol.regwrite <= ex_mem.wbcontrol.regwrite @[cpu.scala 446:21]
    mem_wb.wbcontrol.toreg <= ex_mem.wbcontrol.toreg @[cpu.scala 446:21]
    when hazard.io.stage_mhold : @[cpu.scala 448:32]
      mem_wb.writereg <= mem_wb.writereg @[cpu.scala 450:23]
      mem_wb.aluresult <= mem_wb.aluresult @[cpu.scala 451:23]
      mem_wb.pcplusfour <= mem_wb.pcplusfour @[cpu.scala 452:23]
      mem_wb.readdata <= mem_wb.readdata @[cpu.scala 453:23]
      mem_wb.wbcontrol.regwrite <= mem_wb.wbcontrol.regwrite @[cpu.scala 454:23]
      mem_wb.wbcontrol.toreg <= mem_wb.wbcontrol.toreg @[cpu.scala 454:23]
      skip @[cpu.scala 448:32]
    node _T_76 = bits(reset, 0, 0) @[cpu.scala 457:27]
    node _T_77 = eq(_T_76, UInt<1>("h00")) @[cpu.scala 457:27]
    when _T_77 : @[cpu.scala 457:27]
      printf(clock, UInt<1>(1), "MEM/WB: MEMWBBundle(writereg -> %d, aluresult -> %d, readdata -> %d, pcplusfour -> %d, wbcontrol -> WBControl(toreg -> %d, regwrite -> %d))\n", mem_wb.writereg, mem_wb.aluresult, mem_wb.readdata, mem_wb.pcplusfour, mem_wb.wbcontrol.toreg, mem_wb.wbcontrol.regwrite) @[cpu.scala 457:27]
      skip @[cpu.scala 457:27]
    node _T_78 = eq(mem_wb.wbcontrol.toreg, UInt<1>("h00")) @[cpu.scala 465:48]
    node _T_79 = eq(mem_wb.wbcontrol.toreg, UInt<1>("h01")) @[cpu.scala 466:48]
    node _T_80 = eq(mem_wb.wbcontrol.toreg, UInt<2>("h02")) @[cpu.scala 467:48]
    node _T_81 = mux(_T_80, mem_wb.pcplusfour, mem_wb.aluresult) @[Mux.scala 87:16]
    node _T_82 = mux(_T_79, mem_wb.readdata, _T_81) @[Mux.scala 87:16]
    node _T_83 = mux(_T_78, mem_wb.aluresult, _T_82) @[Mux.scala 87:16]
    write_data <= _T_83 @[cpu.scala 464:14]
    registers.io.writedata <= write_data @[cpu.scala 470:26]
    registers.io.writereg <= mem_wb.writereg @[cpu.scala 471:26]
    node _T_84 = neq(registers.io.writereg, UInt<1>("h00")) @[cpu.scala 472:81]
    node _T_85 = and(mem_wb.wbcontrol.regwrite, _T_84) @[cpu.scala 472:55]
    registers.io.wen <= _T_85 @[cpu.scala 472:26]
    forwarding.io.memwbrd <= mem_wb.writereg @[cpu.scala 475:25]
    forwarding.io.memwbrw <= mem_wb.wbcontrol.regwrite @[cpu.scala 476:25]
    node _T_86 = bits(reset, 0, 0) @[cpu.scala 478:27]
    node _T_87 = eq(_T_86, UInt<1>("h00")) @[cpu.scala 478:27]
    when _T_87 : @[cpu.scala 478:27]
      printf(clock, UInt<1>(1), "---------------------------------------------\n") @[cpu.scala 478:27]
      skip @[cpu.scala 478:27]
    
