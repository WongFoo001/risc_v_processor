;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, flip finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Booth8Cycle.scala 21:26]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 25:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 26:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 27:23]
    wire nextMPL : UInt<17> @[Booth8Cycle.scala 28:23]
    wire accumulatorUpper : UInt<16> @[Booth8Cycle.scala 30:31]
    wire calcMultiplicand : UInt<16> @[Booth8Cycle.scala 31:31]
    wire first_upAcc : UInt<16> @[Booth8Cycle.scala 32:31]
    wire first_mcd : UInt<16> @[Booth8Cycle.scala 33:31]
    wire first_op : UInt<3> @[Booth8Cycle.scala 34:31]
    accCalc is invalid @[Booth8Cycle.scala 37:13]
    accShift is invalid @[Booth8Cycle.scala 38:13]
    operation is invalid @[Booth8Cycle.scala 39:13]
    nextMPL is invalid @[Booth8Cycle.scala 40:13]
    first_upAcc <= UInt<1>("h00") @[Booth8Cycle.scala 44:16]
    first_mcd <= io.multiplicand @[Booth8Cycle.scala 45:16]
    node _T = bits(io.multiplier, 1, 0) @[Booth8Cycle.scala 46:36]
    node _T_1 = cat(_T, UInt<1>("h00")) @[Cat.scala 29:58]
    first_op <= _T_1 @[Booth8Cycle.scala 46:16]
    when io.start : @[Booth8Cycle.scala 49:19]
      operation <= first_op @[Booth8Cycle.scala 51:22]
      accumulatorUpper <= first_upAcc @[Booth8Cycle.scala 52:22]
      calcMultiplicand <= first_mcd @[Booth8Cycle.scala 53:22]
      skip @[Booth8Cycle.scala 49:19]
    else : @[Booth8Cycle.scala 55:14]
      node _T_2 = bits(mpl, 2, 0) @[Booth8Cycle.scala 57:28]
      operation <= _T_2 @[Booth8Cycle.scala 57:22]
      accumulatorUpper <= accUpper @[Booth8Cycle.scala 58:22]
      calcMultiplicand <= mcd @[Booth8Cycle.scala 59:22]
      skip @[Booth8Cycle.scala 55:14]
    node _T_3 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      accCalc <= accumulatorUpper @[Booth8Cycle.scala 65:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 69:35]
        node _T_6 = tail(_T_5, 1) @[Booth8Cycle.scala 69:35]
        accCalc <= _T_6 @[Booth8Cycle.scala 69:15]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          node _T_8 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 74:35]
          node _T_9 = tail(_T_8, 1) @[Booth8Cycle.scala 74:35]
          accCalc <= _T_9 @[Booth8Cycle.scala 74:15]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            node _T_11 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 79:55]
            node _T_12 = add(accumulatorUpper, _T_11) @[Booth8Cycle.scala 79:35]
            node _T_13 = tail(_T_12, 1) @[Booth8Cycle.scala 79:35]
            accCalc <= _T_13 @[Booth8Cycle.scala 79:15]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_14 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_14 : @[Conditional.scala 39:67]
              node _T_15 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 84:55]
              node _T_16 = sub(accumulatorUpper, _T_15) @[Booth8Cycle.scala 84:35]
              node _T_17 = tail(_T_16, 1) @[Booth8Cycle.scala 84:35]
              accCalc <= _T_17 @[Booth8Cycle.scala 84:15]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_18 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_18 : @[Conditional.scala 39:67]
                node _T_19 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 89:35]
                node _T_20 = tail(_T_19, 1) @[Booth8Cycle.scala 89:35]
                accCalc <= _T_20 @[Booth8Cycle.scala 89:15]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_21 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_21 : @[Conditional.scala 39:67]
                  node _T_22 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 94:35]
                  node _T_23 = tail(_T_22, 1) @[Booth8Cycle.scala 94:35]
                  accCalc <= _T_23 @[Booth8Cycle.scala 94:15]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_24 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_24 : @[Conditional.scala 39:67]
                    accCalc <= accumulatorUpper @[Booth8Cycle.scala 100:15]
                    skip @[Conditional.scala 39:67]
    when io.start : @[Booth8Cycle.scala 105:19]
      node _T_25 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:28]
      node _T_26 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 106:41]
      node _T_27 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_28 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_29 = cat(_T_28, _T_27) @[Cat.scala 29:58]
      node _T_30 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_31 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_32 = cat(_T_31, _T_30) @[Cat.scala 29:58]
      node _T_33 = cat(_T_32, _T_29) @[Cat.scala 29:58]
      node _T_34 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_35 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_36 = cat(_T_35, _T_34) @[Cat.scala 29:58]
      node _T_37 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_38 = cat(_T_25, _T_26) @[Cat.scala 29:58]
      node _T_39 = cat(_T_38, accCalc) @[Cat.scala 29:58]
      node _T_40 = cat(_T_39, _T_37) @[Cat.scala 29:58]
      node _T_41 = cat(_T_40, _T_36) @[Cat.scala 29:58]
      node _T_42 = cat(_T_41, _T_33) @[Cat.scala 29:58]
      accShift <= _T_42 @[Booth8Cycle.scala 106:14]
      skip @[Booth8Cycle.scala 105:19]
    else : @[Booth8Cycle.scala 108:14]
      node _T_43 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:28]
      node _T_44 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 109:41]
      node _T_45 = bits(accLower, 15, 2) @[Booth8Cycle.scala 109:64]
      node _T_46 = cat(accCalc, _T_45) @[Cat.scala 29:58]
      node _T_47 = cat(_T_43, _T_44) @[Cat.scala 29:58]
      node _T_48 = cat(_T_47, _T_46) @[Cat.scala 29:58]
      accShift <= _T_48 @[Booth8Cycle.scala 109:14]
      skip @[Booth8Cycle.scala 108:14]
    node _T_49 = dshr(mpl, UInt<2>("h02")) @[Booth8Cycle.scala 113:19]
    nextMPL <= _T_49 @[Booth8Cycle.scala 113:12]
    io.product is invalid @[Booth8Cycle.scala 120:15]
    when io.start : @[Booth8Cycle.scala 122:19]
      node _T_50 = bits(accShift, 31, 16) @[Booth8Cycle.scala 125:25]
      accUpper <= _T_50 @[Booth8Cycle.scala 125:14]
      node _T_51 = bits(accShift, 15, 0) @[Booth8Cycle.scala 126:25]
      accLower <= _T_51 @[Booth8Cycle.scala 126:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 127:14]
      node _T_52 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_53 = dshr(_T_52, UInt<2>("h02")) @[Booth8Cycle.scala 128:41]
      mpl <= _T_53 @[Booth8Cycle.scala 128:14]
      skip @[Booth8Cycle.scala 122:19]
    else : @[Booth8Cycle.scala 132:14]
      node _T_54 = not(io.finished) @[Booth8Cycle.scala 134:11]
      when _T_54 : @[Booth8Cycle.scala 134:25]
        mcd <= mcd @[Booth8Cycle.scala 140:16]
        mpl <= nextMPL @[Booth8Cycle.scala 141:16]
        node _T_55 = bits(accShift, 31, 16) @[Booth8Cycle.scala 142:27]
        accUpper <= _T_55 @[Booth8Cycle.scala 142:16]
        node _T_56 = bits(accShift, 15, 0) @[Booth8Cycle.scala 143:27]
        accLower <= _T_56 @[Booth8Cycle.scala 143:16]
        skip @[Booth8Cycle.scala 134:25]
      else : @[Booth8Cycle.scala 146:16]
        io.product <= accShift @[Booth8Cycle.scala 147:18]
        skip @[Booth8Cycle.scala 146:16]
      skip @[Booth8Cycle.scala 132:14]
    
