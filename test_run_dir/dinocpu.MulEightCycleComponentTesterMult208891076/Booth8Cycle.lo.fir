circuit Booth8Cycle :
  module Booth8Cycle :
    input clock : Clock
    input reset : UInt<1>
    input io_multiplicand : UInt<16>
    input io_multiplier : UInt<16>
    input io_start : UInt<1>
    output io_finished : UInt<1>
    output io_product : UInt<32>
  
    reg accUpper : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accUpper) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with :
      reset => (UInt<1>("h0"), accLower) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with :
      reset => (UInt<1>("h0"), mcd) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with :
      reset => (UInt<1>("h0"), mpl) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<5>, clock with :
      reset => (UInt<1>("h0"), iter) @[Booth8Cycle.scala 21:32]
    node _T = bits(mpl, 2, 0) @[Booth8Cycle.scala 41:19]
    node operation = _T @[Booth8Cycle.scala 28:23 Booth8Cycle.scala 41:13]
    node _T_1 = eq(UInt<1>("h0"), operation) @[Conditional.scala 37:30]
    node _T_2 = bits(reset, 0, 0) @[Booth8Cycle.scala 47:13]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[Booth8Cycle.scala 47:13]
    node _T_4 = eq(UInt<1>("h1"), operation) @[Conditional.scala 37:30]
    node _T_5 = add(accUpper, mcd) @[Booth8Cycle.scala 50:27]
    node _T_6 = tail(_T_5, 1) @[Booth8Cycle.scala 50:27]
    node _T_7 = bits(reset, 0, 0) @[Booth8Cycle.scala 51:13]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[Booth8Cycle.scala 51:13]
    node _T_9 = bits(reset, 0, 0) @[Booth8Cycle.scala 52:13]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Booth8Cycle.scala 52:13]
    node _T_11 = eq(UInt<2>("h2"), operation) @[Conditional.scala 37:30]
    node _T_12 = add(accUpper, mcd) @[Booth8Cycle.scala 55:27]
    node _T_13 = tail(_T_12, 1) @[Booth8Cycle.scala 55:27]
    node _T_14 = bits(reset, 0, 0) @[Booth8Cycle.scala 56:13]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[Booth8Cycle.scala 56:13]
    node _T_16 = bits(reset, 0, 0) @[Booth8Cycle.scala 57:13]
    node _T_17 = eq(_T_16, UInt<1>("h0")) @[Booth8Cycle.scala 57:13]
    node _T_18 = eq(UInt<2>("h3"), operation) @[Conditional.scala 37:30]
    node _T_49 = dshl(mcd, UInt<1>("h1")) @[Booth8Cycle.scala 87:20]
    node doubleMCD = bits(_T_49, 15, 0) @[Booth8Cycle.scala 29:23 Booth8Cycle.scala 87:13]
    node _T_19 = add(accUpper, doubleMCD) @[Booth8Cycle.scala 60:27]
    node _T_20 = tail(_T_19, 1) @[Booth8Cycle.scala 60:27]
    node _T_21 = bits(reset, 0, 0) @[Booth8Cycle.scala 61:13]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[Booth8Cycle.scala 61:13]
    node _T_23 = bits(reset, 0, 0) @[Booth8Cycle.scala 62:13]
    node _T_24 = eq(_T_23, UInt<1>("h0")) @[Booth8Cycle.scala 62:13]
    node _T_25 = eq(UInt<3>("h4"), operation) @[Conditional.scala 37:30]
    node _T_26 = sub(accUpper, doubleMCD) @[Booth8Cycle.scala 65:27]
    node _T_27 = tail(_T_26, 1) @[Booth8Cycle.scala 65:27]
    node _T_28 = bits(reset, 0, 0) @[Booth8Cycle.scala 66:13]
    node _T_29 = eq(_T_28, UInt<1>("h0")) @[Booth8Cycle.scala 66:13]
    node _T_30 = bits(reset, 0, 0) @[Booth8Cycle.scala 67:13]
    node _T_31 = eq(_T_30, UInt<1>("h0")) @[Booth8Cycle.scala 67:13]
    node _T_32 = eq(UInt<3>("h5"), operation) @[Conditional.scala 37:30]
    node _T_33 = sub(accUpper, mcd) @[Booth8Cycle.scala 70:27]
    node _T_34 = tail(_T_33, 1) @[Booth8Cycle.scala 70:27]
    node _T_35 = bits(reset, 0, 0) @[Booth8Cycle.scala 71:13]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[Booth8Cycle.scala 71:13]
    node _T_37 = bits(reset, 0, 0) @[Booth8Cycle.scala 72:13]
    node _T_38 = eq(_T_37, UInt<1>("h0")) @[Booth8Cycle.scala 72:13]
    node _T_39 = eq(UInt<3>("h6"), operation) @[Conditional.scala 37:30]
    node _T_40 = sub(accUpper, mcd) @[Booth8Cycle.scala 75:27]
    node _T_41 = tail(_T_40, 1) @[Booth8Cycle.scala 75:27]
    node _T_42 = bits(reset, 0, 0) @[Booth8Cycle.scala 76:13]
    node _T_43 = eq(_T_42, UInt<1>("h0")) @[Booth8Cycle.scala 76:13]
    node _T_44 = bits(reset, 0, 0) @[Booth8Cycle.scala 77:13]
    node _T_45 = eq(_T_44, UInt<1>("h0")) @[Booth8Cycle.scala 77:13]
    node _T_46 = eq(UInt<3>("h7"), operation) @[Conditional.scala 37:30]
    node _T_47 = bits(reset, 0, 0) @[Booth8Cycle.scala 82:13]
    node _T_48 = eq(_T_47, UInt<1>("h0")) @[Booth8Cycle.scala 82:13]
    node _GEN_0 = validif(_T_46, accUpper) @[Conditional.scala 39:67]
    node _GEN_1 = mux(_T_39, _T_41, _GEN_0) @[Conditional.scala 39:67]
    node _GEN_2 = mux(_T_32, _T_34, _GEN_1) @[Conditional.scala 39:67]
    node _GEN_3 = mux(_T_25, _T_27, _GEN_2) @[Conditional.scala 39:67]
    node _GEN_4 = mux(_T_18, _T_20, _GEN_3) @[Conditional.scala 39:67]
    node _GEN_5 = mux(_T_11, _T_13, _GEN_4) @[Conditional.scala 39:67]
    node _GEN_6 = mux(_T_4, _T_6, _GEN_5) @[Conditional.scala 39:67]
    node _GEN_7 = mux(_T_1, accUpper, _GEN_6) @[Conditional.scala 40:58]
    node _T_50 = add(iter, UInt<1>("h1")) @[Booth8Cycle.scala 90:20]
    node _T_51 = tail(_T_50, 1) @[Booth8Cycle.scala 90:20]
    node accCalc = _GEN_7 @[Booth8Cycle.scala 26:23 Booth8Cycle.scala 46:15 Booth8Cycle.scala 50:15 Booth8Cycle.scala 55:15 Booth8Cycle.scala 60:15 Booth8Cycle.scala 65:15 Booth8Cycle.scala 70:15 Booth8Cycle.scala 75:15 Booth8Cycle.scala 81:15]
    node _T_52 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 93:26]
    node _T_53 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 93:39]
    node _T_54 = bits(accLower, 15, 2) @[Booth8Cycle.scala 93:62]
    node _T_55 = cat(accCalc, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_52, _T_53) @[Cat.scala 29:58]
    node _T_57 = cat(_T_56, _T_55) @[Cat.scala 29:58]
    node _T_58 = dshr(mpl, UInt<2>("h2")) @[Booth8Cycle.scala 94:19]
    node _T_59 = cat(accUpper, accLower) @[Cat.scala 29:58]
    node _T_60 = cat(io_multiplier, UInt<1>("h0")) @[Cat.scala 29:58]
    node _T_61 = bits(reset, 0, 0) @[Booth8Cycle.scala 112:11]
    node _T_62 = eq(_T_61, UInt<1>("h0")) @[Booth8Cycle.scala 112:11]
    node _T_63 = lt(iter, UInt<4>("h8")) @[Booth8Cycle.scala 117:16]
    node _T_64 = bits(reset, 0, 0) @[Booth8Cycle.scala 119:13]
    node _T_65 = eq(_T_64, UInt<1>("h0")) @[Booth8Cycle.scala 119:13]
    node _T_66 = bits(reset, 0, 0) @[Booth8Cycle.scala 120:13]
    node _T_67 = eq(_T_66, UInt<1>("h0")) @[Booth8Cycle.scala 120:13]
    node _T_68 = bits(reset, 0, 0) @[Booth8Cycle.scala 121:13]
    node _T_69 = eq(_T_68, UInt<1>("h0")) @[Booth8Cycle.scala 121:13]
    node _T_70 = bits(reset, 0, 0) @[Booth8Cycle.scala 122:13]
    node _T_71 = eq(_T_70, UInt<1>("h0")) @[Booth8Cycle.scala 122:13]
    node accShift = _T_57 @[Booth8Cycle.scala 27:23 Booth8Cycle.scala 93:12]
    node _T_72 = bits(accShift, 31, 16) @[Booth8Cycle.scala 126:27]
    node _T_73 = bits(accShift, 15, 0) @[Booth8Cycle.scala 127:27]
    node nextMPL = _T_58 @[Booth8Cycle.scala 30:23 Booth8Cycle.scala 94:12]
    node _GEN_8 = mux(_T_63, nextMPL, mpl) @[Booth8Cycle.scala 117:23]
    node _GEN_9 = mux(_T_63, _T_72, accUpper) @[Booth8Cycle.scala 117:23]
    node _GEN_10 = mux(_T_63, _T_73, accLower) @[Booth8Cycle.scala 117:23]
    node nextIter = _T_51 @[Booth8Cycle.scala 25:23 Booth8Cycle.scala 90:12]
    node _GEN_11 = mux(_T_63, nextIter, iter) @[Booth8Cycle.scala 117:23]
    node _GEN_12 = mux(_T_63, UInt<1>("h0"), UInt<1>("h1")) @[Booth8Cycle.scala 117:23]
    node _GEN_13 = mux(io_start, UInt<1>("h0"), _GEN_9) @[Booth8Cycle.scala 106:19]
    node _GEN_14 = mux(io_start, UInt<1>("h0"), _GEN_10) @[Booth8Cycle.scala 106:19]
    node _GEN_15 = mux(io_start, io_multiplicand, mcd) @[Booth8Cycle.scala 106:19]
    node _GEN_16 = mux(io_start, _T_60, _GEN_8) @[Booth8Cycle.scala 106:19]
    node _GEN_17 = mux(io_start, UInt<1>("h0"), _GEN_11) @[Booth8Cycle.scala 106:19]
    node _GEN_18 = mux(io_start, UInt<1>("h0"), _GEN_12) @[Booth8Cycle.scala 106:19]
    io_finished <= _GEN_18 @[Booth8Cycle.scala 104:15 Booth8Cycle.scala 132:19]
    io_product <= _T_59 @[Booth8Cycle.scala 103:15]
    accUpper <= mux(reset, UInt<16>("h0"), _GEN_13) @[Booth8Cycle.scala 107:18 Booth8Cycle.scala 126:16]
    accLower <= mux(reset, UInt<16>("h0"), _GEN_14) @[Booth8Cycle.scala 108:14 Booth8Cycle.scala 127:16]
    mcd <= mux(reset, UInt<16>("h0"), _GEN_15) @[Booth8Cycle.scala 109:14]
    mpl <= mux(reset, UInt<17>("h0"), _GEN_16) @[Booth8Cycle.scala 110:14 Booth8Cycle.scala 125:16]
    iter <= mux(reset, UInt<5>("h0"), _GEN_17) @[Booth8Cycle.scala 111:14 Booth8Cycle.scala 128:16 Booth8Cycle.scala 133:19]
    printf(clock, and(and(and(UInt<1>("h1"), _T_1), _T_3), UInt<1>("h1")), "    000: Do Nothing\n") @[Booth8Cycle.scala 47:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), _T_4), _T_8), UInt<1>("h1")), "    001: Add Multiplicand\n") @[Booth8Cycle.scala 51:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), _T_4), _T_10), UInt<1>("h1")), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 52:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), _T_11), _T_15), UInt<1>("h1")), "    010: Add Multiplicand\n") @[Booth8Cycle.scala 56:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), _T_11), _T_17), UInt<1>("h1")), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 57:13]
    printf(clock, and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), _T_18), _T_22), UInt<1>("h1")), "    011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 61:13]
    printf(clock, and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), _T_18), _T_24), UInt<1>("h1")), "     --> Adding %d to %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 62:13]
    printf(clock, and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), eq(_T_18, UInt<1>("h0"))), _T_25), _T_29), UInt<1>("h1")), "    100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 66:13]
    printf(clock, and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), eq(_T_18, UInt<1>("h0"))), _T_25), _T_31), UInt<1>("h1")), "     --> Subtracting %d from %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 67:13]
    printf(clock, and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), eq(_T_18, UInt<1>("h0"))), eq(_T_25, UInt<1>("h0"))), _T_32), _T_36), UInt<1>("h1")), "    101: Subtract Multiplicand\n") @[Booth8Cycle.scala 71:13]
    printf(clock, and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), eq(_T_18, UInt<1>("h0"))), eq(_T_25, UInt<1>("h0"))), _T_32), _T_38), UInt<1>("h1")), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 72:13]
    printf(clock, and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), eq(_T_18, UInt<1>("h0"))), eq(_T_25, UInt<1>("h0"))), eq(_T_32, UInt<1>("h0"))), _T_39), _T_43), UInt<1>("h1")), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 76:13]
    printf(clock, and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), eq(_T_18, UInt<1>("h0"))), eq(_T_25, UInt<1>("h0"))), eq(_T_32, UInt<1>("h0"))), _T_39), _T_45), UInt<1>("h1")), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 77:13]
    printf(clock, and(and(and(and(and(and(and(and(and(and(UInt<1>("h1"), eq(_T_1, UInt<1>("h0"))), eq(_T_4, UInt<1>("h0"))), eq(_T_11, UInt<1>("h0"))), eq(_T_18, UInt<1>("h0"))), eq(_T_25, UInt<1>("h0"))), eq(_T_32, UInt<1>("h0"))), eq(_T_39, UInt<1>("h0"))), _T_46), _T_48), UInt<1>("h1")), "    111: Do Nothing\n") @[Booth8Cycle.scala 82:13]
    printf(clock, and(and(and(UInt<1>("h1"), io_start), _T_62), UInt<1>("h1")), "** Test Initialized: accumulator: %b-%b  || multiplier: %b  ||  multiplicand: %b\n", accUpper, accLower, io_multiplier, mcd) @[Booth8Cycle.scala 112:11]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_65), UInt<1>("h1")), "Iteration: %d\n", iter) @[Booth8Cycle.scala 119:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_67), UInt<1>("h1")), "  Registered Values:\n") @[Booth8Cycle.scala 120:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_69), UInt<1>("h1")), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 121:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), eq(io_start, UInt<1>("h0"))), _T_63), _T_71), UInt<1>("h1")), "     * AccUpper: %b | AccLower: %b \n", accUpper, accLower) @[Booth8Cycle.scala 122:13]
