;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Booth8Cycle.scala 21:32]
    wire nextIter : UInt<4> @[Booth8Cycle.scala 25:23]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 26:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 27:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 28:23]
    node _T = bits(mpl, 2, 0) @[Booth8Cycle.scala 31:19]
    operation <= _T @[Booth8Cycle.scala 31:13]
    node _T_1 = bits(reset, 0, 0) @[Booth8Cycle.scala 32:9]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[Booth8Cycle.scala 32:9]
    when _T_2 : @[Booth8Cycle.scala 32:9]
      printf(clock, UInt<1>(1), "Three-Bit-Op: %b\n", operation) @[Booth8Cycle.scala 32:9]
      skip @[Booth8Cycle.scala 32:9]
    node _T_3 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      node _T_4 = bits(reset, 0, 0) @[Booth8Cycle.scala 37:13]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[Booth8Cycle.scala 37:13]
      when _T_5 : @[Booth8Cycle.scala 37:13]
        printf(clock, UInt<1>(1), "000: Do Nothing\n") @[Booth8Cycle.scala 37:13]
        skip @[Booth8Cycle.scala 37:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_6 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        node _T_7 = add(accUpper, mcd) @[Booth8Cycle.scala 40:27]
        node _T_8 = tail(_T_7, 1) @[Booth8Cycle.scala 40:27]
        accCalc <= _T_8 @[Booth8Cycle.scala 40:15]
        node _T_9 = bits(reset, 0, 0) @[Booth8Cycle.scala 41:13]
        node _T_10 = eq(_T_9, UInt<1>("h00")) @[Booth8Cycle.scala 41:13]
        when _T_10 : @[Booth8Cycle.scala 41:13]
          printf(clock, UInt<1>(1), "001: Add Multiplicand\n") @[Booth8Cycle.scala 41:13]
          skip @[Booth8Cycle.scala 41:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_11 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_11 : @[Conditional.scala 39:67]
          node _T_12 = add(accUpper, mcd) @[Booth8Cycle.scala 44:27]
          node _T_13 = tail(_T_12, 1) @[Booth8Cycle.scala 44:27]
          accCalc <= _T_13 @[Booth8Cycle.scala 44:15]
          node _T_14 = bits(reset, 0, 0) @[Booth8Cycle.scala 45:13]
          node _T_15 = eq(_T_14, UInt<1>("h00")) @[Booth8Cycle.scala 45:13]
          when _T_15 : @[Booth8Cycle.scala 45:13]
            printf(clock, UInt<1>(1), "010: Add Multiplicand\n") @[Booth8Cycle.scala 45:13]
            skip @[Booth8Cycle.scala 45:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_16 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_16 : @[Conditional.scala 39:67]
            node _T_17 = add(accUpper, mcd) @[Booth8Cycle.scala 48:27]
            node _T_18 = tail(_T_17, 1) @[Booth8Cycle.scala 48:27]
            node _T_19 = add(_T_18, mcd) @[Booth8Cycle.scala 48:33]
            node _T_20 = tail(_T_19, 1) @[Booth8Cycle.scala 48:33]
            accCalc <= _T_20 @[Booth8Cycle.scala 48:15]
            node _T_21 = bits(reset, 0, 0) @[Booth8Cycle.scala 49:13]
            node _T_22 = eq(_T_21, UInt<1>("h00")) @[Booth8Cycle.scala 49:13]
            when _T_22 : @[Booth8Cycle.scala 49:13]
              printf(clock, UInt<1>(1), "011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 49:13]
              skip @[Booth8Cycle.scala 49:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_23 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_23 : @[Conditional.scala 39:67]
              node _T_24 = sub(accUpper, mcd) @[Booth8Cycle.scala 52:27]
              node _T_25 = tail(_T_24, 1) @[Booth8Cycle.scala 52:27]
              node _T_26 = sub(_T_25, mcd) @[Booth8Cycle.scala 52:33]
              node _T_27 = tail(_T_26, 1) @[Booth8Cycle.scala 52:33]
              accCalc <= _T_27 @[Booth8Cycle.scala 52:15]
              node _T_28 = bits(reset, 0, 0) @[Booth8Cycle.scala 53:13]
              node _T_29 = eq(_T_28, UInt<1>("h00")) @[Booth8Cycle.scala 53:13]
              when _T_29 : @[Booth8Cycle.scala 53:13]
                printf(clock, UInt<1>(1), "100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 53:13]
                skip @[Booth8Cycle.scala 53:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_30 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_30 : @[Conditional.scala 39:67]
                node _T_31 = sub(accUpper, mcd) @[Booth8Cycle.scala 56:27]
                node _T_32 = tail(_T_31, 1) @[Booth8Cycle.scala 56:27]
                accCalc <= _T_32 @[Booth8Cycle.scala 56:15]
                node _T_33 = bits(reset, 0, 0) @[Booth8Cycle.scala 57:13]
                node _T_34 = eq(_T_33, UInt<1>("h00")) @[Booth8Cycle.scala 57:13]
                when _T_34 : @[Booth8Cycle.scala 57:13]
                  printf(clock, UInt<1>(1), "110: Subtract Multiplicand\n") @[Booth8Cycle.scala 57:13]
                  skip @[Booth8Cycle.scala 57:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_35 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_35 : @[Conditional.scala 39:67]
                  node _T_36 = sub(accUpper, mcd) @[Booth8Cycle.scala 60:27]
                  node _T_37 = tail(_T_36, 1) @[Booth8Cycle.scala 60:27]
                  accCalc <= _T_37 @[Booth8Cycle.scala 60:15]
                  node _T_38 = bits(reset, 0, 0) @[Booth8Cycle.scala 61:13]
                  node _T_39 = eq(_T_38, UInt<1>("h00")) @[Booth8Cycle.scala 61:13]
                  when _T_39 : @[Booth8Cycle.scala 61:13]
                    printf(clock, UInt<1>(1), "110: Subtract Multiplicand\n") @[Booth8Cycle.scala 61:13]
                    skip @[Booth8Cycle.scala 61:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_40 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_40 : @[Conditional.scala 39:67]
                    node _T_41 = bits(reset, 0, 0) @[Booth8Cycle.scala 65:13]
                    node _T_42 = eq(_T_41, UInt<1>("h00")) @[Booth8Cycle.scala 65:13]
                    when _T_42 : @[Booth8Cycle.scala 65:13]
                      printf(clock, UInt<1>(1), "111: Do Nothing\n") @[Booth8Cycle.scala 65:13]
                      skip @[Booth8Cycle.scala 65:13]
                    skip @[Conditional.scala 39:67]
    node _T_43 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 69:26]
    node _T_44 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 69:39]
    node _T_45 = bits(accLower, 15, 2) @[Booth8Cycle.scala 69:62]
    node _T_46 = cat(accCalc, _T_45) @[Cat.scala 29:58]
    node _T_47 = cat(_T_43, _T_44) @[Cat.scala 29:58]
    node _T_48 = cat(_T_47, _T_46) @[Cat.scala 29:58]
    accShift <= _T_48 @[Booth8Cycle.scala 69:12]
    node _T_49 = cat(accUpper, accLower) @[Cat.scala 29:58]
    io.product <= _T_49 @[Booth8Cycle.scala 77:15]
    io.finished <= UInt<1>("h00") @[Booth8Cycle.scala 78:15]
    when io.start : @[Booth8Cycle.scala 80:19]
      accUpper <= UInt<1>("h00") @[Booth8Cycle.scala 81:18]
      accLower <= UInt<1>("h00") @[Booth8Cycle.scala 82:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 83:14]
      node _T_50 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      mpl <= _T_50 @[Booth8Cycle.scala 84:14]
      iter <= UInt<1>("h00") @[Booth8Cycle.scala 85:14]
      skip @[Booth8Cycle.scala 80:19]
    else : @[Booth8Cycle.scala 89:14]
      node _T_51 = lt(iter, UInt<4>("h08")) @[Booth8Cycle.scala 90:16]
      when _T_51 : @[Booth8Cycle.scala 90:23]
        node _T_52 = dshr(mpl, UInt<2>("h02")) @[Booth8Cycle.scala 92:23]
        mpl <= _T_52 @[Booth8Cycle.scala 92:16]
        node _T_53 = bits(accShift, 31, 16) @[Booth8Cycle.scala 93:27]
        accUpper <= _T_53 @[Booth8Cycle.scala 93:16]
        node _T_54 = bits(accShift, 15, 0) @[Booth8Cycle.scala 94:27]
        accLower <= _T_54 @[Booth8Cycle.scala 94:16]
        node _T_55 = add(iter, UInt<1>("h01")) @[Booth8Cycle.scala 95:24]
        node _T_56 = tail(_T_55, 1) @[Booth8Cycle.scala 95:24]
        iter <= _T_56 @[Booth8Cycle.scala 95:16]
        skip @[Booth8Cycle.scala 90:23]
      else : @[Booth8Cycle.scala 98:16]
        io.finished <= UInt<1>("h01") @[Booth8Cycle.scala 99:19]
        iter <= iter @[Booth8Cycle.scala 100:19]
        skip @[Booth8Cycle.scala 98:16]
      skip @[Booth8Cycle.scala 89:14]
    
