;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Booth8Cycle.scala 21:32]
    wire nextIter : UInt<4> @[Booth8Cycle.scala 25:23]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 26:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 27:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 28:23]
    node _T = add(iter, UInt<1>("h01")) @[Booth8Cycle.scala 31:20]
    node _T_1 = tail(_T, 1) @[Booth8Cycle.scala 31:20]
    nextIter <= _T_1 @[Booth8Cycle.scala 31:12]
    accCalc is invalid @[Booth8Cycle.scala 32:12]
    accShift is invalid @[Booth8Cycle.scala 33:12]
    node _T_2 = bits(mpl, 2, 0) @[Booth8Cycle.scala 36:19]
    operation <= _T_2 @[Booth8Cycle.scala 36:13]
    node _T_3 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = add(accUpper, mcd) @[Booth8Cycle.scala 44:27]
        node _T_6 = tail(_T_5, 1) @[Booth8Cycle.scala 44:27]
        accCalc <= _T_6 @[Booth8Cycle.scala 44:15]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          node _T_8 = add(accUpper, mcd) @[Booth8Cycle.scala 48:27]
          node _T_9 = tail(_T_8, 1) @[Booth8Cycle.scala 48:27]
          accCalc <= _T_9 @[Booth8Cycle.scala 48:15]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            node _T_11 = add(accUpper, mcd) @[Booth8Cycle.scala 52:27]
            node _T_12 = tail(_T_11, 1) @[Booth8Cycle.scala 52:27]
            node _T_13 = add(_T_12, mcd) @[Booth8Cycle.scala 52:33]
            node _T_14 = tail(_T_13, 1) @[Booth8Cycle.scala 52:33]
            accCalc <= _T_14 @[Booth8Cycle.scala 52:15]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_15 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_15 : @[Conditional.scala 39:67]
              node _T_16 = sub(accUpper, mcd) @[Booth8Cycle.scala 56:27]
              node _T_17 = tail(_T_16, 1) @[Booth8Cycle.scala 56:27]
              node _T_18 = sub(_T_17, mcd) @[Booth8Cycle.scala 56:33]
              node _T_19 = tail(_T_18, 1) @[Booth8Cycle.scala 56:33]
              accCalc <= _T_19 @[Booth8Cycle.scala 56:15]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_20 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_20 : @[Conditional.scala 39:67]
                node _T_21 = sub(accUpper, mcd) @[Booth8Cycle.scala 60:27]
                node _T_22 = tail(_T_21, 1) @[Booth8Cycle.scala 60:27]
                accCalc <= _T_22 @[Booth8Cycle.scala 60:15]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_23 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_23 : @[Conditional.scala 39:67]
                  node _T_24 = sub(accUpper, mcd) @[Booth8Cycle.scala 64:27]
                  node _T_25 = tail(_T_24, 1) @[Booth8Cycle.scala 64:27]
                  accCalc <= _T_25 @[Booth8Cycle.scala 64:15]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_26 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_26 : @[Conditional.scala 39:67]
                    skip @[Conditional.scala 39:67]
    node _T_27 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 73:26]
    node _T_28 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 73:39]
    node _T_29 = bits(accLower, 15, 2) @[Booth8Cycle.scala 73:62]
    node _T_30 = cat(accCalc, _T_29) @[Cat.scala 29:58]
    node _T_31 = cat(_T_27, _T_28) @[Cat.scala 29:58]
    node _T_32 = cat(_T_31, _T_30) @[Cat.scala 29:58]
    accShift <= _T_32 @[Booth8Cycle.scala 73:12]
    node _T_33 = cat(accUpper, accLower) @[Cat.scala 29:58]
    io.product <= _T_33 @[Booth8Cycle.scala 81:15]
    io.finished <= UInt<1>("h00") @[Booth8Cycle.scala 82:15]
    when io.start : @[Booth8Cycle.scala 84:19]
      accUpper <= UInt<1>("h00") @[Booth8Cycle.scala 85:18]
      accLower <= UInt<1>("h00") @[Booth8Cycle.scala 86:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 87:14]
      node _T_34 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      mpl <= _T_34 @[Booth8Cycle.scala 88:14]
      iter <= UInt<1>("h00") @[Booth8Cycle.scala 89:14]
      skip @[Booth8Cycle.scala 84:19]
    else : @[Booth8Cycle.scala 93:14]
      node _T_35 = lt(iter, UInt<4>("h08")) @[Booth8Cycle.scala 94:16]
      when _T_35 : @[Booth8Cycle.scala 94:23]
        node _T_36 = bits(reset, 0, 0) @[Booth8Cycle.scala 96:13]
        node _T_37 = eq(_T_36, UInt<1>("h00")) @[Booth8Cycle.scala 96:13]
        when _T_37 : @[Booth8Cycle.scala 96:13]
          printf(clock, UInt<1>(1), "Iteration: %d\n", iter) @[Booth8Cycle.scala 96:13]
          skip @[Booth8Cycle.scala 96:13]
        node _T_38 = bits(reset, 0, 0) @[Booth8Cycle.scala 97:13]
        node _T_39 = eq(_T_38, UInt<1>("h00")) @[Booth8Cycle.scala 97:13]
        when _T_39 : @[Booth8Cycle.scala 97:13]
          printf(clock, UInt<1>(1), "  Registered Values:\n") @[Booth8Cycle.scala 97:13]
          skip @[Booth8Cycle.scala 97:13]
        node _T_40 = bits(reset, 0, 0) @[Booth8Cycle.scala 98:13]
        node _T_41 = eq(_T_40, UInt<1>("h00")) @[Booth8Cycle.scala 98:13]
        when _T_41 : @[Booth8Cycle.scala 98:13]
          printf(clock, UInt<1>(1), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 98:13]
          skip @[Booth8Cycle.scala 98:13]
        node _T_42 = bits(reset, 0, 0) @[Booth8Cycle.scala 99:13]
        node _T_43 = eq(_T_42, UInt<1>("h00")) @[Booth8Cycle.scala 99:13]
        when _T_43 : @[Booth8Cycle.scala 99:13]
          printf(clock, UInt<1>(1), "     * AccUpper | AccLower: %b | %b\n", accUpper, accLower) @[Booth8Cycle.scala 99:13]
          skip @[Booth8Cycle.scala 99:13]
        node _T_44 = dshr(mpl, UInt<2>("h02")) @[Booth8Cycle.scala 100:23]
        mpl <= _T_44 @[Booth8Cycle.scala 100:16]
        node _T_45 = bits(accShift, 31, 16) @[Booth8Cycle.scala 101:27]
        accUpper <= _T_45 @[Booth8Cycle.scala 101:16]
        node _T_46 = bits(accShift, 15, 0) @[Booth8Cycle.scala 102:27]
        accLower <= _T_46 @[Booth8Cycle.scala 102:16]
        iter <= nextIter @[Booth8Cycle.scala 103:16]
        skip @[Booth8Cycle.scala 94:23]
      else : @[Booth8Cycle.scala 106:16]
        io.finished <= UInt<1>("h01") @[Booth8Cycle.scala 107:19]
        iter <= iter @[Booth8Cycle.scala 108:19]
        skip @[Booth8Cycle.scala 106:16]
      skip @[Booth8Cycle.scala 93:14]
    
