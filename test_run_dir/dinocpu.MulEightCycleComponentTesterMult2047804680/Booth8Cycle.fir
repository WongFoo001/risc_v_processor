;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 18:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 19:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 20:26]
    reg iter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Booth8Cycle.scala 21:32]
    wire nextIter : UInt<5> @[Booth8Cycle.scala 25:23]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 26:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 27:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 28:23]
    wire doubleMCD : UInt<16> @[Booth8Cycle.scala 29:23]
    wire nextMPL : UInt<17> @[Booth8Cycle.scala 30:23]
    nextIter is invalid @[Booth8Cycle.scala 33:13]
    nextMPL is invalid @[Booth8Cycle.scala 34:13]
    doubleMCD is invalid @[Booth8Cycle.scala 35:13]
    accCalc is invalid @[Booth8Cycle.scala 36:13]
    accShift is invalid @[Booth8Cycle.scala 37:13]
    node _T = bits(mpl, 2, 0) @[Booth8Cycle.scala 40:19]
    operation <= _T @[Booth8Cycle.scala 40:13]
    node _T_1 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_1 : @[Conditional.scala 40:58]
      node _T_2 = bits(reset, 0, 0) @[Booth8Cycle.scala 45:13]
      node _T_3 = eq(_T_2, UInt<1>("h00")) @[Booth8Cycle.scala 45:13]
      when _T_3 : @[Booth8Cycle.scala 45:13]
        printf(clock, UInt<1>(1), "    000: Do Nothing\n") @[Booth8Cycle.scala 45:13]
        skip @[Booth8Cycle.scala 45:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = add(accUpper, mcd) @[Booth8Cycle.scala 48:27]
        node _T_6 = tail(_T_5, 1) @[Booth8Cycle.scala 48:27]
        accCalc <= _T_6 @[Booth8Cycle.scala 48:15]
        node _T_7 = bits(reset, 0, 0) @[Booth8Cycle.scala 49:13]
        node _T_8 = eq(_T_7, UInt<1>("h00")) @[Booth8Cycle.scala 49:13]
        when _T_8 : @[Booth8Cycle.scala 49:13]
          printf(clock, UInt<1>(1), "    001: Add Multiplicand\n") @[Booth8Cycle.scala 49:13]
          skip @[Booth8Cycle.scala 49:13]
        node _T_9 = bits(reset, 0, 0) @[Booth8Cycle.scala 50:13]
        node _T_10 = eq(_T_9, UInt<1>("h00")) @[Booth8Cycle.scala 50:13]
        when _T_10 : @[Booth8Cycle.scala 50:13]
          printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 50:13]
          skip @[Booth8Cycle.scala 50:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_11 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_11 : @[Conditional.scala 39:67]
          node _T_12 = add(accUpper, mcd) @[Booth8Cycle.scala 53:27]
          node _T_13 = tail(_T_12, 1) @[Booth8Cycle.scala 53:27]
          accCalc <= _T_13 @[Booth8Cycle.scala 53:15]
          node _T_14 = bits(reset, 0, 0) @[Booth8Cycle.scala 54:13]
          node _T_15 = eq(_T_14, UInt<1>("h00")) @[Booth8Cycle.scala 54:13]
          when _T_15 : @[Booth8Cycle.scala 54:13]
            printf(clock, UInt<1>(1), "    010: Add Multiplicand\n") @[Booth8Cycle.scala 54:13]
            skip @[Booth8Cycle.scala 54:13]
          node _T_16 = bits(reset, 0, 0) @[Booth8Cycle.scala 55:13]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[Booth8Cycle.scala 55:13]
          when _T_17 : @[Booth8Cycle.scala 55:13]
            printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 55:13]
            skip @[Booth8Cycle.scala 55:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_18 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_18 : @[Conditional.scala 39:67]
            node _T_19 = add(accUpper, doubleMCD) @[Booth8Cycle.scala 58:27]
            node _T_20 = tail(_T_19, 1) @[Booth8Cycle.scala 58:27]
            accCalc <= _T_20 @[Booth8Cycle.scala 58:15]
            node _T_21 = bits(reset, 0, 0) @[Booth8Cycle.scala 59:13]
            node _T_22 = eq(_T_21, UInt<1>("h00")) @[Booth8Cycle.scala 59:13]
            when _T_22 : @[Booth8Cycle.scala 59:13]
              printf(clock, UInt<1>(1), "    011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 59:13]
              skip @[Booth8Cycle.scala 59:13]
            node _T_23 = bits(reset, 0, 0) @[Booth8Cycle.scala 60:13]
            node _T_24 = eq(_T_23, UInt<1>("h00")) @[Booth8Cycle.scala 60:13]
            when _T_24 : @[Booth8Cycle.scala 60:13]
              printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 60:13]
              skip @[Booth8Cycle.scala 60:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_25 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_25 : @[Conditional.scala 39:67]
              node _T_26 = sub(accUpper, doubleMCD) @[Booth8Cycle.scala 63:27]
              node _T_27 = tail(_T_26, 1) @[Booth8Cycle.scala 63:27]
              accCalc <= _T_27 @[Booth8Cycle.scala 63:15]
              node _T_28 = bits(reset, 0, 0) @[Booth8Cycle.scala 64:13]
              node _T_29 = eq(_T_28, UInt<1>("h00")) @[Booth8Cycle.scala 64:13]
              when _T_29 : @[Booth8Cycle.scala 64:13]
                printf(clock, UInt<1>(1), "    100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 64:13]
                skip @[Booth8Cycle.scala 64:13]
              node _T_30 = bits(reset, 0, 0) @[Booth8Cycle.scala 65:13]
              node _T_31 = eq(_T_30, UInt<1>("h00")) @[Booth8Cycle.scala 65:13]
              when _T_31 : @[Booth8Cycle.scala 65:13]
                printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 65:13]
                skip @[Booth8Cycle.scala 65:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_32 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_32 : @[Conditional.scala 39:67]
                node _T_33 = sub(accUpper, mcd) @[Booth8Cycle.scala 68:27]
                node _T_34 = tail(_T_33, 1) @[Booth8Cycle.scala 68:27]
                accCalc <= _T_34 @[Booth8Cycle.scala 68:15]
                node _T_35 = bits(reset, 0, 0) @[Booth8Cycle.scala 69:13]
                node _T_36 = eq(_T_35, UInt<1>("h00")) @[Booth8Cycle.scala 69:13]
                when _T_36 : @[Booth8Cycle.scala 69:13]
                  printf(clock, UInt<1>(1), "    101: Subtract Multiplicand\n") @[Booth8Cycle.scala 69:13]
                  skip @[Booth8Cycle.scala 69:13]
                node _T_37 = bits(reset, 0, 0) @[Booth8Cycle.scala 70:13]
                node _T_38 = eq(_T_37, UInt<1>("h00")) @[Booth8Cycle.scala 70:13]
                when _T_38 : @[Booth8Cycle.scala 70:13]
                  printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 70:13]
                  skip @[Booth8Cycle.scala 70:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_39 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_39 : @[Conditional.scala 39:67]
                  node _T_40 = sub(accUpper, mcd) @[Booth8Cycle.scala 73:27]
                  node _T_41 = tail(_T_40, 1) @[Booth8Cycle.scala 73:27]
                  accCalc <= _T_41 @[Booth8Cycle.scala 73:15]
                  node _T_42 = bits(reset, 0, 0) @[Booth8Cycle.scala 74:13]
                  node _T_43 = eq(_T_42, UInt<1>("h00")) @[Booth8Cycle.scala 74:13]
                  when _T_43 : @[Booth8Cycle.scala 74:13]
                    printf(clock, UInt<1>(1), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 74:13]
                    skip @[Booth8Cycle.scala 74:13]
                  node _T_44 = bits(reset, 0, 0) @[Booth8Cycle.scala 75:13]
                  node _T_45 = eq(_T_44, UInt<1>("h00")) @[Booth8Cycle.scala 75:13]
                  when _T_45 : @[Booth8Cycle.scala 75:13]
                    printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 75:13]
                    skip @[Booth8Cycle.scala 75:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_46 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_46 : @[Conditional.scala 39:67]
                    node _T_47 = bits(reset, 0, 0) @[Booth8Cycle.scala 79:13]
                    node _T_48 = eq(_T_47, UInt<1>("h00")) @[Booth8Cycle.scala 79:13]
                    when _T_48 : @[Booth8Cycle.scala 79:13]
                      printf(clock, UInt<1>(1), "    111: Do Nothing\n") @[Booth8Cycle.scala 79:13]
                      skip @[Booth8Cycle.scala 79:13]
                    skip @[Conditional.scala 39:67]
    node _T_49 = dshl(mcd, UInt<2>("h02")) @[Booth8Cycle.scala 84:20]
    doubleMCD <= _T_49 @[Booth8Cycle.scala 84:13]
    node _T_50 = add(iter, UInt<1>("h01")) @[Booth8Cycle.scala 87:20]
    node _T_51 = tail(_T_50, 1) @[Booth8Cycle.scala 87:20]
    nextIter <= _T_51 @[Booth8Cycle.scala 87:12]
    node _T_52 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 90:26]
    node _T_53 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 90:39]
    node _T_54 = bits(accLower, 15, 2) @[Booth8Cycle.scala 90:62]
    node _T_55 = cat(accCalc, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_52, _T_53) @[Cat.scala 29:58]
    node _T_57 = cat(_T_56, _T_55) @[Cat.scala 29:58]
    accShift <= _T_57 @[Booth8Cycle.scala 90:12]
    node _T_58 = dshr(nextMPL, UInt<2>("h02")) @[Booth8Cycle.scala 91:16]
    node _T_59 = cat(accUpper, accLower) @[Cat.scala 29:58]
    io.product <= _T_59 @[Booth8Cycle.scala 100:15]
    io.finished <= UInt<1>("h00") @[Booth8Cycle.scala 101:15]
    when io.start : @[Booth8Cycle.scala 103:19]
      accUpper <= UInt<1>("h00") @[Booth8Cycle.scala 104:18]
      accLower <= UInt<1>("h00") @[Booth8Cycle.scala 105:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 106:14]
      node _T_60 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      mpl <= _T_60 @[Booth8Cycle.scala 107:14]
      iter <= UInt<1>("h00") @[Booth8Cycle.scala 108:14]
      node _T_61 = bits(reset, 0, 0) @[Booth8Cycle.scala 109:11]
      node _T_62 = eq(_T_61, UInt<1>("h00")) @[Booth8Cycle.scala 109:11]
      when _T_62 : @[Booth8Cycle.scala 109:11]
        printf(clock, UInt<1>(1), "** Test Initialized: accumulator: %b-%b  || multiplier: %b  ||  multiplicand: %b\n", accUpper, accLower, io.multiplier, mcd) @[Booth8Cycle.scala 109:11]
        skip @[Booth8Cycle.scala 109:11]
      skip @[Booth8Cycle.scala 103:19]
    else : @[Booth8Cycle.scala 113:14]
      node _T_63 = lt(iter, UInt<4>("h08")) @[Booth8Cycle.scala 114:16]
      when _T_63 : @[Booth8Cycle.scala 114:23]
        node _T_64 = bits(reset, 0, 0) @[Booth8Cycle.scala 116:13]
        node _T_65 = eq(_T_64, UInt<1>("h00")) @[Booth8Cycle.scala 116:13]
        when _T_65 : @[Booth8Cycle.scala 116:13]
          printf(clock, UInt<1>(1), "Iteration: %d\n", iter) @[Booth8Cycle.scala 116:13]
          skip @[Booth8Cycle.scala 116:13]
        node _T_66 = bits(reset, 0, 0) @[Booth8Cycle.scala 117:13]
        node _T_67 = eq(_T_66, UInt<1>("h00")) @[Booth8Cycle.scala 117:13]
        when _T_67 : @[Booth8Cycle.scala 117:13]
          printf(clock, UInt<1>(1), "  Registered Values:\n") @[Booth8Cycle.scala 117:13]
          skip @[Booth8Cycle.scala 117:13]
        node _T_68 = bits(reset, 0, 0) @[Booth8Cycle.scala 118:13]
        node _T_69 = eq(_T_68, UInt<1>("h00")) @[Booth8Cycle.scala 118:13]
        when _T_69 : @[Booth8Cycle.scala 118:13]
          printf(clock, UInt<1>(1), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 118:13]
          skip @[Booth8Cycle.scala 118:13]
        node _T_70 = bits(reset, 0, 0) @[Booth8Cycle.scala 119:13]
        node _T_71 = eq(_T_70, UInt<1>("h00")) @[Booth8Cycle.scala 119:13]
        when _T_71 : @[Booth8Cycle.scala 119:13]
          printf(clock, UInt<1>(1), "     * AccUpper | AccLower: %b | %b\n", accUpper, accLower) @[Booth8Cycle.scala 119:13]
          skip @[Booth8Cycle.scala 119:13]
        mpl <= nextMPL @[Booth8Cycle.scala 122:16]
        node _T_72 = bits(accShift, 31, 16) @[Booth8Cycle.scala 123:27]
        accUpper <= _T_72 @[Booth8Cycle.scala 123:16]
        node _T_73 = bits(accShift, 15, 0) @[Booth8Cycle.scala 124:27]
        accLower <= _T_73 @[Booth8Cycle.scala 124:16]
        iter <= nextIter @[Booth8Cycle.scala 125:16]
        skip @[Booth8Cycle.scala 114:23]
      else : @[Booth8Cycle.scala 128:16]
        io.finished <= UInt<1>("h01") @[Booth8Cycle.scala 129:19]
        iter <= iter @[Booth8Cycle.scala 130:19]
        skip @[Booth8Cycle.scala 128:16]
      skip @[Booth8Cycle.scala 113:14]
    
