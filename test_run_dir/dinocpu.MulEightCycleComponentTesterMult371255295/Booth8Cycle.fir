;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip reset : UInt<1>, finished : UInt<1>, product : UInt<32>}
    
    reg acc : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 17:26]
    reg iter : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Booth8Cycle.scala 18:32]
    reg lastBit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Booth8Cycle.scala 19:32]
    reg multFrame : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Booth8Cycle.scala 20:32]
    io.product <= multFrame @[Booth8Cycle.scala 23:15]
    io.finished <= UInt<1>("h00") @[Booth8Cycle.scala 24:15]
    when io.reset : @[Booth8Cycle.scala 27:19]
      acc <= UInt<1>("h00") @[Booth8Cycle.scala 28:19]
      iter <= UInt<1>("h00") @[Booth8Cycle.scala 29:19]
      lastBit <= UInt<1>("h00") @[Booth8Cycle.scala 30:19]
      node _T = cat(acc, io.multiplier) @[Cat.scala 29:58]
      multFrame <= _T @[Booth8Cycle.scala 31:19]
      skip @[Booth8Cycle.scala 27:19]
    else : @[Booth8Cycle.scala 35:14]
      node _T_1 = eq(iter, UInt<3>("h07")) @[Booth8Cycle.scala 36:20]
      when _T_1 : @[Booth8Cycle.scala 36:29]
        io.finished <= UInt<1>("h01") @[Booth8Cycle.scala 37:29]
        skip @[Booth8Cycle.scala 36:29]
      else : @[Booth8Cycle.scala 40:20]
        node _T_2 = bits(multFrame, 1, 1) @[Booth8Cycle.scala 41:32]
        node _T_3 = eq(_T_2, UInt<1>("h00")) @[Booth8Cycle.scala 41:36]
        when _T_3 : @[Booth8Cycle.scala 41:45]
          node _T_4 = bits(multFrame, 0, 0) @[Booth8Cycle.scala 42:43]
          node _T_5 = cat(_T_4, lastBit) @[Cat.scala 29:58]
          node _T_6 = eq(_T_5, UInt<2>("h03")) @[Booth8Cycle.scala 42:57]
          when _T_6 : @[Booth8Cycle.scala 42:66]
            node _T_7 = shl(io.multiplicand, 1) @[Booth8Cycle.scala 43:63]
            node _T_8 = add(acc, _T_7) @[Booth8Cycle.scala 43:44]
            node _T_9 = tail(_T_8, 1) @[Booth8Cycle.scala 43:44]
            acc <= _T_9 @[Booth8Cycle.scala 43:37]
            node _T_10 = bits(reset, 0, 0) @[Booth8Cycle.scala 44:17]
            node _T_11 = eq(_T_10, UInt<1>("h00")) @[Booth8Cycle.scala 44:17]
            when _T_11 : @[Booth8Cycle.scala 44:17]
              printf(clock, UInt<1>(1), "Accumulator += 2 * multiplicand\n") @[Booth8Cycle.scala 44:17]
              skip @[Booth8Cycle.scala 44:17]
            skip @[Booth8Cycle.scala 42:66]
          else : @[Booth8Cycle.scala 47:110]
            node _T_12 = bits(multFrame, 0, 0) @[Booth8Cycle.scala 47:49]
            node _T_13 = cat(_T_12, lastBit) @[Cat.scala 29:58]
            node _T_14 = eq(_T_13, UInt<2>("h02")) @[Booth8Cycle.scala 47:63]
            node _T_15 = bits(multFrame, 0, 0) @[Booth8Cycle.scala 47:87]
            node _T_16 = cat(_T_15, lastBit) @[Cat.scala 29:58]
            node _T_17 = eq(_T_16, UInt<1>("h01")) @[Booth8Cycle.scala 47:101]
            node _T_18 = or(_T_14, _T_17) @[Booth8Cycle.scala 47:71]
            when _T_18 : @[Booth8Cycle.scala 47:110]
              node _T_19 = add(acc, io.multiplicand) @[Booth8Cycle.scala 48:44]
              node _T_20 = tail(_T_19, 1) @[Booth8Cycle.scala 48:44]
              acc <= _T_20 @[Booth8Cycle.scala 48:37]
              node _T_21 = bits(reset, 0, 0) @[Booth8Cycle.scala 49:17]
              node _T_22 = eq(_T_21, UInt<1>("h00")) @[Booth8Cycle.scala 49:17]
              when _T_22 : @[Booth8Cycle.scala 49:17]
                printf(clock, UInt<1>(1), "Accumulator += multiplicand\n") @[Booth8Cycle.scala 49:17]
                skip @[Booth8Cycle.scala 49:17]
              skip @[Booth8Cycle.scala 47:110]
            else : @[Booth8Cycle.scala 52:36]
              acc <= acc @[Booth8Cycle.scala 53:37]
              node _T_23 = bits(reset, 0, 0) @[Booth8Cycle.scala 54:17]
              node _T_24 = eq(_T_23, UInt<1>("h00")) @[Booth8Cycle.scala 54:17]
              when _T_24 : @[Booth8Cycle.scala 54:17]
                printf(clock, UInt<1>(1), "Doing Nothing\n") @[Booth8Cycle.scala 54:17]
                skip @[Booth8Cycle.scala 54:17]
              skip @[Booth8Cycle.scala 52:36]
          skip @[Booth8Cycle.scala 41:45]
        else : @[Booth8Cycle.scala 58:28]
          node _T_25 = bits(multFrame, 0, 0) @[Booth8Cycle.scala 59:43]
          node _T_26 = cat(_T_25, lastBit) @[Cat.scala 29:58]
          node _T_27 = eq(_T_26, UInt<1>("h00")) @[Booth8Cycle.scala 59:57]
          when _T_27 : @[Booth8Cycle.scala 59:66]
            node _T_28 = shl(io.multiplicand, 1) @[Booth8Cycle.scala 60:63]
            node _T_29 = sub(acc, _T_28) @[Booth8Cycle.scala 60:44]
            node _T_30 = tail(_T_29, 1) @[Booth8Cycle.scala 60:44]
            acc <= _T_30 @[Booth8Cycle.scala 60:37]
            node _T_31 = bits(reset, 0, 0) @[Booth8Cycle.scala 61:17]
            node _T_32 = eq(_T_31, UInt<1>("h00")) @[Booth8Cycle.scala 61:17]
            when _T_32 : @[Booth8Cycle.scala 61:17]
              printf(clock, UInt<1>(1), "Accumulator -= 2 * multiplicand\n") @[Booth8Cycle.scala 61:17]
              skip @[Booth8Cycle.scala 61:17]
            skip @[Booth8Cycle.scala 59:66]
          else : @[Booth8Cycle.scala 64:110]
            node _T_33 = bits(multFrame, 0, 0) @[Booth8Cycle.scala 64:49]
            node _T_34 = cat(_T_33, lastBit) @[Cat.scala 29:58]
            node _T_35 = eq(_T_34, UInt<2>("h02")) @[Booth8Cycle.scala 64:63]
            node _T_36 = bits(multFrame, 0, 0) @[Booth8Cycle.scala 64:87]
            node _T_37 = cat(_T_36, lastBit) @[Cat.scala 29:58]
            node _T_38 = eq(_T_37, UInt<1>("h01")) @[Booth8Cycle.scala 64:101]
            node _T_39 = or(_T_35, _T_38) @[Booth8Cycle.scala 64:71]
            when _T_39 : @[Booth8Cycle.scala 64:110]
              node _T_40 = sub(acc, io.multiplicand) @[Booth8Cycle.scala 65:44]
              node _T_41 = tail(_T_40, 1) @[Booth8Cycle.scala 65:44]
              acc <= _T_41 @[Booth8Cycle.scala 65:37]
              node _T_42 = bits(reset, 0, 0) @[Booth8Cycle.scala 66:17]
              node _T_43 = eq(_T_42, UInt<1>("h00")) @[Booth8Cycle.scala 66:17]
              when _T_43 : @[Booth8Cycle.scala 66:17]
                printf(clock, UInt<1>(1), "Accumulator -= multiplicand\n") @[Booth8Cycle.scala 66:17]
                skip @[Booth8Cycle.scala 66:17]
              skip @[Booth8Cycle.scala 64:110]
            else : @[Booth8Cycle.scala 69:36]
              acc <= acc @[Booth8Cycle.scala 70:37]
              node _T_44 = bits(reset, 0, 0) @[Booth8Cycle.scala 71:17]
              node _T_45 = eq(_T_44, UInt<1>("h00")) @[Booth8Cycle.scala 71:17]
              when _T_45 : @[Booth8Cycle.scala 71:17]
                printf(clock, UInt<1>(1), "Doing Nothing\n") @[Booth8Cycle.scala 71:17]
                skip @[Booth8Cycle.scala 71:17]
              skip @[Booth8Cycle.scala 69:36]
          skip @[Booth8Cycle.scala 58:28]
        node _T_46 = bits(multFrame, 15, 0) @[Booth8Cycle.scala 76:38]
        node _T_47 = cat(acc, _T_46) @[Cat.scala 29:58]
        multFrame <= _T_47 @[Booth8Cycle.scala 76:17]
        node _T_48 = bits(multFrame, 1, 1) @[Booth8Cycle.scala 79:37]
        lastBit <= _T_48 @[Booth8Cycle.scala 79:25]
        node _T_49 = bits(multFrame, 31, 31) @[Booth8Cycle.scala 82:43]
        node _T_50 = bits(multFrame, 31, 31) @[Booth8Cycle.scala 82:58]
        node _T_51 = bits(multFrame, 31, 2) @[Booth8Cycle.scala 82:73]
        node _T_52 = cat(_T_49, _T_50) @[Cat.scala 29:58]
        node _T_53 = cat(_T_52, _T_51) @[Cat.scala 29:58]
        multFrame <= _T_53 @[Booth8Cycle.scala 82:27]
        node _T_54 = add(iter, UInt<1>("h01")) @[Booth8Cycle.scala 88:30]
        node _T_55 = tail(_T_54, 1) @[Booth8Cycle.scala 88:30]
        iter <= _T_55 @[Booth8Cycle.scala 88:22]
        skip @[Booth8Cycle.scala 40:20]
      skip @[Booth8Cycle.scala 35:14]
    node _T_56 = bits(reset, 0, 0) @[Booth8Cycle.scala 93:13]
    node _T_57 = eq(_T_56, UInt<1>("h00")) @[Booth8Cycle.scala 93:13]
    when _T_57 : @[Booth8Cycle.scala 93:13]
      printf(clock, UInt<1>(1), "      Iteration: %d || MultFrame: %b\n", iter, multFrame) @[Booth8Cycle.scala 93:13]
      skip @[Booth8Cycle.scala 93:13]
    
