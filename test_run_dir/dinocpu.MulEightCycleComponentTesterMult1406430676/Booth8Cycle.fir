;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Booth8Cycle : 
  module Booth8Cycle : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip multiplicand : UInt<16>, flip multiplier : UInt<16>, flip start : UInt<1>, finished : UInt<1>, product : UInt<32>}
    
    reg accUpper : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 140:26]
    reg accLower : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 141:26]
    reg mcd : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Booth8Cycle.scala 142:26]
    reg mpl : UInt<17>, clock with : (reset => (reset, UInt<17>("h00"))) @[Booth8Cycle.scala 143:26]
    reg iter : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Booth8Cycle.scala 144:26]
    reg res : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Booth8Cycle.scala 145:26]
    reg multFin : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Booth8Cycle.scala 146:26]
    wire nextIter : UInt<5> @[Booth8Cycle.scala 150:23]
    wire accCalc : UInt<16> @[Booth8Cycle.scala 151:23]
    wire accShift : UInt<32> @[Booth8Cycle.scala 152:23]
    wire operation : UInt<3> @[Booth8Cycle.scala 153:23]
    wire doubleMCD : UInt<16> @[Booth8Cycle.scala 154:23]
    wire nextMPL : UInt<17> @[Booth8Cycle.scala 155:23]
    wire accumulatorUpper : UInt<16> @[Booth8Cycle.scala 157:30]
    wire calcMultiplicand : UInt<16> @[Booth8Cycle.scala 158:30]
    wire temp_upAcc : UInt<16> @[Booth8Cycle.scala 159:30]
    wire temp_mcd : UInt<16> @[Booth8Cycle.scala 160:30]
    wire temp_op : UInt<3> @[Booth8Cycle.scala 161:30]
    nextIter is invalid @[Booth8Cycle.scala 164:13]
    accCalc is invalid @[Booth8Cycle.scala 165:13]
    accShift is invalid @[Booth8Cycle.scala 166:13]
    operation is invalid @[Booth8Cycle.scala 167:13]
    doubleMCD is invalid @[Booth8Cycle.scala 168:13]
    nextMPL is invalid @[Booth8Cycle.scala 169:13]
    temp_upAcc <= UInt<1>("h00") @[Booth8Cycle.scala 172:14]
    temp_mcd <= io.multiplicand @[Booth8Cycle.scala 173:14]
    node _T = bits(io.multiplier, 1, 0) @[Booth8Cycle.scala 174:34]
    node _T_1 = cat(_T, UInt<1>("h00")) @[Cat.scala 29:58]
    temp_op <= _T_1 @[Booth8Cycle.scala 174:14]
    node _T_2 = eq(iter, UInt<1>("h00")) @[Booth8Cycle.scala 177:14]
    when _T_2 : @[Booth8Cycle.scala 177:23]
      operation <= temp_op @[Booth8Cycle.scala 178:22]
      accumulatorUpper <= temp_upAcc @[Booth8Cycle.scala 179:22]
      calcMultiplicand <= temp_mcd @[Booth8Cycle.scala 180:22]
      skip @[Booth8Cycle.scala 177:23]
    else : @[Booth8Cycle.scala 182:14]
      node _T_3 = bits(mpl, 2, 0) @[Booth8Cycle.scala 183:28]
      operation <= _T_3 @[Booth8Cycle.scala 183:22]
      accumulatorUpper <= accUpper @[Booth8Cycle.scala 184:22]
      calcMultiplicand <= mcd @[Booth8Cycle.scala 185:22]
      skip @[Booth8Cycle.scala 182:14]
    node _T_4 = eq(UInt<1>("h00"), operation) @[Conditional.scala 37:30]
    when _T_4 : @[Conditional.scala 40:58]
      accCalc <= accumulatorUpper @[Booth8Cycle.scala 191:15]
      node _T_5 = bits(reset, 0, 0) @[Booth8Cycle.scala 192:13]
      node _T_6 = eq(_T_5, UInt<1>("h00")) @[Booth8Cycle.scala 192:13]
      when _T_6 : @[Booth8Cycle.scala 192:13]
        printf(clock, UInt<1>(1), "    000: Do Nothing\n") @[Booth8Cycle.scala 192:13]
        skip @[Booth8Cycle.scala 192:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_7 = eq(UInt<1>("h01"), operation) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 39:67]
        node _T_8 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 195:35]
        node _T_9 = tail(_T_8, 1) @[Booth8Cycle.scala 195:35]
        accCalc <= _T_9 @[Booth8Cycle.scala 195:15]
        node _T_10 = bits(reset, 0, 0) @[Booth8Cycle.scala 196:13]
        node _T_11 = eq(_T_10, UInt<1>("h00")) @[Booth8Cycle.scala 196:13]
        when _T_11 : @[Booth8Cycle.scala 196:13]
          printf(clock, UInt<1>(1), "    001: Add Multiplicand\n") @[Booth8Cycle.scala 196:13]
          skip @[Booth8Cycle.scala 196:13]
        node _T_12 = bits(reset, 0, 0) @[Booth8Cycle.scala 197:13]
        node _T_13 = eq(_T_12, UInt<1>("h00")) @[Booth8Cycle.scala 197:13]
        when _T_13 : @[Booth8Cycle.scala 197:13]
          printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 197:13]
          skip @[Booth8Cycle.scala 197:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_14 = eq(UInt<2>("h02"), operation) @[Conditional.scala 37:30]
        when _T_14 : @[Conditional.scala 39:67]
          node _T_15 = add(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 200:35]
          node _T_16 = tail(_T_15, 1) @[Booth8Cycle.scala 200:35]
          accCalc <= _T_16 @[Booth8Cycle.scala 200:15]
          node _T_17 = bits(reset, 0, 0) @[Booth8Cycle.scala 201:13]
          node _T_18 = eq(_T_17, UInt<1>("h00")) @[Booth8Cycle.scala 201:13]
          when _T_18 : @[Booth8Cycle.scala 201:13]
            printf(clock, UInt<1>(1), "    010: Add Multiplicand\n") @[Booth8Cycle.scala 201:13]
            skip @[Booth8Cycle.scala 201:13]
          node _T_19 = bits(reset, 0, 0) @[Booth8Cycle.scala 202:13]
          node _T_20 = eq(_T_19, UInt<1>("h00")) @[Booth8Cycle.scala 202:13]
          when _T_20 : @[Booth8Cycle.scala 202:13]
            printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", mcd, accUpper) @[Booth8Cycle.scala 202:13]
            skip @[Booth8Cycle.scala 202:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_21 = eq(UInt<2>("h03"), operation) @[Conditional.scala 37:30]
          when _T_21 : @[Conditional.scala 39:67]
            node _T_22 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 205:55]
            node _T_23 = add(accumulatorUpper, _T_22) @[Booth8Cycle.scala 205:35]
            node _T_24 = tail(_T_23, 1) @[Booth8Cycle.scala 205:35]
            accCalc <= _T_24 @[Booth8Cycle.scala 205:15]
            node _T_25 = bits(reset, 0, 0) @[Booth8Cycle.scala 206:13]
            node _T_26 = eq(_T_25, UInt<1>("h00")) @[Booth8Cycle.scala 206:13]
            when _T_26 : @[Booth8Cycle.scala 206:13]
              printf(clock, UInt<1>(1), "    011: Add 2 * Multiplicand\n") @[Booth8Cycle.scala 206:13]
              skip @[Booth8Cycle.scala 206:13]
            node _T_27 = bits(reset, 0, 0) @[Booth8Cycle.scala 207:13]
            node _T_28 = eq(_T_27, UInt<1>("h00")) @[Booth8Cycle.scala 207:13]
            when _T_28 : @[Booth8Cycle.scala 207:13]
              printf(clock, UInt<1>(1), "     --> Adding %d to %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 207:13]
              skip @[Booth8Cycle.scala 207:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_29 = eq(UInt<3>("h04"), operation) @[Conditional.scala 37:30]
            when _T_29 : @[Conditional.scala 39:67]
              node _T_30 = dshl(calcMultiplicand, UInt<1>("h01")) @[Booth8Cycle.scala 210:55]
              node _T_31 = sub(accumulatorUpper, _T_30) @[Booth8Cycle.scala 210:35]
              node _T_32 = tail(_T_31, 1) @[Booth8Cycle.scala 210:35]
              accCalc <= _T_32 @[Booth8Cycle.scala 210:15]
              node _T_33 = bits(reset, 0, 0) @[Booth8Cycle.scala 211:13]
              node _T_34 = eq(_T_33, UInt<1>("h00")) @[Booth8Cycle.scala 211:13]
              when _T_34 : @[Booth8Cycle.scala 211:13]
                printf(clock, UInt<1>(1), "    100: Subtract 2 * Multiplicand\n") @[Booth8Cycle.scala 211:13]
                skip @[Booth8Cycle.scala 211:13]
              node _T_35 = bits(reset, 0, 0) @[Booth8Cycle.scala 212:13]
              node _T_36 = eq(_T_35, UInt<1>("h00")) @[Booth8Cycle.scala 212:13]
              when _T_36 : @[Booth8Cycle.scala 212:13]
                printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", doubleMCD, accUpper) @[Booth8Cycle.scala 212:13]
                skip @[Booth8Cycle.scala 212:13]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_37 = eq(UInt<3>("h05"), operation) @[Conditional.scala 37:30]
              when _T_37 : @[Conditional.scala 39:67]
                node _T_38 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 215:35]
                node _T_39 = tail(_T_38, 1) @[Booth8Cycle.scala 215:35]
                accCalc <= _T_39 @[Booth8Cycle.scala 215:15]
                node _T_40 = bits(reset, 0, 0) @[Booth8Cycle.scala 216:13]
                node _T_41 = eq(_T_40, UInt<1>("h00")) @[Booth8Cycle.scala 216:13]
                when _T_41 : @[Booth8Cycle.scala 216:13]
                  printf(clock, UInt<1>(1), "    101: Subtract Multiplicand\n") @[Booth8Cycle.scala 216:13]
                  skip @[Booth8Cycle.scala 216:13]
                node _T_42 = bits(reset, 0, 0) @[Booth8Cycle.scala 217:13]
                node _T_43 = eq(_T_42, UInt<1>("h00")) @[Booth8Cycle.scala 217:13]
                when _T_43 : @[Booth8Cycle.scala 217:13]
                  printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 217:13]
                  skip @[Booth8Cycle.scala 217:13]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_44 = eq(UInt<3>("h06"), operation) @[Conditional.scala 37:30]
                when _T_44 : @[Conditional.scala 39:67]
                  node _T_45 = sub(accumulatorUpper, calcMultiplicand) @[Booth8Cycle.scala 220:35]
                  node _T_46 = tail(_T_45, 1) @[Booth8Cycle.scala 220:35]
                  accCalc <= _T_46 @[Booth8Cycle.scala 220:15]
                  node _T_47 = bits(reset, 0, 0) @[Booth8Cycle.scala 221:13]
                  node _T_48 = eq(_T_47, UInt<1>("h00")) @[Booth8Cycle.scala 221:13]
                  when _T_48 : @[Booth8Cycle.scala 221:13]
                    printf(clock, UInt<1>(1), "    110: Subtract Multiplicand\n") @[Booth8Cycle.scala 221:13]
                    skip @[Booth8Cycle.scala 221:13]
                  node _T_49 = bits(reset, 0, 0) @[Booth8Cycle.scala 222:13]
                  node _T_50 = eq(_T_49, UInt<1>("h00")) @[Booth8Cycle.scala 222:13]
                  when _T_50 : @[Booth8Cycle.scala 222:13]
                    printf(clock, UInt<1>(1), "     --> Subtracting %d from %d\n", mcd, accUpper) @[Booth8Cycle.scala 222:13]
                    skip @[Booth8Cycle.scala 222:13]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_51 = eq(UInt<3>("h07"), operation) @[Conditional.scala 37:30]
                  when _T_51 : @[Conditional.scala 39:67]
                    accCalc <= accumulatorUpper @[Booth8Cycle.scala 226:15]
                    node _T_52 = bits(reset, 0, 0) @[Booth8Cycle.scala 227:13]
                    node _T_53 = eq(_T_52, UInt<1>("h00")) @[Booth8Cycle.scala 227:13]
                    when _T_53 : @[Booth8Cycle.scala 227:13]
                      printf(clock, UInt<1>(1), "    111: Do Nothing\n") @[Booth8Cycle.scala 227:13]
                      skip @[Booth8Cycle.scala 227:13]
                    skip @[Conditional.scala 39:67]
    node _T_54 = add(iter, UInt<1>("h01")) @[Booth8Cycle.scala 232:20]
    node _T_55 = tail(_T_54, 1) @[Booth8Cycle.scala 232:20]
    nextIter <= _T_55 @[Booth8Cycle.scala 232:12]
    node _T_56 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 235:26]
    node _T_57 = bits(accCalc, 15, 15) @[Booth8Cycle.scala 235:39]
    node _T_58 = bits(accLower, 15, 2) @[Booth8Cycle.scala 235:62]
    node _T_59 = cat(accCalc, _T_58) @[Cat.scala 29:58]
    node _T_60 = cat(_T_56, _T_57) @[Cat.scala 29:58]
    node _T_61 = cat(_T_60, _T_59) @[Cat.scala 29:58]
    accShift <= _T_61 @[Booth8Cycle.scala 235:12]
    node _T_62 = dshr(mpl, UInt<2>("h02")) @[Booth8Cycle.scala 236:19]
    nextMPL <= _T_62 @[Booth8Cycle.scala 236:12]
    node _T_63 = cat(accUpper, accLower) @[Cat.scala 29:58]
    io.product <= _T_63 @[Booth8Cycle.scala 243:15]
    io.finished <= multFin @[Booth8Cycle.scala 244:15]
    node _T_64 = eq(res, UInt<1>("h00")) @[Booth8Cycle.scala 246:25]
    node _T_65 = and(io.start, _T_64) @[Booth8Cycle.scala 246:18]
    when _T_65 : @[Booth8Cycle.scala 246:34]
      res <= UInt<1>("h01") @[Booth8Cycle.scala 247:14]
      node _T_66 = bits(accShift, 31, 16) @[Booth8Cycle.scala 248:25]
      accUpper <= _T_66 @[Booth8Cycle.scala 248:14]
      node _T_67 = bits(accShift, 15, 0) @[Booth8Cycle.scala 249:25]
      accLower <= _T_67 @[Booth8Cycle.scala 249:14]
      mcd <= io.multiplicand @[Booth8Cycle.scala 250:14]
      node _T_68 = cat(io.multiplier, UInt<1>("h00")) @[Cat.scala 29:58]
      node _T_69 = dshr(_T_68, UInt<2>("h02")) @[Booth8Cycle.scala 251:41]
      mpl <= _T_69 @[Booth8Cycle.scala 251:14]
      iter <= UInt<1>("h01") @[Booth8Cycle.scala 252:14]
      node _T_70 = bits(reset, 0, 0) @[Booth8Cycle.scala 253:11]
      node _T_71 = eq(_T_70, UInt<1>("h00")) @[Booth8Cycle.scala 253:11]
      when _T_71 : @[Booth8Cycle.scala 253:11]
        printf(clock, UInt<1>(1), "REGISTERS INITIALIZED\n") @[Booth8Cycle.scala 253:11]
        skip @[Booth8Cycle.scala 253:11]
      skip @[Booth8Cycle.scala 246:34]
    else : @[Booth8Cycle.scala 257:14]
      node _T_72 = bits(reset, 0, 0) @[Booth8Cycle.scala 258:11]
      node _T_73 = eq(_T_72, UInt<1>("h00")) @[Booth8Cycle.scala 258:11]
      when _T_73 : @[Booth8Cycle.scala 258:11]
        printf(clock, UInt<1>(1), "Entered Register Otherwise\n") @[Booth8Cycle.scala 258:11]
        skip @[Booth8Cycle.scala 258:11]
      node _T_74 = lt(iter, UInt<4>("h08")) @[Booth8Cycle.scala 259:16]
      when _T_74 : @[Booth8Cycle.scala 259:23]
        node _T_75 = bits(reset, 0, 0) @[Booth8Cycle.scala 261:13]
        node _T_76 = eq(_T_75, UInt<1>("h00")) @[Booth8Cycle.scala 261:13]
        when _T_76 : @[Booth8Cycle.scala 261:13]
          printf(clock, UInt<1>(1), "Iteration: %d\n", iter) @[Booth8Cycle.scala 261:13]
          skip @[Booth8Cycle.scala 261:13]
        node _T_77 = bits(reset, 0, 0) @[Booth8Cycle.scala 262:13]
        node _T_78 = eq(_T_77, UInt<1>("h00")) @[Booth8Cycle.scala 262:13]
        when _T_78 : @[Booth8Cycle.scala 262:13]
          printf(clock, UInt<1>(1), "  Registered Values:\n") @[Booth8Cycle.scala 262:13]
          skip @[Booth8Cycle.scala 262:13]
        node _T_79 = bits(reset, 0, 0) @[Booth8Cycle.scala 263:13]
        node _T_80 = eq(_T_79, UInt<1>("h00")) @[Booth8Cycle.scala 263:13]
        when _T_80 : @[Booth8Cycle.scala 263:13]
          printf(clock, UInt<1>(1), "     * mpl: %b\n", mpl) @[Booth8Cycle.scala 263:13]
          skip @[Booth8Cycle.scala 263:13]
        node _T_81 = bits(reset, 0, 0) @[Booth8Cycle.scala 264:13]
        node _T_82 = eq(_T_81, UInt<1>("h00")) @[Booth8Cycle.scala 264:13]
        when _T_82 : @[Booth8Cycle.scala 264:13]
          printf(clock, UInt<1>(1), "     * AccUpper: %b | AccLower: %b \n", accUpper, accLower) @[Booth8Cycle.scala 264:13]
          skip @[Booth8Cycle.scala 264:13]
        multFin <= UInt<1>("h00") @[Booth8Cycle.scala 267:16]
        res <= UInt<1>("h01") @[Booth8Cycle.scala 268:16]
        mcd <= mcd @[Booth8Cycle.scala 269:16]
        mpl <= nextMPL @[Booth8Cycle.scala 270:16]
        node _T_83 = bits(accShift, 31, 16) @[Booth8Cycle.scala 271:27]
        accUpper <= _T_83 @[Booth8Cycle.scala 271:16]
        node _T_84 = bits(accShift, 15, 0) @[Booth8Cycle.scala 272:27]
        accLower <= _T_84 @[Booth8Cycle.scala 272:16]
        iter <= nextIter @[Booth8Cycle.scala 273:16]
        skip @[Booth8Cycle.scala 259:23]
      else : @[Booth8Cycle.scala 276:16]
        node _T_85 = bits(reset, 0, 0) @[Booth8Cycle.scala 277:13]
        node _T_86 = eq(_T_85, UInt<1>("h00")) @[Booth8Cycle.scala 277:13]
        when _T_86 : @[Booth8Cycle.scala 277:13]
          printf(clock, UInt<1>(1), "Multiplier Finished Calculating...\n") @[Booth8Cycle.scala 277:13]
          skip @[Booth8Cycle.scala 277:13]
        res <= UInt<1>("h00") @[Booth8Cycle.scala 278:19]
        multFin <= UInt<1>("h01") @[Booth8Cycle.scala 279:19]
        iter <= iter @[Booth8Cycle.scala 280:19]
        skip @[Booth8Cycle.scala 276:16]
      skip @[Booth8Cycle.scala 257:14]
    
